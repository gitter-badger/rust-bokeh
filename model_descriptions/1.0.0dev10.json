{
  "PolyAnnotation": {
    "props": [
      {
        "default": "#cccccc", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the polygon."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "#fff9ba", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the polygon."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "xs_units", 
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the polygon."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the polygon."
      }, 
      {
        "default": [], 
        "type": "Seq(Float)", 
        "name": "xs", 
        "desc": "The x-coordinates of the region to draw."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the polygon."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "ys_units", 
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": [], 
        "type": "Seq(Float)", 
        "name": "ys", 
        "desc": "The y-coordinates of the region to draw."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": 0.3, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the polygon."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the polygon."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0.4, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the polygon."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the polygon."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"a13ff57d-b444-4e00-a20e-7a52e9643c92\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"xs\": [], \"xs_units\": \"data\", \"y_range_name\": \"default\", \"ys\": [], \"ys_units\": \"data\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "PolyAnnotation", 
    "desc": "Render a shaded polygonal region as an annotation."
  }, 
  "Patches": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the patches."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the patches."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the patches."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the patches."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the patches."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the patches."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the patches."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the patches."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "xs", 
        "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the x-coordinates for each polygon should be separated by NaN\n        values in the sublists."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "ys", 
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the y-coordinates for each polygon should be separated by NaN\n        values in the sublists."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the patches."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"57e31d90-cc2b-4db2-b881-6d886b6fa25e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "Patches", 
    "desc": "Render several patches.\n\n    The data for the ``Patches`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Patches.py\n        :source-position: below"
  }, 
  "CheckboxButtonGroup": {
    "props": [
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(Int)", 
        "name": "active", 
        "desc": "The list of indices of selected check boxes."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"active\": [], \"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"bfb5951a-2a94-4d5f-b075-918f8e780e16\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ], 
    "name": "CheckboxButtonGroup", 
    "desc": "A group of check boxes rendered as toggle buttons."
  }, 
  "DataRenderer": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "image", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"88584207-30a8-4d83-87e0-acb603fb2bb2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.renderers.Renderer"
    ], 
    "name": "DataRenderer", 
    "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``TileRenderer``, ``GraphRenderer``).\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ToolbarBox": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "right", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "toolbar_location", 
        "desc": ""
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(ToolbarBase)", 
        "name": "toolbar", 
        "desc": "A toolbar associated with a plot which holds all its tools."
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"0abb513e-b3c0-4f6a-ac0b-0045e64d40dc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"toolbar\": null, \"toolbar_location\": \"right\", \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "ToolbarBox", 
    "desc": "A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience."
  }, 
  "LayoutProvider": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"9e120f63-566e-49fb-bcce-fcd86a3dd98f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "LayoutProvider", 
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "GMapOptions": {
    "props": [
      {
        "default": null, 
        "type": "JSON", 
        "name": "styles", 
        "desc": "A JSON array of `map styles`_ to use for the GMapPlot. Many example styles can\n    `be found here`_.\n\n    .. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n    .. _be found here: https://snazzymaps.com"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 45, 
        "type": "Int", 
        "name": "tilt", 
        "desc": "`Tilt`_ angle of the map. The only allowed values are 0 and 45.\n    Only has an effect on 'satellite' and 'hybrid' map types.\n    A value of 0 causes the map to always use a 0 degree overhead view.\n    A value of 45 causes the tilt angle to switch to 45 imagery if available.\n\n    .. _Tilt: https://developers.google.com/maps/documentation/javascript/reference/3/map#MapOptions.tilt"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 12, 
        "type": "Int", 
        "name": "zoom", 
        "desc": "The initial zoom level to use when displaying the map."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "scale_control", 
        "desc": "Whether the Google map should display its distance scale control."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "lat", 
        "desc": "The latitude where the map should be centered."
      }, 
      {
        "default": "roadmap", 
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')", 
        "name": "map_type", 
        "desc": "The `map type`_ to use for the GMapPlot.\n\n    .. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "lng", 
        "desc": "The longitude where the map should be centered."
      }
    ], 
    "proto": "{\"id\": \"de4f6bec-aa49-4a5b-bafa-aa0e61fb77b8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"map_type\": \"roadmap\", \"name\": null, \"scale_control\": false, \"styles\": null, \"subscribed_events\": [], \"tags\": [], \"tilt\": 45, \"zoom\": 12}", 
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ], 
    "name": "GMapOptions", 
    "desc": "Options for GMapPlot objects."
  }, 
  "Quadratic": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the parabolas."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the parabolas."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the parabolas."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the parabolas."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cy", 
        "desc": "The y-coordinates of the control points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cx", 
        "desc": "The x-coordinates of the control points."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the parabolas."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the parabolas."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y1", 
        "desc": "The y-coordinates of the ending points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y0", 
        "desc": "The y-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x0", 
        "desc": "The x-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x1", 
        "desc": "The x-coordinates of the ending points."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the parabolas."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"cx\": null, \"cy\": null, \"id\": \"556a0501-2b3a-4227-bae4-17ecf38f4033\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "Quadratic", 
    "desc": "Render parabolas.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Quadratic.py\n        :source-position: below"
  }, 
  "RangeTool": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Range1d)", 
        "name": "x_range", 
        "desc": "A range synchronized to the x-dimension of the overlay. If None, the overlay\n    will span the entire x-dimension."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"38de089a-187e-4b24-bc36-376d7518a37f\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [2, 2], \"line_width\": {\"value\": 0.5}, \"render_mode\": \"css\"}", 
        "type": "Instance(BoxAnnotation)", 
        "name": "overlay", 
        "desc": "A shaded annotation drawn to indicate the configured ranges."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "y_interaction", 
        "desc": "Whether to respond to vertical pan motions when a ``y_range`` is present.\n\n    By default, when a ``y_range`` is specified, it is possible to adjust the\n    vertical position of the range box by panning vertically inside the box, or\n    along the top or bottom edge of the box. To disable this, and fix the range\n    box in place vertically, set to False. (The box will still update if the\n    ``y_range`` is updated programmatically.)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "x_interaction", 
        "desc": "Whether to respond to horizontal pan motions when an ``x_range`` is present.\n\n    By default, when an ``x_range`` is specified, it is possible to adjust the\n    horizontal position of the range box by panning horizontally inside the\n    box, or along the top or bottom edge of the box. To disable this, and fix\n    the  range box in place horizontally, set to False. (The box will still\n    update if the ``x_range`` is updated programmatically.)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Instance(Range1d)", 
        "name": "y_range", 
        "desc": "A range synchronized to the y-dimension of the overlay. If None, the overlay\n    will span the entire y-dimension."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"f09b341f-0514-4932-ab86-3206326f8615\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"overlay\": {\"id\": \"9444ab75-9b2f-4f5b-aedf-db59226cad0d\", \"type\": \"BoxAnnotation\"}, \"subscribed_events\": [], \"tags\": [], \"x_interaction\": true, \"x_range\": null, \"y_interaction\": true, \"y_range\": null}", 
    "bases": [
      "bokeh.models.tools.Drag"
    ], 
    "name": "RangeTool", 
    "desc": "*toolbar icon*: |range_icon|\n\n    The range tool allows the user to update range objects for either or both\n    of the x- or y-dimensions by dragging a corresponding shaded annotation to\n    move it or change its boundaries.\n\n    A common use case is to add this tool to a plot with a large fixed range,\n    but to configure the tool range from a different plot. When the user\n    manipulates the overlay, the range of the second plot will be updated\n    automatically.\n\n    .. |range_icon| image:: /_images/icons/Range.png\n        :height: 18pt"
  }, 
  "RemoteSource": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "data_url", 
        "desc": "A URL to to fetch data from."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"id\": \"96c56f9f-a24f-4f8f-a5b1-1250303de210\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "polling_interval", 
        "desc": "A polling interval (in milliseconds) for updating data source."
      }, 
      {
        "default": "{\"id\": \"128ebf4b-9207-48b1-8f1b-82caca70f698\"}", 
        "type": "Instance(SelectionPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a SelectionPolicy that determines how selections are set."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "ColumnData(String, Seq(Any))", 
        "name": "data", 
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc."
      }
    ], 
    "proto": "{\"callback\": null, \"data\": {}, \"data_url\": null, \"id\": \"9a98e0cc-831c-4d00-a839-84ff4370a57e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"polling_interval\": null, \"selected\": {\"id\": \"d8471b25-e396-4d8b-8704-ad5652e51948\", \"type\": \"Selection\"}, \"selection_policy\": {\"id\": \"10aceff6-7d80-401a-84e1-cef976c97303\", \"type\": \"UnionRenderers\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ], 
    "name": "RemoteSource", 
    "desc": "Base class for remote column data sources that can update from data\n    URLs at prescribed time intervals.\n\n    .. note::\n        This base class is typically not useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Tool": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"1c6331fd-5460-48b4-a565-5ae2df02b149\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Tool", 
    "desc": "A base class for all interactive tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "StringEditor": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "completions", 
        "desc": "An optional list of completion strings."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"completions\": [], \"id\": \"464e6018-dac1-4b30-93be-fb0a75501d85\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "StringEditor", 
    "desc": "Basic string cell editor with auto-completion."
  }, 
  "Group": {
    "props": [
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "inline", 
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"03544d8d-0cce-4ed8-8b71-90a15ba02d7c\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ], 
    "name": "Group", 
    "desc": "Abstract base class for groups with items rendered as check/radio\n    boxes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "NodesOnly": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"e836dd1c-c3a7-4100-aaa6-f8a401b11a8c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ], 
    "name": "NodesOnly", 
    "desc": "With the NodesOnly policy, only graph nodes are able to be selected and\n    inspected. There is no selection or inspection of graph edges."
  }, 
  "Whisker": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the whisker body."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "upper", 
        "desc": "The coordinations of the upper end of the whiskers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "{\"id\": \"1509ad97-f07f-459b-89c7-231f401cd5be\", \"level\": \"underlay\", \"size\": 10}", 
        "type": "Instance(ArrowHead)", 
        "name": "upper_head", 
        "desc": "Instance of ArrowHead."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "upper_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "lower_units", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "{\"id\": \"6c55f4d0-475f-4751-b47f-dd32dcae202b\", \"level\": \"underlay\", \"size\": 10}", 
        "type": "Instance(ArrowHead)", 
        "name": "lower_head", 
        "desc": "Instance of ArrowHead."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "base", 
        "desc": "The orthogonal coordinates of the upper and lower values."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the whisker body."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the whisker body."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the whisker body."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the whisker body."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "base_units", 
        "desc": ""
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the whisker body."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "lower", 
        "desc": "The coordinates of the lower end of the whiskers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "underlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": "{\"data\": {}, \"id\": \"a40db798-cea8-4ade-8ebc-4b960874882d\"}", 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "Local data source to use when rendering annotations on the plot."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the whisker body."
      }, 
      {
        "default": "height", 
        "type": "Enum('width', 'height')", 
        "name": "dimension", 
        "desc": "The direction of the whisker can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction)."
      }
    ], 
    "proto": "{\"base\": null, \"dimension\": \"height\", \"id\": \"d4e186e7-1ed9-4dba-9e28-f9db924ebaca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"lower\": null, \"lower_head\": {\"id\": \"44e496d5-ad2b-4969-8532-3e2ef1f04bcd\", \"type\": \"TeeHead\"}, \"name\": null, \"plot\": null, \"source\": {\"id\": \"c5d8648a-e6a5-4bc6-b923-a2888777826c\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"upper_head\": {\"id\": \"7f5d3013-f1fc-4615-b550-438d6c69da61\", \"type\": \"TeeHead\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Whisker", 
    "desc": "Render a whisker along a dimension."
  }, 
  "LayoutDOM": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"33d3bb85-1e55-459f-ba61-f69ef26c20aa\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "LayoutDOM", 
    "desc": "An abstract base class for layout components.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "CompositeTicker": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [], 
        "type": "Seq(Instance(Ticker))", 
        "name": "tickers", 
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()"
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"6fc3d2e1-8060-4a39-98e9-2a5c62663323\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"tickers\": []}", 
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ], 
    "name": "CompositeTicker", 
    "desc": "Combine different tickers at different scales.\n\n    Uses the ``min_interval`` and ``max_interval`` interval attributes\n    of the tickers to select the appropriate ticker at different\n    scales."
  }, 
  "SquareX": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"993b5fd6-78d3-4e9d-96e9-aa2e7417641f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "SquareX", 
    "desc": "Render square markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/SquareX.py\n        :source-position: below"
  }, 
  "Widget": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"13111dab-d73c-44b0-af51-69b5493cd89b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "Widget", 
    "desc": "A base class for all interactive widget types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ArrowHead": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"52e9c937-90d5-4500-bf82-9aa3b3406d54\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "ArrowHead", 
    "desc": "Base class for arrow heads.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "DateEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"cbd3289e-709a-43f9-b907-572d6c08ad68\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "DateEditor", 
    "desc": "Calendar-based date cell editor."
  }, 
  "InvertedTriangle": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"b166db80-842d-45f9-be9a-6df991c226a6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "InvertedTriangle", 
    "desc": "Render upside-down triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/InvertedTriangle.py\n        :source-position: below"
  }, 
  "Expression": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"2b42bda9-807a-47d3-b115-18e54bddb52c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Expression", 
    "desc": "Base class for ``Expression`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        v_compute: (source) ->\n            # compute an array of values\n\n    .. note::\n        If you wish for results to be cached per source, and updated only if\n        the source changes, implement `_v_compute: (souce)` instead.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "CrosshairTool": {
    "props": [
      {
        "default": "black", 
        "type": "Color", 
        "name": "line_color", 
        "desc": "A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp"
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "line_width", 
        "desc": "Stroke width in units of pixels."
      }, 
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the crosshair tool is to track. By default, both a\n    vertical and horizontal line will be drawn. If only \"width\" is supplied,\n    only a horizontal line will be drawn. If only \"height\" is supplied,\n    only a vertical line will be drawn."
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "line_alpha", 
        "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toggleable", 
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"id\": \"512215f5-c003-4b2a-baa7-299e9cba840b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_width\": 1, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}", 
    "bases": [
      "bokeh.models.tools.Inspection"
    ], 
    "name": "CrosshairTool", 
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on\n    at all times, but can be configured in the inspector's menu\n    associated with the *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot,\n    centered on the current mouse position. The crosshair tool may be\n    configured to draw across only one dimension by setting the\n    ``dimension`` property to only ``width`` or ``height``.\n\n    .. |crosshair_icon| image:: /_images/icons/Crosshair.png\n        :height: 18pt"
  }, 
  "Asterisk": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"7268371d-af96-4dd0-bf02-7a173f9542c6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Asterisk", 
    "desc": "Render asterisk '*' markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Asterisk.py\n        :source-position: below"
  }, 
  "DatetimeTicker": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [
          "{\"id\": \"7514f302-29fd-4c52-adbd-31c79038c1d9\", \"mantissas\": [1, 2, 5], \"max_interval\": 500.0, \"num_minor_ticks\": 0}", 
          "{\"base\": 60, \"id\": \"1f4e0d2a-3a79-4a9b-8a0d-849d44687030\", \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}", 
          "{\"base\": 24, \"id\": \"f406b3be-6cc6-4771-9657-cf2c3ce0bc39\", \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}", 
          "{\"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], \"id\": \"84f91cab-0f3f-46d2-88f8-b75870be8af5\"}", 
          "{\"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28], \"id\": \"b40b2430-cac3-496a-a46d-a4c20aa09efe\"}", 
          "{\"days\": [1, 8, 15, 22], \"id\": \"f7aa19f9-c20a-4c97-9d3c-f0102051ba15\"}", 
          "{\"days\": [1, 15], \"id\": \"5d7841e0-1ed0-4e51-a9ad-8c08c7bb5aee\"}", 
          "{\"id\": \"2d1f9a42-e43e-4bb7-858f-f59b86b9ba3d\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}", 
          "{\"id\": \"f8fb6566-e884-45e4-adcf-35f251cc1035\", \"months\": [0, 2, 4, 6, 8, 10]}", 
          "{\"id\": \"86f7e2d2-ea21-4bc9-b2bf-19127193121c\", \"months\": [0, 4, 8]}", 
          "{\"id\": \"4644a012-b500-4166-976b-f1a0c520bc7e\", \"months\": [0, 6]}", 
          "{\"id\": \"96f27e6f-dab2-4912-8416-995ee3cbdb99\"}"
        ], 
        "type": "Seq(Instance(Ticker))", 
        "name": "tickers", 
        "desc": "A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"2c9c9197-67f7-4c18-ba14-8389a9998bdb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 0, \"subscribed_events\": [], \"tags\": [], \"tickers\": [{\"id\": \"1a66269a-3bb7-43bf-9d8d-70ab55010d61\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"b078e6a9-9269-4774-8207-39e0284db1ca\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"af1009d3-452e-4417-a1b0-447788edcb47\", \"type\": \"AdaptiveTicker\"}, {\"id\": \"5b4e8227-77e2-424e-80e3-7e7fe0cc0f0e\", \"type\": \"DaysTicker\"}, {\"id\": \"9b1bd3cd-dc66-4dcc-a6ad-94554a0f60a5\", \"type\": \"DaysTicker\"}, {\"id\": \"185ba8c3-dc5c-4a81-9a70-3863b88c743e\", \"type\": \"DaysTicker\"}, {\"id\": \"8798f791-e277-42bf-8781-2688028d035b\", \"type\": \"DaysTicker\"}, {\"id\": \"bde2cfa5-255d-4dfa-8291-91589eca58e9\", \"type\": \"MonthsTicker\"}, {\"id\": \"2d932b05-5b16-4f94-a1fd-9c0151651d4a\", \"type\": \"MonthsTicker\"}, {\"id\": \"8591f414-619b-42eb-a6ad-390552a3a814\", \"type\": \"MonthsTicker\"}, {\"id\": \"69902b08-4fac-42c2-b366-50f04f9b7503\", \"type\": \"MonthsTicker\"}, {\"id\": \"05ab0d7c-e82c-4bd6-82d1-581796ad7159\", \"type\": \"YearsTicker\"}]}", 
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ], 
    "name": "DatetimeTicker", 
    "desc": "Generate nice ticks across different date and time scales."
  }, 
  "TileSource": {
    "props": [
      {
        "default": null, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"34478c7e-c7b8-40fb-94b2-ba983dceee88\", \"initial_resolution\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"x_origin_offset\": null, \"y_origin_offset\": null}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "TileSource", 
    "desc": "A base class for all tile source types.\n\n    In general, tile sources are used as a required input for ``TileRenderer``."
  }, 
  "Step": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the steps."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the steps."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the steps."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the steps."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the steps."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the steps."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates for the steps."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates for the steps."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the steps."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "before", 
        "type": "Enum('before', 'after', 'center')", 
        "name": "mode", 
        "desc": "Where the step \"level\" should be drawn in relation to the x and y\n    coordinates. The parameter can assume one of three values:\n\n    * ``before``: (default) Draw step levels before each x-coordinate (no step before the first point)\n    * ``after``:  Draw step levels after each x-coordinate (no step after the last point)\n    * ``center``: Draw step levels centered on each x-coordinate"
      }
    ], 
    "proto": "{\"id\": \"1220b810-b14e-4dad-8864-344e8cf5798e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"mode\": \"before\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Step", 
    "desc": "Render step lines.\n\n    Step levels can be draw before, after, or centered on each point, according\n    to the value of the ``mode`` property.\n\n    The x-coordinates are assumed to be (and must be) sorted in ascending order\n    for steps to be properly rendered.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Step.py\n        :source-position: below"
  }, 
  "YearsTicker": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "interval", 
        "desc": "The interval between adjacent ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"70135b69-05cb-4407-89dc-af2c2bd21a23\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ], 
    "name": "YearsTicker", 
    "desc": "Generate ticks spaced apart even numbers of years."
  }, 
  "RadioButtonGroup": {
    "props": [
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "active", 
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"active\": null, \"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"ca92da96-574a-4e8d-bc15-cbc3c9b51545\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ], 
    "name": "RadioButtonGroup", 
    "desc": "A group of radio boxes rendered as toggle buttons."
  }, 
  "HBar": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the horizontal bars."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the horizontal bars."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "right", 
        "desc": "The x-coordinates of the right edges."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the horizontal bars."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the horizontal bars."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the horizontal bars."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "height", 
        "desc": "The heights of the vertical bars."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the horizontal bars."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the horizontal bars."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the horizontal bars."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the centers of the horizontal bars."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the horizontal bars."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "left", 
        "desc": "The x-coordinates of the left edges."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"6b9d959d-98e2-49e7-841d-3575dd4578f1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": {\"value\": 0}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "HBar", 
    "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n    (``left``, ``right``) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/HBar.py\n        :source-position: below"
  }, 
  "MapPlot": {
    "props": [
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_width", 
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_bottom", 
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color for the plot background style."
      }, 
      {
        "default": 2000, 
        "type": "Int", 
        "name": "lod_threshold", 
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "v_symmetry", 
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger)."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_width", 
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'svg', 'webgl')", 
        "name": "output_backend", 
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_left", 
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_height", 
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "right", 
        "desc": "A list of renderers to occupy the area to the right of the plot."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "above", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "title_location", 
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toolbar_sticky", 
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc."
      }, 
      {
        "default": "{\"id\": \"be35626b-cd4b-4676-81ea-7a2fee6e197e\"}", 
        "type": "Instance(Scale)", 
        "name": "x_scale", 
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "outline_line_dash", 
        "desc": "The line dash for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_height", 
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "outline_line_dash_offset", 
        "desc": "The line dash offset for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"75620fb7-c474-4a3b-8fe4-1ab91489454e\", \"text\": \"\"}", 
        "type": "Instance(Title)", 
        "name": "title", 
        "desc": "A title for the plot. Can be a text string or a Title annotation."
      }, 
      {
        "default": 500, 
        "type": "Int", 
        "name": "lod_timeout", 
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled."
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "lod_factor", 
        "desc": "Decimation factor to use when applying level-of-detail decimation."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_fill_alpha", 
        "desc": "The fill alpha for the plot border style."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_x_ranges", 
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "hidpi", 
        "desc": "Whether to use HiDPI mode when available."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_width", 
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "aspect_scale", 
        "desc": "A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``."
      }, 
      {
        "default": 300, 
        "type": "Int", 
        "name": "lod_interval", 
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_width", 
        "desc": "The line width for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"a576167b-f3f7-4f48-b2b7-b5e43b78fdf0\"}", 
        "type": "Instance(Range)", 
        "name": "x_range", 
        "desc": "The (default) data range of the horizontal dimension of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "above", 
        "desc": "A list of renderers to occupy the area above of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "right", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "toolbar_location", 
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "match_aspect", 
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt the match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behaviour."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "#e5e5e5", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "outline_line_color", 
        "desc": "The line color for the plot border outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_height", 
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "outline_line_join", 
        "desc": "The line join for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_right", 
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "h_symmetry", 
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger)."
      }, 
      {
        "default": "{\"id\": \"288719c4-ef41-47a9-8102-190344caa716\"}", 
        "type": "Instance(Range)", 
        "name": "y_range", 
        "desc": "The (default) data range of the vertical dimension of the plot."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "min_border", 
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``."
      }, 
      {
        "default": "{\"id\": \"61f483a8-674d-40b2-ad52-865e170bf12e\"}", 
        "type": "Instance(Toolbar)", 
        "name": "toolbar", 
        "desc": "The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha for the plot background style."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_fill_color", 
        "desc": "The fill color for the plot border style."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_alpha", 
        "desc": "The line alpha for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"8ceebcc3-396b-491e-9f2a-079865de2a36\"}", 
        "type": "Instance(Scale)", 
        "name": "y_scale", 
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_y_ranges", 
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "below", 
        "desc": "A list of renderers to occupy the area below of the plot."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_top", 
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "outline_line_cap", 
        "desc": "The line cap for the plot border outline."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "left", 
        "desc": "A list of renderers to occupy the area to the left of the plot."
      }
    ], 
    "proto": "{\"above\": [], \"aspect_scale\": 1, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": [], \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"efb2d4c6-b7d2-4745-8671-1a70ea9b0899\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"match_aspect\": false, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"bevel\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"3dff52b2-0ffe-4e86-b921-878bf6035ff7\", \"type\": \"Title\"}, \"title_location\": \"above\", \"toolbar\": {\"id\": \"cfd3fcad-f0b7-4e24-a49a-6597b0656e0e\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": {\"id\": \"4a3b3637-acf1-48a3-b092-a69362e0a3c5\", \"type\": \"DataRange1d\"}, \"x_scale\": {\"id\": \"122902cc-755b-4f8e-a223-9c85cb088f32\", \"type\": \"LinearScale\"}, \"y_range\": {\"id\": \"daef9ece-ff5b-4a0c-b83f-34ed77b65f44\", \"type\": \"DataRange1d\"}, \"y_scale\": {\"id\": \"3c820ba3-a77a-4188-85c1-1c16746bb3ff\", \"type\": \"LinearScale\"}}", 
    "bases": [
      "bokeh.models.plots.Plot"
    ], 
    "name": "MapPlot", 
    "desc": "Abstract base class for map plot models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Annotation": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"3fbfa82e-f658-4fbc-b508-88a1415cd8d9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.renderers.Renderer"
    ], 
    "name": "Annotation", 
    "desc": "Base class for all annotation models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Rect": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the rectangles."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the rectangles."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the rectangles."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "height", 
        "desc": "The overall heights of the rectangles."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the rectangles."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the rectangles."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the rectangles."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the rectangles."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the rectangles."
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the rectangles, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "dilate", 
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the rectangles bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    rectangles to have a gap between them, when they should appear\n    flush."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the rectangles."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "height_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "width", 
        "desc": "The overall widths of the rectangles."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the centers of the rectangles."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the centers of the rectangles."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "width_units", 
        "desc": ""
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"dilate\": false, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"45ff2877-f183-4503-bea8-3eb12c74e2ea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Rect", 
    "desc": "Render rectangles.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Rect.py\n        :source-position: below"
  }, 
  "CircleCross": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"9645024e-8c0c-4137-a262-2f193e6ffbff\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "CircleCross", 
    "desc": "Render circle markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/CircleCross.py\n        :source-position: below"
  }, 
  "Slider": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "tooltips", 
        "desc": ""
      }, 
      {
        "default": 200, 
        "type": "Float", 
        "name": "callback_throttle", 
        "desc": "Number of millseconds to pause between callback calls as the slider is moved."
      }, 
      {
        "default": "ltr", 
        "type": "Enum('ltr', 'rtl')", 
        "name": "direction", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_value", 
        "desc": "Whether or not show slider's value."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Orient the slider either horizontally (default) or vertically."
      }, 
      {
        "default": "0[.]00", 
        "type": "String", 
        "name": "format", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "throttle", 
        "type": "Enum('continuous', 'throttle', 'mouseup')", 
        "name": "callback_policy", 
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "step", 
        "desc": "The step between consecutive values."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Slider value changes."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "end", 
        "desc": "The maximum allowable value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Slider's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "#e6e6e6", 
        "type": "Color", 
        "name": "bar_color", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "value", 
        "desc": "Initial or selected value."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "start", 
        "desc": "The minimum allowable value."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }
    ], 
    "proto": "{\"bar_color\": \"#e6e6e6\", \"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": [], \"direction\": \"ltr\", \"disabled\": false, \"end\": null, \"format\": \"0[.]00\", \"height\": null, \"id\": \"7c0b389b-0488-45ed-ac14-d25aa4c12132\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"show_value\": true, \"sizing_mode\": \"fixed\", \"start\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"tooltips\": true, \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ], 
    "name": "Slider", 
    "desc": "Slider-based number selection widget."
  }, 
  "IntersectRenderers": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"375e9529-8819-46a1-9922-229a57d2b236\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ], 
    "name": "IntersectRenderers", 
    "desc": "When a data source is shared between multiple renderers, a row in the data\n    source will only be selected if that point for each renderer is selected. The\n    selection is made from the intersection of hit test results from all renderers."
  }, 
  "BasicTicker": {
    "props": [
      {
        "default": 0.0, 
        "type": "Float", 
        "name": "min_interval", 
        "desc": "The smallest allowable interval between two adjacent ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "max_interval", 
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``."
      }, 
      {
        "default": 10.0, 
        "type": "Float", 
        "name": "base", 
        "desc": "The multiplier to use for scaling mantissas."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [
          1, 
          2, 
          5
        ], 
        "type": "Seq(Float)", 
        "name": "mantissas", 
        "desc": "The acceptable list numbers to generate multiples of."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"79c7e1a1-3381-44d0-8b3c-6cfffc82d5af\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ], 
    "name": "BasicTicker", 
    "desc": "Generate ticks on a linear scale.\n\n    .. note::\n        This class may be renamed to ``LinearTicker`` in the future."
  }, 
  "UnionRenderers": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"178859aa-c6ad-4bca-9976-bf0e3239f896\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ], 
    "name": "UnionRenderers", 
    "desc": "When a data source is shared between multiple renderers, selecting a point on\n    from any renderer will cause that row in the data source to be selected. The\n    selection is made from the union of hit test results from all renderers."
  }, 
  "AutocompleteInput": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "completions", 
        "desc": "A list of completion strings. This will be used to guide the\n    user upon typing the beginning of a desired value."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "value", 
        "desc": "Initial or entered text value."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "placeholder", 
        "desc": "Placeholder for empty input field"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"completions\": [], \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"5718a64c-71c9-4c57-a33e-cb5e84dff2ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ], 
    "name": "AutocompleteInput", 
    "desc": "Single-line input widget with auto-completion."
  }, 
  "Patch": {
    "props": [
      {
        "default": "black", 
        "type": "Color", 
        "name": "line_color", 
        "desc": "The line color values for the patch."
      }, 
      {
        "default": 1.0, 
        "type": "Percent", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the patch."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "fill_color", 
        "desc": "The fill color values for the patch."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "line_width", 
        "desc": "The line width values for the patch."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "Percent", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the patch."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the patch."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the patch."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the patch."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        y-coordinates for each polygon should be separated by NaN\n        values in the sequence."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        x-coordinates for each polygon should be separated by NaN\n        values in the sequence."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the patch."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"fill_alpha\": 1.0, \"fill_color\": \"gray\", \"id\": \"7ef430b7-325c-4f6b-92c0-13dc687896ad\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_cap\": \"butt\", \"line_color\": \"black\", \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": 1, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Patch", 
    "desc": "Render a single patch.\n\n    The ``Patch`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Patch.py\n        :source-position: below"
  }, 
  "NumberEditor": {
    "props": [
      {
        "default": 0.01, 
        "type": "Float", 
        "name": "step", 
        "desc": "The major step value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"abc3803b-f134-4ebe-84d7-f609ca6630ac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 0.01, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "NumberEditor", 
    "desc": "Spinner-based number cell editor."
  }, 
  "Paragraph": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "style", 
        "desc": "Raw CSS style declaration. Note this may be web browser dependent."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "text", 
        "desc": "The contents of the widget."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"5b1758d9-9916-4262-a87f-15bc031afb89\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"style\": {}, \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ], 
    "name": "Paragraph", 
    "desc": "A block (paragraph) of text.\n\n    This Bokeh model corresponds to an HTML ``<p>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n        :source-position: below"
  }, 
  "TextEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"8879af69-c0ee-4249-bf4c-ddbcd64e500d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "TextEditor", 
    "desc": "Multi-line string cell editor."
  }, 
  "BoxEditTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the box drawing is to be free in. By default,\n    users may freely draw boxes with any dimensions. If only \"width\"\n    is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be\n    constrained to span the entire horizontal space of the plot, and\n    the vertical dimension can be controlled."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_objects", 
        "desc": "Defines a limit on the number of boxes that can be drawn. By\n    default there is no limit on the number of objects, but if enabled\n    the oldest drawn box will be dropped to make space for the new box\n    being added."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"custom_icon\": null, \"custom_tooltip\": null, \"dimensions\": \"both\", \"empty_value\": null, \"id\": \"9c901fe5-bc74-4e0a-be33-b79d2cd6b47d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_objects\": 0, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.EditTool", 
      "bokeh.models.tools.Drag", 
      "bokeh.models.tools.Tap"
    ], 
    "name": "BoxEditTool", 
    "desc": "*toolbar icon*: |box_edit_icon|\n\n    The BoxEditTool allows drawing, dragging and deleting ``Rect``\n    glyphs on one or more renderers by editing the underlying\n    ``ColumnDataSource`` data. Like other drawing tools, the renderers\n    that are to be edited must be supplied explicitly as a list. When\n    drawing a new box the data will always be added to the\n    ``ColumnDataSource`` on the first supplied renderer.\n\n    The tool will automatically modify the columns on the data source\n    corresponding to the ``x``, ``y``, ``width`` and ``height`` values\n    of the glyph. Any additional columns in the data source will be\n    padded with the declared ``empty_value``, when adding a new box.\n\n    The supported actions include:\n\n    * Add box: Hold shift then click and drag anywhere on the plot or\n      double tap once to start drawing, move the mouse and double tap\n      again to finish drawing.\n\n    * Move box: Click and drag an existing box, the box will be\n      dropped once you let go of the mouse button.\n\n    * Delete box: Tap a box to select it then press <<backspace>> key\n      while the mouse is within the plot area.\n\n    To **Move** or **Delete** multiple boxes at once:\n\n    * Move selection: Select box(es) with <<shift>>+tap (or another\n      selection tool) then drag anywhere on the plot. Selecting and\n      then dragging on a specific box will move both.\n\n    * Delete selection: Select box(es) with <<shift>>+tap (or another\n      selection tool) then press <<backspace>> while the mouse is\n      within the plot area.\n\n    .. |box_edit_icon| image:: /_images/icons/BoxEdit.png\n        :height: 18pt"
  }, 
  "Arrow": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arrow body."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x_start", 
        "desc": "The x-coordinates to locate the start of the arrows."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arrow body."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "end_units", 
        "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\n    space\" units by default."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arrow body."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arrow body."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arrow body."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arrow body."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arrow body."
      }, 
      {
        "default": "{\"id\": \"6211e0ed-4096-4bd8-ba5b-ae9899deec4f\"}", 
        "type": "Instance(ArrowHead)", 
        "name": "end", 
        "desc": "Instance of ArrowHead."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "Local data source to use when rendering annotations on the plot."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x_end", 
        "desc": "The x-coordinates to locate the end of the arrows."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y_end", 
        "desc": "The y-coordinates to locate the end of the arrows."
      }, 
      {
        "default": null, 
        "type": "Instance(ArrowHead)", 
        "name": "start", 
        "desc": "Instance of ArrowHead."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y_start", 
        "desc": "The y-coordinates to locate the start of the arrows."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "start_units", 
        "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\n    space\" units by default."
      }
    ], 
    "proto": "{\"end\": {\"id\": \"24a67431-1391-4656-ab94-d75b7fe228b0\", \"type\": \"OpenHead\"}, \"end_units\": \"data\", \"id\": \"2a61ee46-b795-4f4e-a1f7-bb0cfbc49335\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"source\": null, \"start\": null, \"start_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_end\": null, \"x_range_name\": \"default\", \"x_start\": null, \"y_end\": null, \"y_range_name\": \"default\", \"y_start\": null}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Arrow", 
    "desc": "Render an arrow as an annotation."
  }, 
  "Quad": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the quads."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the quads."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "right", 
        "desc": "The x-coordinates of the right edges."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the quads."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "bottom", 
        "desc": "The y-coordinates of the bottom edges."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "top", 
        "desc": "The y-coordinates of the top edges."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the quads."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the quads."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the quads."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the quads."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the quads."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the quads."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "left", 
        "desc": "The x-coordinates of the left edges."
      }
    ], 
    "proto": "{\"bottom\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"82dfba9a-6e42-455f-ae38-bc16f0ef9c08\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"right\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "Quad", 
    "desc": "Render axis-aligned quads.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Quad.py\n        :source-position: below"
  }, 
  "PasswordInput": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "value", 
        "desc": "Initial or entered text value."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "placeholder", 
        "desc": "Placeholder for empty input field"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"377970fe-81ee-4aec-a9ea-a6be38c494d1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ], 
    "name": "PasswordInput", 
    "desc": "Single-line password input widget.\n        Note: Despite PasswordInput inheriting from TextInput the password\n        cannot be inspected on the field ``value``. Also, note that this field\n        functionally just hides the input on the browser, transmiting safely a\n        password as a callback, e.g., to the a bokeh server would require\n        some secure connection."
  }, 
  "ColorMapper": {
    "props": [
      {
        "default": null, 
        "type": "Seq(Color)", 
        "name": "palette", 
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "nan_color", 
        "desc": "Color to be used if data is NaN or otherwise not mappable. (Default: 'gray')"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"2922f17f-a5ec-4db0-90f0-d22dd9a34c57\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.Mapper"
    ], 
    "name": "ColorMapper", 
    "desc": "Base class for color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Div": {
    "props": [
      {
        "default": false, 
        "type": "Bool", 
        "name": "render_as_text", 
        "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\n    The default value is ``False``, meaning contents are rendered as HTML."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "style", 
        "desc": "Raw CSS style declaration. Note this may be web browser dependent."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "text", 
        "desc": "The contents of the widget."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"1c9b9207-6383-492d-8895-e6b16e1c65da\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"render_as_text\": false, \"sizing_mode\": \"fixed\", \"style\": {}, \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ], 
    "name": "Div", 
    "desc": "A block (div) of text.\n\n    This Bokeh model corresponds to an HTML ``<div>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_div.py\n        :source-position: below"
  }, 
  "StaticLayoutProvider": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(Either(String, Int), Seq(Any))", 
        "name": "graph_layout", 
        "desc": "The coordinates of the graph nodes in cartesian space. The dictionary\n    keys correspond to a node index and the values are a two element sequence\n    containing the x and y coordinates of the node.\n\n    .. code-block:: python\n\n        {\n            0 : [0.5, 0.5],\n            1 : [1.0, 0.86],\n            2 : [0.86, 1],\n        }"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"graph_layout\": {}, \"id\": \"2f10231e-7dfe-45b1-a10f-4a51d635d085\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.graphs.LayoutProvider"
    ], 
    "name": "StaticLayoutProvider", 
    "desc": ""
  }, 
  "RedoTool": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"5fc25d01-d739-45ed-9111-9c7814524369\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "RedoTool", 
    "desc": "*toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 18pt"
  }, 
  "CustomAction": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A Bokeh callback to execute when the custom action icon is activated."
      }, 
      {
        "default": "Perform a Custom Action", 
        "type": "String", 
        "name": "action_tooltip", 
        "desc": "Tooltip displayed when hovering over the custom action icon."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }
    ], 
    "proto": "{\"action_tooltip\": \"Perform a Custom Action\", \"callback\": null, \"icon\": null, \"id\": \"e292e677-0ea2-46d9-bc52-88d7d9fc5a6a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "CustomAction", 
    "desc": "Execute a custom action, e.g. ``CustomJS`` callback when a toolbar\n    icon is activated.\n\n    Example:\n\n        .. code-block:: python\n\n            tool = CustomAction(icon=\"icon.png\",\n                                callback=CustomJS(code='alert(\"foo\")'))\n\n            plot.add_tools(tool)"
  }, 
  "TickFormatter": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"6baa4f0a-8b4d-41ed-a350-40053adfd8dd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "TickFormatter", 
    "desc": "A base class for all tick formatter types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "CellFormatter": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"2a9a5b87-3cae-4a04-b4b7-fa708e9eecf8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "CellFormatter", 
    "desc": "Abstract base class for data table's cell formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "LinearAxis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"c7be4100-c61d-4f23-9a13-a118db30be6a\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": "{\"id\": \"baa027fb-e315-46f2-a28e-ffd1fa1cf98b\"}", 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": {\"id\": \"7b88fafe-f22b-49db-85f3-e162e39c8e77\", \"type\": \"BasicTickFormatter\"}, \"id\": \"b83f205f-7d77-4ed1-9cfb-d31a4815aaac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"68e14ba5-e60a-4649-9ac8-b7dea8a0b722\", \"type\": \"BasicTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ], 
    "name": "LinearAxis", 
    "desc": "An axis that picks nice numbers for tick locations on a\n    linear scale. Configured with a ``BasicTickFormatter`` by default."
  }, 
  "OpenHead": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arrow head outline."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arrow head outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arrow head outline."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arrow head outline."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 25, 
        "type": "Float", 
        "name": "size", 
        "desc": "The size, in pixels, of the arrow head."
      }
    ], 
    "proto": "{\"id\": \"c1de6943-c24f-4f88-87aa-2af8cecbb826\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ], 
    "name": "OpenHead", 
    "desc": "Render an open-body arrow head."
  }, 
  "MonthsTicker": {
    "props": [
      {
        "default": null, 
        "type": "Float", 
        "name": "interval", 
        "desc": "The interval between adjacent ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "Seq(Int)", 
        "name": "months", 
        "desc": "The intervals of months to use."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"2fd14027-da33-43c2-9637-deb515376480\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"months\": [], \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ], 
    "name": "MonthsTicker", 
    "desc": "Generate ticks spaced apart by specific, even multiples of months."
  }, 
  "Ticker": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"4c02a531-013c-41d1-97b1-b515b0bb55a9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Ticker", 
    "desc": "A base class for all ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "LogTicker": {
    "props": [
      {
        "default": 0.0, 
        "type": "Float", 
        "name": "min_interval", 
        "desc": "The smallest allowable interval between two adjacent ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "max_interval", 
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``."
      }, 
      {
        "default": 10.0, 
        "type": "Float", 
        "name": "base", 
        "desc": "The multiplier to use for scaling mantissas."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [
          1, 
          5
        ], 
        "type": "Seq(Float)", 
        "name": "mantissas", 
        "desc": "The acceptable list numbers to generate multiples of."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"4b3ef0f7-4c03-48ea-aa29-44c2b3714cb8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ], 
    "name": "LogTicker", 
    "desc": "Generate ticks on a log scale."
  }, 
  "SaveTool": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"c081a6f4-6e45-4b2e-8c6f-95194d160d30\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "SaveTool", 
    "desc": "*toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 18pt"
  }, 
  "BoxAnnotation": {
    "props": [
      {
        "default": "#cccccc", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the box."
      }, 
      {
        "default": null, 
        "type": "Either(Auto, NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))", 
        "name": "right", 
        "desc": "The x-coordinates of the right edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }, 
      {
        "default": "#fff9ba", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the box."
      }, 
      {
        "default": 0.3, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the box."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "top_units", 
        "desc": "The unit type for the top attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the box."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the box."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the box."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the box."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "bottom_units", 
        "desc": "The unit type for the bottom attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering box annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the box."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the box is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\""
      }, 
      {
        "default": null, 
        "type": "Either(Auto, NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))", 
        "name": "bottom", 
        "desc": "The y-coordinates of the bottom edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }, 
      {
        "default": null, 
        "type": "Either(Auto, NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))", 
        "name": "top", 
        "desc": "The y-coordinates of the top edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": 0.4, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the box."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "left_units", 
        "desc": "The unit type for the left attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "right_units", 
        "desc": "The unit type for the right attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": null, 
        "type": "Either(Auto, NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))", 
        "name": "left", 
        "desc": "The x-coordinates of the left edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }
    ], 
    "proto": "{\"bottom\": null, \"bottom_units\": \"data\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"6dfd565f-098c-4887-b9ac-b983ab94425a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": null, \"left_units\": \"data\", \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"right\": null, \"right_units\": \"data\", \"subscribed_events\": [], \"tags\": [], \"top\": null, \"top_units\": \"data\", \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "BoxAnnotation", 
    "desc": "Render a shaded rectangular region as an annotation."
  }, 
  "CategoricalMarkerMapper": {
    "props": [
      {
        "default": "circle", 
        "type": "MarkerType('asterisk', 'circle', 'circle_cross', 'circle_x', 'cross', 'dash', 'diamond', 'diamond_cross', 'hex', 'inverted_triangle', 'square', 'square_cross', 'square_x', 'triangle', 'x')", 
        "name": "default_value", 
        "desc": "A marker type to use in case an unrecognized factor is passed in to be\n    mapped."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "end", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String)))", 
        "name": "factors", 
        "desc": "A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Seq(MarkerType('asterisk', 'circle', 'circle_cross', 'circle_x', 'cross', 'dash', 'diamond', 'diamond_cross', 'hex', 'inverted_triangle', 'square', 'square_cross', 'square_x', 'triangle', 'x'))", 
        "name": "markers", 
        "desc": "A sequence of marker types to use as the target for mapping."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "start", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"default_value\": \"circle\", \"end\": null, \"factors\": null, \"id\": \"ab8d4c54-4adb-4275-99d7-4ef579956a31\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"markers\": null, \"name\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.CategoricalMapper"
    ], 
    "name": "CategoricalMarkerMapper", 
    "desc": "Map categorical factors to marker types.\n\n    Values that are passed to this mapper that are not in the factors list\n    will be mapped to ``default_value``.\n\n    .. note::\n        This mappers is primarily only useful with the ``Scatter`` marker\n        glyph that be parameterized by marker type."
  }, 
  "Arc": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arcs."
      }, 
      {
        "default": "anticlock", 
        "type": "Enum('clock', 'anticlock')", 
        "name": "direction", 
        "desc": "Which direction to stroke between the start and end angles."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arcs."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "start_angle_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "radius", 
        "desc": "Radius of the arc."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "radius_units", 
        "desc": ""
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arcs."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arcs."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arcs."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arcs."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "start_angle", 
        "desc": "The angles to start the arcs, as measured from the horizontal."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "end_angle", 
        "desc": "The angles to end the arcs, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the center of the arcs."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the center of the arcs."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "end_angle_units", 
        "desc": ""
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arcs."
      }
    ], 
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"id\": \"d13f7aa3-d9cc-41c3-b0bc-7c0e29359dbd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Arc", 
    "desc": "Render arcs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Arc.py\n        :source-position: below"
  }, 
  "CustomJSTransform": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, AnyRef)", 
        "name": "args", 
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the transform' code snippet as the values of\n    named parameters to the callback."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "v_func", 
        "desc": "A snippet of JavaScript code to transform an array of values. The variable\n    ``xs`` will contain the untransformed array and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            v_func = '''\n            var new_xs = new Array(xs.length)\n            for(var i = 0; i < xs.length; i++) {\n                new_xs[i] = xs[i] + 0.5\n            }\n            return new_xs\n            '''\n\n    .. warning::\n        The vectorized function, ``v_func``, must return an array of the\n        same length as the input ``xs`` array."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "func", 
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n    ``x`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            func = '''\n            return Math.floor(x) + 0.5\n            '''"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "use_strict", 
        "desc": "Enables or disables automatic insertion of ``\"use strict\";`` into ``func`` or ``v_func``."
      }
    ], 
    "proto": "{\"args\": {}, \"func\": \"\", \"id\": \"3575ad8b-5239-4e03-82dc-98d18bbac376\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"use_strict\": false, \"v_func\": \"\"}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "CustomJSTransform", 
    "desc": "Apply a custom defined transform to data.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh."
  }, 
  "HelpTool": {
    "props": [
      {
        "default": "https://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools", 
        "type": "String", 
        "name": "redirect", 
        "desc": "Site to be redirected through upon click."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "Click the question mark to learn more about Bokeh plot tools.", 
        "type": "String", 
        "name": "help_tooltip", 
        "desc": "Tooltip displayed when hovering over the help icon."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"help_tooltip\": \"Click the question mark to learn more about Bokeh plot tools.\", \"id\": \"71f92c76-862f-4686-8ec3-84da9e3ba36b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"redirect\": \"https://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools\", \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "HelpTool", 
    "desc": "A button tool to provide a \"help\" link to users.\n\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well."
  }, 
  "Panel": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "An optional text title of the panel."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": null, 
        "type": "Instance(LayoutDOM)", 
        "name": "child", 
        "desc": "The child widget. If you need more children, use a layout widget,\n    e.g. ``Row`` or ``Column``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "closable", 
        "desc": "Whether this panel is closeable or not. If True, an \"x\" button will\n    appear."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"child\": null, \"closable\": false, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"afe19ee0-df0c-4a5f-9422-663894bedaa6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "Panel", 
    "desc": "A single-widget container with title bar and controls."
  }, 
  "Select": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "value", 
        "desc": "Initial or selected value."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Select dropdown\n    value changes."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "Either(List(Either(String, Tuple(Either(Int, String), String))), Dict(String, List(Either(String, Tuple(Either(Int, String), String)))))", 
        "name": "options", 
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label. Option groupings can be provided\n    by supplying a dictionary object whose values are in the aforementioned\n    list format"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"2f906adb-ba3c-4179-bf37-49eebeb83bdd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ], 
    "name": "Select", 
    "desc": "Single-select widget."
  }, 
  "Glyph": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"0b86c33d-6f2b-4632-bb92-c340eb1b34ca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Glyph", 
    "desc": "Base class for all glyph models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "IndexFilter": {
    "props": [
      {
        "default": null, 
        "type": "Either(Seq(Int), Seq(Bool))", 
        "name": "filter", 
        "desc": "A list that can be either integer indices or booleans representing a row-wise subset of data."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Seq(Int)", 
        "name": "indices", 
        "desc": "A list of integer indices representing the subset of data to select."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"filter\": null, \"id\": \"a5c0ca93-b47d-42c5-b79f-3cacfe8d4e9c\", \"indices\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.filters.Filter"
    ], 
    "name": "IndexFilter", 
    "desc": "An IndexFilter filters data by returning the subset of data at a given set of indices."
  }, 
  "LinearInterpolator": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "clip", 
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "y", 
        "desc": "Dependant coordinate denoting the value of a point at a location."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "x", 
        "desc": "Independant coordiante denoting the location of a point."
      }, 
      {
        "default": null, 
        "type": "Instance(ColumnarDataSource)", 
        "name": "data", 
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters."
      }
    ], 
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"0bcff4ba-fdbe-4cd8-8c3b-f5b6cdd53b99\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ], 
    "name": "LinearInterpolator", 
    "desc": "Compute a linear interpolation between the control points provided through\n    the ``x``, ``y``, and ``data`` parameters."
  }, 
  "CategoricalTickFormatter": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"38a46752-a148-4091-9420-00ec056c87af\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "CategoricalTickFormatter", 
    "desc": "Display tick values from categorical ranges as string\n    values."
  }, 
  "ProxyToolbar": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'grey')", 
        "name": "logo", 
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Tool))", 
        "name": "tools", 
        "desc": "A list of tools to add to the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"b94208d1-9294-4219-ad0a-fa113e204b70\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": []}", 
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ], 
    "name": "ProxyToolbar", 
    "desc": "A toolbar that allow to merge and proxy tools of toolbars in multiple plots."
  }, 
  "Mapper": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"07bf4687-4b9a-475f-8d1a-35db218af044\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "Mapper", 
    "desc": "Base class for mappers.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "HexTile": {
    "props": [
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the horizontal bars."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the horizontal bars."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "scale", 
        "desc": "A scale factor for individual tiles."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the horizontal bars."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the horizontal bars."
      }, 
      {
        "default": "pointytop", 
        "type": "String", 
        "name": "orientation", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the horizontal bars."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "q", 
        "desc": "The \"column\" axial coordinates of the tile centers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "r", 
        "desc": "The \"row\" axial coordinates of the tile centers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the horizontal bars."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the horizontal bars."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the horizontal bars."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "aspect_scale", 
        "desc": ""
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the horizontal bars."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "size", 
        "desc": "The radius (in data space units) of the hex tiling.\n\n    The radius is always measured along the cartesian y-axis for \"pointy_top\"\n    orientation, and along the cartesian x-axis for \"flat_top\" orientation. If\n    the aspect ratio of the underlying cartesian system is not 1-1, then the\n    tiles may be \"squished\" in one direction. To ensure that the tiles are\n    always regular hexagons, consider setting the ``match_aspect`` property of\n    the plot to True."
      }
    ], 
    "proto": "{\"aspect_scale\": 1.0, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"85ca78a7-172a-4fb5-9d78-5b3eb47f8eab\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": null}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"orientation\": \"pointytop\", \"q\": null, \"r\": null, \"scale\": {\"value\": 1.0}, \"size\": 1.0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "HexTile", 
    "desc": "Render horizontal tiles on a regular hexagonal grid.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/HexTile.py\n        :source-position: below"
  }, 
  "Jitter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "width", 
        "desc": "The width (absolute for uniform distribution and sigma for the normal\n    distribution) of the random sample."
      }, 
      {
        "default": null, 
        "type": "Instance(Range)", 
        "name": "range", 
        "desc": "When applying Jitter to Categorical data values, the corresponding\n    ``FactorRange`` must be supplied as the ``range`` property."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "uniform", 
        "type": "Enum('uniform', 'normal')", 
        "name": "distribution", 
        "desc": "The random distribution upon which to pull the random scatter"
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "mean", 
        "desc": "The central value for the random sample"
      }
    ], 
    "proto": "{\"distribution\": \"uniform\", \"id\": \"04abf311-615d-4404-ad0a-5f14444aab04\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mean\": 0, \"name\": null, \"range\": null, \"subscribed_events\": [], \"tags\": [], \"width\": 1}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "Jitter", 
    "desc": "Apply either a uniform or normally sampled random jitter to data."
  }, 
  "CircleX": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"247a9548-fafb-4489-9591-325c8a2db18d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "CircleX", 
    "desc": "Render circle markers with an 'X' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/CircleX.py\n        :source-position: below"
  }, 
  "NumberFormatter": {
    "props": [
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "font_style", 
        "desc": "An optional text font style, e.g. bold, italic."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "en", 
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')", 
        "name": "language", 
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator)."
      }, 
      {
        "default": "0,0", 
        "type": "String", 
        "name": "format", 
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html"
      }, 
      {
        "default": "round", 
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')", 
        "name": "rounding", 
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "text_align", 
        "desc": "An optional text align, i.e. left, center or right."
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "text_color", 
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"font_style\": \"normal\", \"format\": \"0,0\", \"id\": \"4fa41ad9-0a04-4b5d-9345-ebcb26f8aa05\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}", 
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ], 
    "name": "NumberFormatter", 
    "desc": "Number cell formatter."
  }, 
  "Label": {
    "props": [
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color values for the text bounding box."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_line_color", 
        "desc": "The line color values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "text", 
        "desc": "The text value to render."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "border_line_join", 
        "desc": "The line join values for the text bounding box."
      }, 
      {
        "default": {
          "value": "12pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "text_font_size", 
        "desc": "The text font size values for the text."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "text_color", 
        "desc": "The text color values for the text."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "text_baseline", 
        "desc": "The text baseline values for the text."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "border_line_dash_offset", 
        "desc": "The line dash offset values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "border_line_dash", 
        "desc": "The line dash values for the text bounding box."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default y-range."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "text_line_height", 
        "desc": "The text line height values for the text."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "y_units", 
        "desc": "The unit type for the y attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "text_font_style", 
        "desc": "The text font style values for the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_alpha", 
        "desc": "The line alpha values for the text bounding box."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha values for the text bounding box."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": 0, 
        "type": "Angle", 
        "name": "angle", 
        "desc": "The angle to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "border_line_cap", 
        "desc": "The line cap values for the text bounding box."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "text_align", 
        "desc": "The text align values for the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "text_alpha", 
        "desc": "The text alpha values for the text."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "x_units", 
        "desc": "The unit type for the x attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "text_font", 
        "desc": "The text font values for the text."
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "x_offset", 
        "desc": "Offset value to apply to the x-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen location when\n    rendering an annotation on the plot. If unset, use the default x-range."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "y", 
        "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "x", 
        "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_width", 
        "desc": "The line width values for the text bounding box."
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "y_offset", 
        "desc": "Offset value to apply to the y-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }
    ], 
    "proto": "{\"angle\": 0, \"angle_units\": \"rad\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"bevel\", \"border_line_width\": {\"value\": 1}, \"id\": \"3f3d535e-6b70-4108-94e2-bde6f7967888\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"text_line_height\": 1.2, \"visible\": true, \"x\": null, \"x_offset\": 0, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": 0, \"y_range_name\": \"default\", \"y_units\": \"data\"}", 
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ], 
    "name": "Label", 
    "desc": "Render a single text label as an annotation.\n\n    ``Label`` will render a single text label at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\n    Additionally, the label can be rotated with the ``angle`` property.\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border."
  }, 
  "EditTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"custom_icon\": null, \"custom_tooltip\": null, \"empty_value\": null, \"id\": \"0db90629-8db1-4a1b-9de0-3db55e0b20f2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Gesture"
    ], 
    "name": "EditTool", 
    "desc": "A base class for all interactive draw tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "DatetimeTickFormatter": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [
          "%Ss"
        ], 
        "type": "List(String)", 
        "name": "seconds", 
        "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%m/%Y", 
          "%b %Y"
        ], 
        "type": "List(String)", 
        "name": "months", 
        "desc": "Formats for displaying datetime values in the ``months`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          ":%M:%S"
        ], 
        "type": "List(String)", 
        "name": "minsec", 
        "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%m/%d", 
          "%a%d"
        ], 
        "type": "List(String)", 
        "name": "days", 
        "desc": "Formats for displaying datetime values in the ``days`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%Hh", 
          "%H:%M"
        ], 
        "type": "List(String)", 
        "name": "hours", 
        "desc": "Formats for displaying datetime values in the ``hours`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%H:%M"
        ], 
        "type": "List(String)", 
        "name": "hourmin", 
        "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%fus"
        ], 
        "type": "List(String)", 
        "name": "microseconds", 
        "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [
          "%Y"
        ], 
        "type": "List(String)", 
        "name": "years", 
        "desc": "Formats for displaying datetime values in the ``years`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          ":%M", 
          "%Mm"
        ], 
        "type": "List(String)", 
        "name": "minutes", 
        "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }, 
      {
        "default": [
          "%3Nms", 
          "%S.%3Ns"
        ], 
        "type": "List(String)", 
        "name": "milliseconds", 
        "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats."
      }
    ], 
    "proto": "{\"days\": [\"%m/%d\", \"%a%d\"], \"hourmin\": [\"%H:%M\"], \"hours\": [\"%Hh\", \"%H:%M\"], \"id\": \"ebb8aab6-f148-44ed-8c6a-80639914865b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"microseconds\": [\"%fus\"], \"milliseconds\": [\"%3Nms\", \"%S.%3Ns\"], \"minsec\": [\":%M:%S\"], \"minutes\": [\":%M\", \"%Mm\"], \"months\": [\"%m/%Y\", \"%b %Y\"], \"name\": null, \"seconds\": [\"%Ss\"], \"subscribed_events\": [], \"tags\": [], \"years\": [\"%Y\"]}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "DatetimeTickFormatter", 
    "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\n    range of scales.\n\n    ``DatetimeTickFormatter`` has the following properties (listed together\n    with their default values) that can be used to control the formatting\n    of axis ticks at different scales scales:\n\n    .. code-block:: python\n\n        microseconds = ['%fus']\n\n        milliseconds = ['%3Nms', '%S.%3Ns']\n\n        seconds = ['%Ss']\n\n        minsec = [':%M:%S']\n\n        minutes = [':%M', '%Mm']\n\n        hourmin = ['%H:%M']\n\n        hours = ['%Hh', '%H:%M']\n\n        days = ['%m/%d', '%a%d']\n\n        months = ['%m/%Y', '%b %Y']\n\n        years = ['%Y']\n\n    Each scale property can be set to format or list of formats to use for\n    formatting datetime tick values that fall in in that \"time scale\".\n    By default, only the first format string passed for each time scale\n    will be used. By default, all leading zeros are stripped away from\n    the formatted labels.\n\n    This list of supported `strftime`_ formats is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues"
  }, 
  "ZoomOutTool": {
    "props": [
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the zoom-out tool is constrained to act in. By\n    default the zoom-out tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0.1, 
        "type": "Percent", 
        "name": "factor", 
        "desc": "Percentage to zoom for each click of the zoom-in tool."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"315e56cc-3bd1-487a-9510-43570a3f9e3a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "ZoomOutTool", 
    "desc": "*toolbar icon*: |zoom_out_icon|\n\n    The zoom-out tool allows users to click a button to zoom out\n    by a fixed amount.\n\n    .. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n        :height: 18pt"
  }, 
  "X": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"69c69875-da70-42f1-92e9-b59f240d4b64\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "X", 
    "desc": "Render a 'X' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/X.py\n        :source-position: below"
  }, 
  "MultiLine": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the lines."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the lines."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the lines."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the lines."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the lines."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the lines."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "xs", 
        "desc": "The x-coordinates for all the lines, given as a \"list of lists\"."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "ys", 
        "desc": "The y-coordinates for all the lines, given as a \"list of lists\"."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the lines."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"37ed0b36-febd-4607-a1d8-d369ba82d515\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"xs\": null, \"ys\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "MultiLine", 
    "desc": "Render several lines.\n\n    The data for the ``MultiLine`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/MultiLine.py\n        :source-position: below"
  }, 
  "Circle": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "radius", 
        "desc": "The radius values for circle markers (in \"data space\" units, by default).\n\n    .. note::\n        Circle markers are slightly unusual in that they support specifying\n        a radius in addition to a size. Only one of ``radius`` or ``size``\n        should be given.\n\n    .. warning::\n        Note that ``Circle`` glyphs are always drawn as circles on the screen,\n        even in cases where the data space aspect ratio is not 1-1. In all\n        cases where radius values are specified, the \"distance\" for the radius\n        is measured along the dimension specified by ``radius_dimension``. If\n        the aspect ratio is very large or small, the drawn circles may appear\n        much larger or smaller than expected. See :bokeh-issue:`626` for more\n        information."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "radius_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": "x", 
        "type": "Enum('x', 'y')", 
        "name": "radius_dimension", 
        "desc": "What dimension to measure circle radii along.\n\n    When the data space aspect ratio is not 1-1, then the size of the drawn\n    circles depends on what direction is used to measure the \"distance\" of\n    the radius. This property allows that direction to be controlled."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"d5a26857-b958-4c31-a8f9-1478b018421d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"radius_dimension\": \"x\", \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Circle", 
    "desc": "Render circle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Circle.py\n        :source-position: below"
  }, 
  "MercatorTickFormatter": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "use_scientific", 
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "power_limit_high", 
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Int)", 
        "name": "precision", 
        "desc": "How many digits of precision to display in tick labels."
      }, 
      {
        "default": -3, 
        "type": "Int", 
        "name": "power_limit_low", 
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Enum('lat', 'lon')", 
        "name": "dimension", 
        "desc": "Specify whether to format ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick labels from Web Mercator requires considering coordinates from both\n    dimensions together. Use this property to specify which result should be\n    used for display.\n\n    Typically, if the formatter is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the formatter is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTickFormatter will result in\n    a validation error and a JavaScript console error."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimension\": null, \"id\": \"80608210-847c-4f1a-a445-07dc90a557c9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}", 
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ], 
    "name": "MercatorTickFormatter", 
    "desc": "TickFormatter for values in WebMercator units.\n\n    Some map plot types internally use WebMercator to describe coordinates,\n    plot bounds, etc. These units are not very human-friendly. This tick\n    formatter will convert WebMercator units into Latitude and Longitude\n    for display on axes."
  }, 
  "TileRenderer": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "underlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "smoothing", 
        "desc": "Enable image smoothing for the rendered tiles."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "render_parents", 
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True."
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "alpha", 
        "desc": "tile opacity 0.0 - 1.0"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"id\": \"f7559a2a-f925-4108-b2f7-6163324aaed2\"}", 
        "type": "Instance(TileSource)", 
        "name": "tile_source", 
        "desc": "Local data source to use when rendering glyphs on the plot."
      }
    ], 
    "proto": "{\"alpha\": 1.0, \"id\": \"c78149d1-8e9d-4a96-8a21-5bb119536375\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"name\": null, \"render_parents\": true, \"smoothing\": true, \"subscribed_events\": [], \"tags\": [], \"tile_source\": {\"id\": \"1c8a1f9b-ca52-4c02-81cf-73dc3386856c\", \"type\": \"WMTSTileSource\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ], 
    "name": "TileRenderer", 
    "desc": ""
  }, 
  "CategoricalScale": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"e503d051-ed85-453d-a75d-7ec36ec5bad0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.scales.LinearScale"
    ], 
    "name": "CategoricalScale", 
    "desc": ""
  }, 
  "Toggle": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "Toggle", 
        "type": "String", 
        "name": "label", 
        "desc": "The text label for the button to display."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the button is activated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "active", 
        "desc": "The initial state of a button. Also used to trigger ``on_click`` event\n    handler."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(AbstractIcon)", 
        "name": "icon", 
        "desc": "An optional image appearing to the left of button's text."
      }
    ], 
    "proto": "{\"active\": false, \"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"ccc7fd53-02a5-4845-8d40-8c3d0ab387dd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Toggle\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ], 
    "name": "Toggle", 
    "desc": "A two-state toggle button."
  }, 
  "PercentEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"f1239d3b-b5ac-4d3f-9f4e-bad812f0438d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "PercentEditor", 
    "desc": "``IntEditor`` optimized for editing percentages."
  }, 
  "FactorRange": {
    "props": [
      {
        "default": null, 
        "type": "Float", 
        "name": "min_interval", 
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval in synthetic coordinates. If set to ``None``\n    (default), the minimum interval is not bounded.\n\n    The default \"width\" of a category is 1.0 in synthetic coordinates.\n    However, the distance between factors is affected by the various\n    padding properties and whether or not factors are grouped."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "end", 
        "desc": "The end of the range, in synthetic coordinates.\n\n    .. note::\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. The value of ``end`` will only\n        be available in situations where bidirectional communication is\n        available (e.g. server, notebook)."
      }, 
      {
        "default": 0.8, 
        "type": "Float", 
        "name": "subgroup_padding", 
        "desc": "How much padding to add in between mid-level groups of factors. This\n    property only applies when the overall factors have three levels. For\n    example with:\n\n    .. code-block:: python\n\n        FactorRange(factors=[\n            ['foo', 'A', '1'],  ['foo', 'A', '2'], ['foo', 'A', '3'],\n            ['foo', 'B', '2'],\n            ['bar', 'A', '1'],  ['bar', 'A', '2']\n        ])\n\n    This property dictates how much padding to add between the three factors\n    in the `['foo', 'A']` group, and between the two factors in the the\n    [`bar`]"
      }, 
      {
        "default": 1.4, 
        "type": "Float", 
        "name": "group_padding", 
        "desc": "How much padding to add in between top-level groups of factors. This\n    property only applies when the overall range factors have either two or\n    three levels. For example, with:\n\n    .. code-block:: python\n\n        FactorRange(factors=[[\"foo\", \"1'], [\"foo\", \"2'], [\"bar\", \"1\"]])\n\n    The top level groups correspond to ``\"foo\"` and ``\"bar\"``, and the\n    group padding will be applied between the factors``[\"foo\", \"2']`` and\n    ``[\"bar\", \"1\"]``"
      }, 
      {
        "default": [], 
        "type": "Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String)))", 
        "name": "factors", 
        "desc": "A sequence of factors to define this categorical range.\n\n    Factors may have 1, 2, or 3 levels. For 1-level factors, each factor is\n    simply a string. For example:\n\n    .. code-block: python\n\n        FactorRange(factors=[\"sales\", \"marketing\", \"engineering\"])\n\n    defines a range with three simple factors that might represent different\n    units of a business.\n\n    For 2- and 3- level factors, each factor is a tuple of strings:\n\n    .. code-block:: python\n\n        FactorRange(factors=[\n            [\"2016\", \"sales'], [\"2016\", \"marketing'], [\"2016\", \"engineering\"],\n            [\"2017\", \"sales'], [\"2017\", \"marketing'], [\"2017\", \"engineering\"],\n        ])\n\n    defines a range with six 2-level factors that might represent the three\n    business units, grouped by year.\n\n    Note that factors and sub-factors *may only be strings*."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(TimeDelta, TimeDelta))", 
        "name": "bounds", 
        "desc": "The bounds (in synthetic coordinates) that the range is allowed to go to.\n    Typically used to prevent the user from panning/zooming/etc away from the\n    data.\n\n    .. note::\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. Some experimentation may be\n        required to arrive at bounds suitable for specific situations.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the FactorRange."
      }, 
      {
        "default": "percent", 
        "type": "Enum('percent', 'absolute')", 
        "name": "range_padding_units", 
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "start", 
        "desc": "The start of the range, in synthetic coordinates.\n\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. The value of ``end`` will only\n        be available in situations where bidirectional communication is\n        available (e.g. server, notebook)."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "max_interval", 
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval in synthetic coordinates.. Note that ``bounds``\n    can impose an implicit constraint on the maximum interval as well.\n\n    The default \"width\" of a category is 1.0 in synthetic coordinates.\n    However, the distance between factors is affected by the various\n    padding properties and whether or not factors are grouped."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the range is updated."
      }, 
      {
        "default": 0.0, 
        "type": "Float", 
        "name": "factor_padding", 
        "desc": "How much padding to add in between all lowest-level factors. When\n    ``factor_padding`` is non-zero, every factor in every group will have the\n    padding value applied."
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "range_padding", 
        "desc": "How much padding to add around the outside of computed range bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"bounds\": null, \"callback\": null, \"factor_padding\": 0.0, \"factors\": [], \"group_padding\": 1.4, \"id\": \"dbc8934b-7aee-436f-afef-6e0e1c97248d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"range_padding\": 0, \"range_padding_units\": \"percent\", \"subgroup_padding\": 0.8, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.ranges.Range"
    ], 
    "name": "FactorRange", 
    "desc": "A Range of values for a categorical dimension.\n\n    In addition to supplying ``factors`` as a keyword argument to the\n    ``FactorRange`` initializer, you may also instantiate with a sequence of\n    positional arguments:\n\n    .. code-block:: python\n\n        FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\n    Users will normally supply categorical values directly:\n\n    .. code-block:: python\n\n        p.circle(x=[\"foo\", \"bar\"], ...)\n\n    BokehJS will create a mapping from ``\"foo\"`` and ``\"bar\"`` to a numerical\n    coordinate system called *synthetic coordinates*. In the simplest cases,\n    factors are separated by a distance of 1.0 in synthetic coordinates,\n    however the exact mapping from factors to synthetic coordinates is\n    affected by he padding properties as well as whether the number of levels\n    the factors have.\n\n    Users typically do not need to worry about the details of this mapping,\n    however it can be useful to fine tune positions by adding offsets. When\n    supplying factors as coordinates or values, it is possible to add an\n    offset in the synthetic coordinate space by adding a final number value\n    to a factor tuple. For example:\n\n    .. code-block:: python\n\n        p.circle(x=[(\"foo\", 0.3), ...], ...)\n\n    will position the first circle at an ``x`` position that is offset by\n    adding 0.3 to the synthetic coordinate for ``\"foo\"``."
  }, 
  "Grid": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": "#e5e5e5", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "grid_line_color", 
        "desc": "The line color of the Grid lines."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_grid_line_dash_offset", 
        "desc": "The line dash offset of the minor Grid lines."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "band_fill_alpha", 
        "desc": "The fill alpha of alternating bands between Grid lines."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering a grid on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "grid_line_alpha", 
        "desc": "The line alpha of the Grid lines."
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_grid_line_color", 
        "desc": "The line color of the minor Grid lines."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_grid_line_alpha", 
        "desc": "The line alpha of the minor Grid lines."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "grid_line_dash", 
        "desc": "The line dash of the Grid lines."
      }, 
      {
        "default": null, 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "The Ticker to use for computing locations for the Grid lines."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "band_fill_color", 
        "desc": "The fill color of alternating bands between Grid lines."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_grid_line_cap", 
        "desc": "The line cap of the minor Grid lines."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_grid_line_width", 
        "desc": "The line width of the minor Grid lines."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "grid_line_cap", 
        "desc": "The line cap of the Grid lines."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_grid_line_dash", 
        "desc": "The line dash of the minor Grid lines."
      }, 
      {
        "default": "underlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_grid_line_join", 
        "desc": "The line join of the minor Grid lines."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered grid lines. By default, a grid will look for a\n    corresponding axis to ask for bounds. If one cannot be found, the grid\n    will span the entire visible range."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "grid_line_join", 
        "desc": "The line join of the Grid lines."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "grid_line_dash_offset", 
        "desc": "The line dash offset of the Grid lines."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "grid_line_width", 
        "desc": "The line width of the Grid lines."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "dimension", 
        "desc": "Which dimension the Axis Grid lines will intersect. The\n    x-axis is dimension 0 (vertical Grid lines) and the y-axis\n    is dimension 1 (horizontal Grid lines)."
      }
    ], 
    "proto": "{\"band_fill_alpha\": {\"value\": 0}, \"band_fill_color\": {\"value\": null}, \"bounds\": \"auto\", \"dimension\": 0, \"grid_line_alpha\": {\"value\": 1.0}, \"grid_line_cap\": \"butt\", \"grid_line_color\": {\"value\": \"#e5e5e5\"}, \"grid_line_dash\": [], \"grid_line_dash_offset\": 0, \"grid_line_join\": \"bevel\", \"grid_line_width\": {\"value\": 1}, \"id\": \"5300881b-fe6c-4f68-b294-3db61f80243b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"underlay\", \"minor_grid_line_alpha\": {\"value\": 1.0}, \"minor_grid_line_cap\": \"butt\", \"minor_grid_line_color\": {\"value\": null}, \"minor_grid_line_dash\": [], \"minor_grid_line_dash_offset\": 0, \"minor_grid_line_join\": \"bevel\", \"minor_grid_line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ], 
    "name": "Grid", 
    "desc": "Display horizontal or vertical grid lines at locations\n    given by a supplied ``Ticker``."
  }, 
  "CheckboxGroup": {
    "props": [
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(Int)", 
        "name": "active", 
        "desc": "The list of indices of selected check boxes."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "inline", 
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"active\": [], \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"9dff88d2-7545-4be4-a255-1f3f38c30e03\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ], 
    "name": "CheckboxGroup", 
    "desc": "A group of check boxes."
  }, 
  "Ray": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the rays."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the rays."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles in radians to extend the rays, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the rays."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the rays."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the rays."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "length", 
        "desc": "The length to extend the ray. Note that this ``length`` defaults\n    to data units (measured in the x-direction)."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the rays."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the rays."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to start the rays."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to start the rays."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "length_units", 
        "desc": ""
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"angle\": null, \"id\": \"99cb3622-c95a-4210-b34b-e13a029dcdda\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"length\": null, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Ray", 
    "desc": "Render rays.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Ray.py\n        :source-position: below"
  }, 
  "LegendItem": {
    "props": [
      {
        "default": null, 
        "type": "Int", 
        "name": "index", 
        "desc": "The column data index to use for drawing the representative items.\n\n    If None (the default), then Bokeh will automatically choose an index to\n    use. If the label does not refer to a data column name, this is typically\n    the first data point in the data source. Otherwise, if the label does\n    refer to a column name, the legend will have \"groupby\" behavior, and will\n    choose and display representative points from every \"group\" in the column.\n\n    If set to a number, Bokeh will use that numbner as the index in all cases."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(GlyphRenderer))", 
        "name": "renderers", 
        "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\n    then all data_sources of renderers must be the same."
      }, 
      {
        "default": null, 
        "type": "StringSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))", 
        "name": "label", 
        "desc": "A label for this legend. Can be a string, or a column of a\n    ColumnDataSource. If ``label`` is a field, then it must\n    be in the renderers' data_source."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"dd121c4b-83e8-4693-a197-90c4c82294a9\", \"index\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": null, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "LegendItem", 
    "desc": ""
  }, 
  "Line": {
    "props": [
      {
        "default": "black", 
        "type": "Color", 
        "name": "line_color", 
        "desc": "The line color values for the line."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "line_width", 
        "desc": "The line width values for the line."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "Percent", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the line."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the line."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the line."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates for the points of the line."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates for the points of the line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the line."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"148b58ae-28cd-4bda-8102-4932adc6b9fb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": 1.0, \"line_cap\": \"butt\", \"line_color\": \"black\", \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": 1, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Line", 
    "desc": "Render a single line.\n\n    The ``Line`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Line.py\n        :source-position: below"
  }, 
  "LogAxis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"84796739-e63b-4764-b509-a90772efbbec\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": "{\"id\": \"64cf5a9f-8f88-4119-b86c-24aad3ee1665\"}", 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": {\"id\": \"6d4ef5ef-b6ef-4a57-a360-ab692dc3c963\", \"type\": \"LogTickFormatter\"}, \"id\": \"0cc8a219-8e54-47d6-a955-411f4986fb23\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"3baef44b-5218-49b4-b3ec-9d32086de411\", \"type\": \"LogTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ], 
    "name": "LogAxis", 
    "desc": "An axis that picks nice numbers for tick locations on a\n    log scale. Configured with a ``LogTickFormatter`` by default."
  }, 
  "TextInput": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "value", 
        "desc": "Initial or entered text value."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the user unfocuses the TextInput\n    widget by hitting Enter or clicking outside of the text box area."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "placeholder", 
        "desc": "Placeholder for empty input field"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"a79468b9-768d-4ff5-93b2-b139dc3023a1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"placeholder\": \"\", \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ], 
    "name": "TextInput", 
    "desc": "Single-line input widget."
  }, 
  "Box": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(LayoutDOM))", 
        "name": "children", 
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets."
      }
    ], 
    "proto": "{\"children\": [], \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"ca2c0739-c8f4-4490-9f1f-247a7c282f66\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "Box", 
    "desc": "Abstract base class for Row and Column. Do not use directly.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Dodge": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Range)", 
        "name": "range", 
        "desc": "When applying ``Dodge`` to categorical data values, the corresponding\n    ``FactorRange`` must be supplied as the ``range`` property."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "value", 
        "desc": "The amount to dodge the input data."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"00419384-81e9-45d8-8dc9-63a7202b2566\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"range\": null, \"subscribed_events\": [], \"tags\": [], \"value\": 0}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "Dodge", 
    "desc": "Apply either fixed dodge amount to data."
  }, 
  "PointDrawTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "add", 
        "desc": "Enables adding of new points on tap events."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "drag", 
        "desc": "Enables dragging of existing points on pan events."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_objects", 
        "desc": "Defines a limit on the number of points that can be drawn. By\n    default there is no limit on the number of objects, but if enabled\n    the oldest drawn point will be dropped to make space for the new\n    point."
      }
    ], 
    "proto": "{\"add\": true, \"custom_icon\": null, \"custom_tooltip\": null, \"drag\": true, \"empty_value\": null, \"id\": \"4790fc41-f8c8-4ca4-beaa-4537a0f950fb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_objects\": 0, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.EditTool", 
      "bokeh.models.tools.Drag", 
      "bokeh.models.tools.Tap"
    ], 
    "name": "PointDrawTool", 
    "desc": "*toolbar icon*: |point_draw_icon|\n\n    The PointDrawTool allows adding, dragging and deleting point-like\n    glyphs (of ``XYGlyph`` type) on one or more renderers by editing the\n    underlying ``ColumnDataSource`` data. Like other drawing tools, the\n    renderers that are to be edited must be supplied explicitly as a list.\n    Any newly added points will be inserted on the ``ColumnDataSource`` of\n    the first supplied renderer.\n\n    The tool will automatically modify the columns on the data source\n    corresponding to the ``x`` and ``y`` values of the glyph. Any additional\n    columns in the data source will be padded with the given ``empty_value``\n    when adding a new point.\n\n    .. note::\n        The data source updates will trigger data change events continuously\n        throughout the edit operations on the BokehJS side. In Bokeh server\n        apps, the data source will only be synced once, when the edit operation\n        finishes.\n\n    The supported actions include:\n\n    * Add point: Tap anywhere on the plot\n\n    * Move point: Tap and drag an existing point, the point will be\n      dropped once you let go of the mouse button.\n\n    * Delete point: Tap a point to select it then press <<backspace>>\n      key while the mouse is within the plot area.\n\n    .. |point_draw_icon| image:: /_images/icons/PointDraw.png\n        :height: 18pt"
  }, 
  "SquareCross": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"658dbff7-6f3b-4c54-af72-4f5643dfbe15\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "SquareCross", 
    "desc": "Render square markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/SquareCross.py\n        :source-position: below"
  }, 
  "DateRangeSlider": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "tooltips", 
        "desc": ""
      }, 
      {
        "default": 200, 
        "type": "Float", 
        "name": "callback_throttle", 
        "desc": "Number of millseconds to pause between callback calls as the slider is moved."
      }, 
      {
        "default": "ltr", 
        "type": "Enum('ltr', 'rtl')", 
        "name": "direction", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_value", 
        "desc": "Whether or not show slider's value."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Orient the slider either horizontally (default) or vertically."
      }, 
      {
        "default": "%d %b %Y", 
        "type": "String", 
        "name": "format", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "throttle", 
        "type": "Enum('continuous', 'throttle', 'mouseup')", 
        "name": "callback_policy", 
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": 1, 
        "type": "Int", 
        "name": "step", 
        "desc": "The step between consecutive values."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Slider value changes."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "end", 
        "desc": "The maximum allowable value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Slider's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "#e6e6e6", 
        "type": "Color", 
        "name": "bar_color", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "Tuple(Date, Date)", 
        "name": "value", 
        "desc": "Initial or selected range."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "start", 
        "desc": "The minimum allowable value."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }
    ], 
    "proto": "{\"bar_color\": \"#e6e6e6\", \"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": [], \"direction\": \"ltr\", \"disabled\": false, \"end\": null, \"format\": \"%d %b %Y\", \"height\": null, \"id\": \"d6c57e3b-ae59-4e26-9fb6-10c9f8309dd5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"show_value\": true, \"sizing_mode\": \"fixed\", \"start\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"tooltips\": true, \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ], 
    "name": "DateRangeSlider", 
    "desc": "Slider-based date range selection widget."
  }, 
  "NormalHead": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arrow head outline."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arrow head outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the arrow head interior."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arrow head outline."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the arrow head interior."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arrow head outline."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 25, 
        "type": "Float", 
        "name": "size", 
        "desc": "The size, in pixels, of the arrow head."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"e66a5306-13af-49c8-8169-ab27cc2f3899\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ], 
    "name": "NormalHead", 
    "desc": "Render a closed-body arrow head."
  }, 
  "GMapPlot": {
    "props": [
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_width", 
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_bottom", 
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color for the plot background style."
      }, 
      {
        "default": 2000, 
        "type": "Int", 
        "name": "lod_threshold", 
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "v_symmetry", 
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger)."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_width", 
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'svg', 'webgl')", 
        "name": "output_backend", 
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_left", 
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_height", 
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "right", 
        "desc": "A list of renderers to occupy the area to the right of the plot."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "above", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "title_location", 
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toolbar_sticky", 
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc."
      }, 
      {
        "default": "{\"id\": \"3df98853-6d9f-4ddd-b4f1-8008f4e5ec43\"}", 
        "type": "Instance(Scale)", 
        "name": "x_scale", 
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "outline_line_dash", 
        "desc": "The line dash for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_height", 
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "outline_line_dash_offset", 
        "desc": "The line dash offset for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"3abfd3ab-50bf-4938-ab00-cb97477ad28e\", \"text\": \"\"}", 
        "type": "Instance(Title)", 
        "name": "title", 
        "desc": "A title for the plot. Can be a text string or a Title annotation."
      }, 
      {
        "default": 500, 
        "type": "Int", 
        "name": "lod_timeout", 
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled."
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "lod_factor", 
        "desc": "Decimation factor to use when applying level-of-detail decimation."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_fill_alpha", 
        "desc": "The fill alpha for the plot border style."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_x_ranges", 
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "hidpi", 
        "desc": "Whether to use HiDPI mode when available."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_width", 
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "api_key", 
        "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\n    for more information on how to obtain your own."
      }, 
      {
        "default": 300, 
        "type": "Int", 
        "name": "lod_interval", 
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_width", 
        "desc": "The line width for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"12841ff4-9f8b-4a21-85aa-c3cf1748651d\"}", 
        "type": "Instance(Range)", 
        "name": "x_range", 
        "desc": "The (default) data range of the horizontal dimension of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "above", 
        "desc": "A list of renderers to occupy the area above of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "right", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "toolbar_location", 
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "match_aspect", 
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt the match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behaviour."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "#e5e5e5", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "outline_line_color", 
        "desc": "The line color for the plot border outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_height", 
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "outline_line_join", 
        "desc": "The line join for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_right", 
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "h_symmetry", 
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger)."
      }, 
      {
        "default": "{\"id\": \"080f839e-5d85-46bf-b5c1-71bc48cede4e\"}", 
        "type": "Instance(Range)", 
        "name": "y_range", 
        "desc": "The (default) data range of the vertical dimension of the plot."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "min_border", 
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``."
      }, 
      {
        "default": "{\"id\": \"1fc04884-20f4-4324-a263-c09cfdd0e0cd\"}", 
        "type": "Instance(Toolbar)", 
        "name": "toolbar", 
        "desc": "The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha for the plot background style."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_fill_color", 
        "desc": "The fill color for the plot border style."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_alpha", 
        "desc": "The line alpha for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"9f10ef13-d01d-4f89-bfd2-27ae3cdb554f\"}", 
        "type": "Instance(Scale)", 
        "name": "y_scale", 
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_y_ranges", 
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": null, 
        "type": "Instance(GMapOptions)", 
        "name": "map_options", 
        "desc": "Options for displaying the plot."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "below", 
        "desc": "A list of renderers to occupy the area below of the plot."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_top", 
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "aspect_scale", 
        "desc": "A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "outline_line_cap", 
        "desc": "The line cap for the plot border outline."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "left", 
        "desc": "A list of renderers to occupy the area to the left of the plot."
      }
    ], 
    "proto": "{\"above\": [], \"api_key\": null, \"aspect_scale\": 1, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": [], \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"b352e2c7-15a9-4100-84aa-b8a200c29d3a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"map_options\": null, \"match_aspect\": false, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"bevel\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"02a09436-7aac-4ae7-8828-4efe28d4b8cf\", \"type\": \"Title\"}, \"title_location\": \"above\", \"toolbar\": {\"id\": \"46d3d705-eb85-4600-82d7-69b15b0d8d8e\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": {\"id\": \"03074480-1a98-4fce-8b62-2be49d0691bd\", \"type\": \"Range1d\"}, \"x_scale\": {\"id\": \"869d59bd-f9b4-4801-b86a-d2be781ac7e7\", \"type\": \"LinearScale\"}, \"y_range\": {\"id\": \"ea01fa83-93ea-4a82-8570-1aa9935e7187\", \"type\": \"Range1d\"}, \"y_scale\": {\"id\": \"75bd4583-0726-4768-84c7-2d6339e04855\", \"type\": \"LinearScale\"}}", 
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ], 
    "name": "GMapPlot", 
    "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\n    Data placed on this plot should be specified in decimal lat/lon coordinates\n    e.g. ``(37.123, -122.404)``. It will be automatically converted into the\n    web mercator projection to display properly over google maps tiles.\n\n    Please also note that only ``Range1d`` ranges are supported by ``GMapPlot``.\n\n    .. _Google Map: https://www.google.com/maps/"
  }, 
  "ZoomInTool": {
    "props": [
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the zoom-in tool is constrained to act in. By\n    default the zoom-in zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0.1, 
        "type": "Percent", 
        "name": "factor", 
        "desc": "Percentage to zoom for each click of the zoom-in tool."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"factor\": 0.1, \"id\": \"33eee899-be43-46ef-b78a-c424080d6bf4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "ZoomInTool", 
    "desc": "*toolbar icon*: |zoom_in_icon|\n\n    The zoom-in tool allows users to click a button to zoom in\n    by a fixed amount.\n\n    .. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n        :height: 18pt"
  }, 
  "MercatorAxis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"149ff44a-7faa-4b50-bcdb-e859be95d094\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": "{\"id\": \"b2fa8605-6c86-4781-9bbe-e9a1711b57ee\"}", 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": {\"id\": \"2ec79f93-c70f-4879-a173-890a13a1131f\", \"type\": \"MercatorTickFormatter\"}, \"id\": \"321f4ff0-cc4f-4188-af2c-f32b85db1cca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"7bd95a99-2469-4e6f-b0ea-9dc2236087ef\", \"type\": \"MercatorTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ], 
    "name": "MercatorAxis", 
    "desc": "An axis that picks nice numbers for tick locations on a\n    Mercator scale. Configured with a ``MercatorTickFormatter`` by default.\n\n    Args:\n        dimension ('lat' or 'lon', optional) :\n            Whether this axis will display latitude or longitude values.\n            (default: 'lat')"
  }, 
  "Range": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the range is updated."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"81e1223d-3dd2-4725-81b1-f75e1124f66a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Range", 
    "desc": "A base class for all range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "GeoJSONDataSource": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"id\": \"31d37b04-e9a9-497a-8521-5e4fa304b319\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": null, 
        "type": "JSON", 
        "name": "geojson", 
        "desc": "GeoJSON that contains features for plotting. Currently GeoJSONDataSource can\n    only process a FeatureCollection or GeometryCollection."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": "{\"id\": \"a687748c-fbb7-4d01-93aa-89ed64e9977b\"}", 
        "type": "Instance(SelectionPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a SelectionPolicy that determines how selections are set."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"callback\": null, \"geojson\": null, \"id\": \"59a61d24-b477-49d7-97a4-45598bf19c9d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"id\": \"dd9023b0-35ec-4eab-a58b-30aa789d61c2\", \"type\": \"Selection\"}, \"selection_policy\": {\"id\": \"e4f16b8b-6db5-4d46-95da-5a7f0b79ba12\", \"type\": \"UnionRenderers\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ], 
    "name": "GeoJSONDataSource", 
    "desc": ""
  }, 
  "AbstractSlider": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "tooltips", 
        "desc": ""
      }, 
      {
        "default": 200, 
        "type": "Float", 
        "name": "callback_throttle", 
        "desc": "Number of millseconds to pause between callback calls as the slider is moved."
      }, 
      {
        "default": "ltr", 
        "type": "Enum('ltr', 'rtl')", 
        "name": "direction", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_value", 
        "desc": "Whether or not show slider's value."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Orient the slider either horizontally (default) or vertically."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Slider's label."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "format", 
        "desc": ""
      }, 
      {
        "default": "throttle", 
        "type": "Enum('continuous', 'throttle', 'mouseup')", 
        "name": "callback_policy", 
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Slider value changes."
      }, 
      {
        "default": "#e6e6e6", 
        "type": "Color", 
        "name": "bar_color", 
        "desc": ""
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"bar_color\": \"#e6e6e6\", \"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": [], \"direction\": \"ltr\", \"disabled\": false, \"format\": null, \"height\": null, \"id\": \"b2937f3d-6196-4983-906e-137e1207956e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"show_value\": true, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"tooltips\": true, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "AbstractSlider", 
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ToolbarBase": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'grey')", 
        "name": "logo", 
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Tool))", 
        "name": "tools", 
        "desc": "A list of tools to add to the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"da4457dc-9c11-4676-b8e8-c5ea2c5ec143\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "ToolbarBase", 
    "desc": "A base class for different toolbars.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Inspection": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toggleable", 
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"f68ed109-5b79-4804-9450-b742227255f7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true}", 
    "bases": [
      "bokeh.models.tools.Gesture"
    ], 
    "name": "Inspection", 
    "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ToolbarPanel": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Instance(Toolbar)", 
        "name": "toolbar", 
        "desc": "A toolbar to display."
      }
    ], 
    "proto": "{\"id\": \"5ddf78aa-cd75-4578-8a6b-b5bf96167bf7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"toolbar\": null, \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "ToolbarPanel", 
    "desc": ""
  }, 
  "Gesture": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"0dd8da38-7719-42d9-9c79-0fc1e15c2614\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Tool"
    ], 
    "name": "Gesture", 
    "desc": "A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "LogScale": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"5d4134d9-7167-4720-888d-c0236d6f965a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.scales.Scale"
    ], 
    "name": "LogScale", 
    "desc": ""
  }, 
  "Selection": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "Seq(Int)", 
        "name": "line_indices", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Seq(Int))", 
        "name": "multiline_indices", 
        "desc": ""
      }, 
      {
        "default": [], 
        "type": "Seq(Int)", 
        "name": "indices", 
        "desc": "The indices included in a selection."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"id\": \"a7988984-a7d0-4cb3-abd0-928a15014d52\", \"indices\": [], \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_indices\": [], \"multiline_indices\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Selection", 
    "desc": "A Selection represents a portion of the data in a DataSource, which\n    can be visually manipulated in a plot.\n\n    Selections are typically created by selecting points in a plot with\n    a SelectTool, but can also be programmatically specified."
  }, 
  "SelectEditor": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "options", 
        "desc": "The list of options to select from."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"09cbb6a6-7c1d-4700-bd57-22edeb561473\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "SelectEditor", 
    "desc": "Select cell editor."
  }, 
  "GuideRenderer": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"4aad3f65-86ad-4f61-8682-a6aafa4c8db7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.renderers.Renderer"
    ], 
    "name": "GuideRenderer", 
    "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\n    not generally useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Image": {
    "props": [
      {
        "default": null, 
        "type": "Instance(ColorMapper)", 
        "name": "color_mapper", 
        "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\n    into RGBA values for display.\n\n    .. note::\n        The color mapping step happens on the client."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "dh", 
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "dilate", 
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "dh_units", 
        "desc": ""
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "image", 
        "desc": "The arrays of scalar data for the images to be colormapped."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "global_alpha", 
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any alpha values applied explicitly in a color mapper)."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "dw", 
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "dw_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to locate the image anchors."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to locate the image anchors."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"color_mapper\": {\"id\": \"b1124a8a-2d01-4127-98b4-beaf6f63d8e2\", \"type\": \"LinearColorMapper\"}, \"dh\": null, \"dilate\": false, \"dw\": null, \"global_alpha\": 1.0, \"id\": \"adf427c1-514e-4bb0-85e5-fdc79c0fe286\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Image", 
    "desc": "Render images given as scalar data together with a color mapper.\n\n    In addition to the defined model properties, ``Image`` also can accept\n    a keyword argument ``palette`` in place of an explicit ``color_mapper``.\n    The value should be a list of colors, or the name of one of the built-in\n    palettes in ``bokeh.palettes``. This palette will be used to automatically\n    construct a ``ColorMapper`` model for the ``color_mapper`` property.\n\n    If both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\n    exception will be raised. If neither is passed, then the ``Greys9``\n    palette will be used as a default."
  }, 
  "DateFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "ISO-8601", 
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TIMESTAMP'), String)", 
        "name": "format", 
        "desc": "The date format can be any standard  `strftime`_ format string, as well\n    as any of the following predefined format names:\n\n    ================================================ ================== ===================\n    Format name(s)                                   Format string      Example Output\n    ================================================ ================== ===================\n    ``ATOM`` / ``W3C`` / ``RFC-3339`` / ``ISO-8601`` ``\"%Y-%m-%d\"``     2014-03-01\n    ``COOKIE``                                       ``\"%a, %d %b %Y\"`` Sat, 01 Mar 2014\n    ``RFC-850``                                      ``\"%A, %d-%b-%y\"`` Saturday, 01-Mar-14\n    ``RFC-1123`` / ``RFC-2822``                      ``\"%a, %e %b %Y\"`` Sat, 1 Mar 2014\n    ``RSS`` / ``RFC-822`` / ``RFC-1036``             ``\"%a, %e %b %y\"`` Sat, 1 Mar 14\n    ``TIMESTAMP``                                    (ms since epoch)   1393632000000\n    ================================================ ================== ===================\n\n    Note that in the table some of the format names are synonymous, with\n    identical format names separated by slashes.\n\n    This list of supported `strftime`_ format codes is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"format\": \"ISO-8601\", \"id\": \"113b2196-647d-43ec-9b30-3bbe6fada9e4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ], 
    "name": "DateFormatter", 
    "desc": "Date cell formatter."
  }, 
  "BoxSelectTool": {
    "props": [
      {
        "default": "corner", 
        "type": "Enum('corner', 'center')", 
        "name": "origin", 
        "desc": "Indicates whether the rectangular selection area should originate from a corner\n    (top-left or bottom-right depending on direction) or the center of the box."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the box selection is to be free in. By default,\n    users may freely draw selections boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled."
      }, 
      {
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"2ecf7149-1504-4329-9e2c-2609b18da343\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}", 
        "type": "Instance(BoxAnnotation)", 
        "name": "overlay", 
        "desc": "A shaded annotation drawn to indicate the selection region."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "select_every_mousemove", 
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: False"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, List(Instance(Renderer)))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to hit test against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser on completion of drawing a selection box.\n    The cb_data parameter that is available to the Callback code will contain\n    one BoxSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the selection box"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"dimensions\": \"both\", \"id\": \"a85640e2-8428-4f26-aab3-82f02df2128c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"origin\": \"corner\", \"overlay\": {\"id\": \"a1382c38-4e25-428d-bb8b-1a656636b549\", \"type\": \"BoxAnnotation\"}, \"renderers\": \"auto\", \"select_every_mousemove\": false, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Drag"
    ], 
    "name": "BoxSelectTool", 
    "desc": "*toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a\n    Plot by indicating a rectangular region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 18pt"
  }, 
  "CellEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"a56948b0-d538-4f6f-a758-ea7fd06bd2eb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "CellEditor", 
    "desc": "Abstract base class for data table's cell editors.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "VeeHead": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arrow head outline."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arrow head outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the arrow head interior."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arrow head outline."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the arrow head interior."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arrow head outline."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 25, 
        "type": "Float", 
        "name": "size", 
        "desc": "The size, in pixels, of the arrow head."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"black\"}, \"id\": \"fa7d5cfa-d773-4615-8575-7f4c0a279e5b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ], 
    "name": "VeeHead", 
    "desc": "Render a vee-style arrow head."
  }, 
  "TableWidget": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "The source of data for the widget."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(CDSView)", 
        "name": "view", 
        "desc": "A view into the data source to use when rendering table rows. A default view\n    of the entire data source is created if a view is not passed in during\n    initialization."
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"7492a6cb-ed7d-4e57-94b7-971b74eee41b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"source\": null, \"subscribed_events\": [], \"tags\": [], \"view\": {\"id\": \"ab82c652-c825-4320-b74a-049d83b7ddf4\", \"type\": \"CDSView\"}, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "TableWidget", 
    "desc": "Abstract base class for data table (data grid) widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "WheelZoomTool": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "maintain_focus", 
        "desc": "Whether or not zooming tool maintains its focus position. Setting it\n    to False results in a more \"gliding\" behavior, allowing one to\n    zoom out more smoothly, at the cost of losing the focus position."
      }, 
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the wheel zoom tool is constrained to act in. By\n    default the wheel zoom tool will zoom in any dimension, but can be\n    configured to only zoom horizontally across the width of the plot, or\n    vertically across the height of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "zoom_on_axis", 
        "desc": "Whether scrolling on an axis (outside the central plot area) should\n    zoom that dimension."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "speed", 
        "desc": "Speed at which the wheel zooms. Default is 1/600. Optimal range is between\n    0.001 and 0.09. High values will be clipped. Speed may very between browsers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"id\": \"48e42a56-d55b-4b07-bdca-6037d8427aee\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"maintain_focus\": true, \"name\": null, \"speed\": 0, \"subscribed_events\": [], \"tags\": [], \"zoom_on_axis\": true}", 
    "bases": [
      "bokeh.models.tools.Scroll"
    ], 
    "name": "WheelZoomTool", 
    "desc": "*toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 18pt"
  }, 
  "DataSource": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "{\"id\": \"3bfebfdb-1ad8-4eda-8533-5c2e018787e8\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"22e0dc43-dc05-44c4-a07d-db200794add6\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"id\": \"0f4a613f-4aca-4a07-91b5-c3f35a1cae0e\", \"type\": \"Selection\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "DataSource", 
    "desc": "A base class for data source types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Scroll": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"21ac8c46-d721-4e91-8dba-286ba8d80af1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Gesture"
    ], 
    "name": "Scroll", 
    "desc": "A base class for tools that respond to scroll events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "TableColumn": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "field", 
        "desc": "The name of the field mapping to a column in the data source."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "sortable", 
        "desc": "Whether this column is sortable or not. Note that data table has\n    to have sorting enabled to allow sorting in general."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "title", 
        "desc": "The title of this column. If not set, column's data field is\n    used instead."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "ascending", 
        "type": "Enum('ascending', 'descending')", 
        "name": "default_sort", 
        "desc": "The default sorting order. By default ``ascending`` order is used."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 300, 
        "type": "Int", 
        "name": "width", 
        "desc": "The width or maximum width (depending on data table's configuration)\n    in pixels of this column."
      }, 
      {
        "default": "{\"id\": \"ca3d97f3-4ce9-4f96-ac77-9bc5a2caa8d3\"}", 
        "type": "Instance(CellEditor)", 
        "name": "editor", 
        "desc": "The cell editor for this column. By default, a simple string editor\n    is used."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "{\"id\": \"2427e1bd-18e1-446a-aa1a-eb1fd6c9ca8f\"}", 
        "type": "Instance(CellFormatter)", 
        "name": "formatter", 
        "desc": "The cell formatter for this column. By default, a simple string\n    formatter is used."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"default_sort\": \"ascending\", \"editor\": {\"id\": \"d6f90191-e383-46b6-9107-46a39184cfcc\", \"type\": \"StringEditor\"}, \"field\": null, \"formatter\": {\"id\": \"9e67f7db-786d-4c8f-9701-8f632bcf651b\", \"type\": \"StringFormatter\"}, \"id\": \"609ce738-43b8-4ead-ad4f-acf9d8360ebc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sortable\": true, \"subscribed_events\": [], \"tags\": [], \"title\": null, \"width\": 300}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "TableColumn", 
    "desc": "Table column widget."
  }, 
  "LassoSelectTool": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "select_every_mousemove", 
        "desc": "Whether a selection computation should happen on every mouse\n    event, or only once, when the selection region is completed. Default: True"
      }, 
      {
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"5ce32b5b-8978-4523-bb4d-c61142d15073\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}", 
        "type": "Instance(PolyAnnotation)", 
        "name": "overlay", 
        "desc": "A shaded annotation drawn to indicate the selection region."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, List(Instance(Renderer)))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to hit test against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser on every selection of a lasso area.\n    The cb_data parameter that is available to the Callback code will contain\n    one LassoSelectTool-specific field:\n\n    :geometry: object containing the coordinates of the lasso area"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"cf02508c-2db7-49d3-bf50-474112d49f07\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"767578b1-3fa2-419d-a706-85c635dc4d29\", \"type\": \"PolyAnnotation\"}, \"renderers\": \"auto\", \"select_every_mousemove\": true, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Drag"
    ], 
    "name": "LassoSelectTool", 
    "desc": "*toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a\n    Plot by indicating a free-drawn \"lasso\" region by dragging the\n    mouse or a finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 18pt"
  }, 
  "DaysTicker": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "interval", 
        "desc": "The interval between adjacent ticks."
      }, 
      {
        "default": [], 
        "type": "Seq(Int)", 
        "name": "days", 
        "desc": "The intervals of days to use."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"days\": [], \"desired_num_ticks\": 6, \"id\": \"38c940bd-755b-4d47-8c1e-d46c46c2d0bf\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ], 
    "name": "DaysTicker", 
    "desc": "Generate ticks spaced apart by specific, even multiples of days."
  }, 
  "DateSlider": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "tooltips", 
        "desc": ""
      }, 
      {
        "default": 200, 
        "type": "Float", 
        "name": "callback_throttle", 
        "desc": "Number of millseconds to pause between callback calls as the slider is moved."
      }, 
      {
        "default": "ltr", 
        "type": "Enum('ltr', 'rtl')", 
        "name": "direction", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_value", 
        "desc": "Whether or not show slider's value."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Orient the slider either horizontally (default) or vertically."
      }, 
      {
        "default": "%d %b %Y", 
        "type": "String", 
        "name": "format", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "throttle", 
        "type": "Enum('continuous', 'throttle', 'mouseup')", 
        "name": "callback_policy", 
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": 1, 
        "type": "Int", 
        "name": "step", 
        "desc": "The step between consecutive values."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Slider value changes."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "end", 
        "desc": "The maximum allowable value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Slider's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "#e6e6e6", 
        "type": "Color", 
        "name": "bar_color", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "value", 
        "desc": "Initial or selected value."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "start", 
        "desc": "The minimum allowable value."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }
    ], 
    "proto": "{\"bar_color\": \"#e6e6e6\", \"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": [], \"direction\": \"ltr\", \"disabled\": false, \"end\": null, \"format\": \"%d %b %Y\", \"height\": null, \"id\": \"e038312d-e2cc-4a54-a73e-6136b6eecd0c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"show_value\": true, \"sizing_mode\": \"fixed\", \"start\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"tooltips\": true, \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ], 
    "name": "DateSlider", 
    "desc": "Slider-based date selection widget."
  }, 
  "Axis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": null, 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": null, \"id\": \"2cb70e09-c01c-4482-a837-f9482f0cad01\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ], 
    "name": "Axis", 
    "desc": "A base class that defines common properties for all axis types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "MapOptions": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 12, 
        "type": "Int", 
        "name": "zoom", 
        "desc": "The initial zoom level to use when displaying the map."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "lat", 
        "desc": "The latitude where the map should be centered."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "lng", 
        "desc": "The longitude where the map should be centered."
      }
    ], 
    "proto": "{\"id\": \"9efa5099-5a3f-4aae-91a4-c5994c3e92ca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"lat\": null, \"lng\": null, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"zoom\": 12}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "MapOptions", 
    "desc": "Abstract base class for map options' models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "FuncTickFormatter": {
    "props": [
      {
        "default": "", 
        "type": "String", 
        "name": "code", 
        "desc": "A snippet of JavaScript code that reformats a single tick to the desired\n    format. The variable ``tick`` will contain the unformatted tick value and\n    can be expected to be present in the code snippet namespace at render time.\n\n    Additionally available variables are:\n\n      * ``ticks``, an array of all axis ticks as positioned by the ticker,\n      * ``index``, the position of ``tick`` within ``ticks``, and\n      * the keys of ``args`` mapping, if any.\n\n    Finding yourself needing to cache an expensive ``ticks``-dependent\n    computation, you can store it on the ``this`` variable.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            this.precision = this.precision || (ticks.length > 5 ? 1 : 2);\n            return Math.floor(tick) + \" + \" + (tick % 1).toFixed(this.precision);\n            '''"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, AnyRef)", 
        "name": "args", 
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the formatter's code snippet as the values of\n    named parameters to the callback."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "use_strict", 
        "desc": "Enables or disables automatic insertion of ``\"use strict\";`` into ``code``."
      }
    ], 
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"a0836e47-58d2-423f-8a59-8b4de276a10e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"use_strict\": false}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "FuncTickFormatter", 
    "desc": "Display tick values that are formatted by a user-defined function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh."
  }, 
  "Plot": {
    "props": [
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_width", 
        "desc": "This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_bottom", 
        "desc": "Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color for the plot background style."
      }, 
      {
        "default": 2000, 
        "type": "Int", 
        "name": "lod_threshold", 
        "desc": "A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "v_symmetry", 
        "desc": "Whether the total vertical padding on both sides of the plot will\n    be made equal (the top or bottom padding amount, whichever is larger)."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_width", 
        "desc": "Total width of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the width of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs and markers.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'svg', 'webgl')", 
        "name": "output_backend", 
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_left", 
        "desc": "Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": 600, 
        "type": "Int", 
        "name": "plot_height", 
        "desc": "Total height of the entire plot (including any axes, titles,\n    border padding, etc.)\n\n    .. note::\n        This corresponds directly to the height of the HTML\n        canvas that will be used."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "right", 
        "desc": "A list of renderers to occupy the area to the right of the plot."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "above", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "title_location", 
        "desc": "Where the title will be located. Titles on the left or right side\n    will be rotated."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toolbar_sticky", 
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc."
      }, 
      {
        "default": "{\"id\": \"7ea85a66-2b22-4840-a42d-87746dd1b3bc\"}", 
        "type": "Instance(Scale)", 
        "name": "x_scale", 
        "desc": "What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "outline_line_dash", 
        "desc": "The line dash for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "layout_height", 
        "desc": "This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "outline_line_dash_offset", 
        "desc": "The line dash offset for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"91f42a3f-f1b5-4726-8c9f-2920810ada9d\", \"text\": \"\"}", 
        "type": "Instance(Title)", 
        "name": "title", 
        "desc": "A title for the plot. Can be a text string or a Title annotation."
      }, 
      {
        "default": 500, 
        "type": "Int", 
        "name": "lod_timeout", 
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled."
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "lod_factor", 
        "desc": "Decimation factor to use when applying level-of-detail decimation."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_fill_alpha", 
        "desc": "The fill alpha for the plot border style."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_x_ranges", 
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "hidpi", 
        "desc": "Whether to use HiDPI mode when available."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_width", 
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "aspect_scale", 
        "desc": "A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``."
      }, 
      {
        "default": 300, 
        "type": "Int", 
        "name": "lod_interval", 
        "desc": "Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_width", 
        "desc": "The line width for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"0bb12b06-5c97-448d-8afa-1e617de3802a\"}", 
        "type": "Instance(Range)", 
        "name": "x_range", 
        "desc": "The (default) data range of the horizontal dimension of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "above", 
        "desc": "A list of renderers to occupy the area above of the plot."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "right", 
        "type": "Enum('above', 'below', 'left', 'right')", 
        "name": "toolbar_location", 
        "desc": "Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "match_aspect", 
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt the match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behaviour."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "#e5e5e5", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "outline_line_color", 
        "desc": "The line color for the plot border outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "inner_height", 
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "outline_line_join", 
        "desc": "The line join for the plot border outline."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_right", 
        "desc": "Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "h_symmetry", 
        "desc": "Whether the total horizontal padding on both sides of the plot will\n    be made equal (the left or right padding amount, whichever is larger)."
      }, 
      {
        "default": "{\"id\": \"0f6ddcec-d37f-432b-9e77-cc375647bc2e\"}", 
        "type": "Instance(Range)", 
        "name": "y_range", 
        "desc": "The (default) data range of the vertical dimension of the plot."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "min_border", 
        "desc": "A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``."
      }, 
      {
        "default": "{\"id\": \"a87260b0-8162-452a-a80a-54647cdbf0ed\"}", 
        "type": "Instance(Toolbar)", 
        "name": "toolbar", 
        "desc": "The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha for the plot background style."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_fill_color", 
        "desc": "The fill color for the plot border style."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "outline_line_alpha", 
        "desc": "The line alpha for the plot border outline."
      }, 
      {
        "default": "{\"id\": \"86248bef-eca8-497c-9d1a-db76c447849c\"}", 
        "type": "Instance(Scale)", 
        "name": "y_scale", 
        "desc": "What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Range))", 
        "name": "extra_y_ranges", 
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "below", 
        "desc": "A list of renderers to occupy the area below of the plot."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "min_border_top", 
        "desc": "Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "outline_line_cap", 
        "desc": "The line cap for the plot border outline."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "left", 
        "desc": "A list of renderers to occupy the area to the left of the plot."
      }
    ], 
    "proto": "{\"above\": [], \"aspect_scale\": 1, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"below\": [], \"border_fill_alpha\": {\"value\": 1.0}, \"border_fill_color\": {\"value\": \"#ffffff\"}, \"css_classes\": [], \"disabled\": false, \"extra_x_ranges\": {}, \"extra_y_ranges\": {}, \"h_symmetry\": true, \"height\": null, \"hidpi\": true, \"id\": \"ffb6d9b5-b61c-44d7-9a6c-31bc334ef96b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"left\": [], \"lod_factor\": 10, \"lod_interval\": 300, \"lod_threshold\": 2000, \"lod_timeout\": 500, \"match_aspect\": false, \"min_border\": 5, \"min_border_bottom\": null, \"min_border_left\": null, \"min_border_right\": null, \"min_border_top\": null, \"name\": null, \"outline_line_alpha\": {\"value\": 1.0}, \"outline_line_cap\": \"butt\", \"outline_line_color\": {\"value\": \"#e5e5e5\"}, \"outline_line_dash\": [], \"outline_line_dash_offset\": 0, \"outline_line_join\": \"bevel\", \"outline_line_width\": {\"value\": 1}, \"output_backend\": \"canvas\", \"plot_height\": 600, \"plot_width\": 600, \"renderers\": [], \"right\": [], \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": {\"id\": \"369baeef-1c9d-4216-9d8c-f2e80484ef1c\", \"type\": \"Title\"}, \"title_location\": \"above\", \"toolbar\": {\"id\": \"c4bf3fe2-3af2-4806-9b8b-54afae908744\", \"type\": \"Toolbar\"}, \"toolbar_location\": \"right\", \"toolbar_sticky\": true, \"v_symmetry\": false, \"width\": null, \"x_range\": {\"id\": \"ead54e53-c6bf-49c3-a11e-2479ab379a72\", \"type\": \"DataRange1d\"}, \"x_scale\": {\"id\": \"64c3e085-0fc0-464c-8a7b-6aa4d95d1e52\", \"type\": \"LinearScale\"}, \"y_range\": {\"id\": \"cc8f8856-6c06-4d5b-9996-8137a152c23a\", \"type\": \"DataRange1d\"}, \"y_scale\": {\"id\": \"cd9b47c7-4cf9-49a5-ace8-3596bdcb78e6\", \"type\": \"LinearScale\"}}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "Plot", 
    "desc": "Model representing a plot, containing glyphs, guides, annotations."
  }, 
  "LogTickFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "The corresponding ``LogTicker``, used to determine the correct\n    base to use. If unset, the formatter will use base 10 as a default."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"06df8785-86d2-41a6-9d41-1d6502da1e27\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "LogTickFormatter", 
    "desc": "Display tick values from continuous ranges as powers\n    of some base.\n\n    Most often useful in conjunction with a ``LogTicker``."
  }, 
  "TapTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, List(Instance(Renderer)))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to hit test against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to execute *whenever a glyph is \"hit\"* by a mouse click\n    or tap.\n\n    This is often useful with the  :class:`~bokeh.models.callbacks.OpenURL`\n    model to open URLs based on a user clicking or tapping a specific glyph.\n\n    However, it may also be a :class:`~bokeh.models.callbacks.CustomJS`\n    which can execute arbitrary JavaScript code in response to clicking or\n    tapping glyphs. The callback will be executed for each individual glyph\n    that is it hit by a click or tap, and will receive the ``TapTool`` model\n    as  ``cb_obj``. The optional ``cb_data`` will have the data source as\n    its ``.source`` attribute and the selection geometry as its\n    ``.geometries`` attribute.\n\n    The ``.geometries`` attribute has 5 members.\n    ``.type`` is the geometry type, which always a ``.point`` for a tap event.\n    ``.sx`` and ``.sy`` are the screen X and Y coordinates where the tap occurred.\n    ``.x`` and ``.y`` are the converted data coordinates for the item that has\n    been selected. The ``.x`` and ``.y`` values are based on the axis assiged\n    to that glyph.\n\n    .. note::\n        This callback does *not* execute on every tap, only when a glyphs is\n        \"hit\". If you would like to execute a callback on every mouse tap,\n        please see :ref:`userguide_interaction_jscallbacks_customjs_interactions`."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used."
      }, 
      {
        "default": "select", 
        "type": "Enum('select', 'inspect')", 
        "name": "behavior", 
        "desc": "This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspecions don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"behavior\": \"select\", \"callback\": null, \"id\": \"3b886a8f-88cd-4a1b-ab5c-d46cd2aec536\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"renderers\": \"auto\", \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Tap"
    ], 
    "name": "TapTool", 
    "desc": "*toolbar icon*: |tap_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_icon| image:: /_images/icons/Tap.png\n        :height: 18pt\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist."
  }, 
  "Bezier": {
    "props": [
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cx0", 
        "desc": "The x-coordinates of first control points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cx1", 
        "desc": "The x-coordinates of second control points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cy1", 
        "desc": "The y-coordinates of second control points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "cy0", 
        "desc": "The y-coordinates of first control points."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the B\u00e9zier curves."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the B\u00e9zier curves."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the B\u00e9zier curves."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the B\u00e9zier curves."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the B\u00e9zier curves."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the B\u00e9zier curves."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y1", 
        "desc": "The y-coordinates of the ending points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y0", 
        "desc": "The y-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x0", 
        "desc": "The x-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x1", 
        "desc": "The x-coordinates of the ending points."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the B\u00e9zier curves."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"cx0\": null, \"cx1\": null, \"cy0\": null, \"cy1\": null, \"id\": \"ff85ce01-b197-4c6a-9f9e-e4e5cc1f1c15\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "Bezier", 
    "desc": "Render B\u00e9zier curves.\n\n    For more information consult the `Wikipedia article for B\u00e9zier curve`_.\n\n    .. _Wikipedia article for B\u00e9zier curve: http://en.wikipedia.org/wiki/B\u00e9zier_curve\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Bezier.py\n        :source-position: below"
  }, 
  "Hex": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"3ba64a1e-f099-422a-9199-9f39a2edb8e7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Hex", 
    "desc": "Render hexagon markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Hex.py\n        :source-position: below"
  }, 
  "Transform": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"1fe555f1-c1ee-4b03-a3ca-0d4c4ca4c7b0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Transform", 
    "desc": "Base class for ``Transform`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "AdaptiveTicker": {
    "props": [
      {
        "default": 0.0, 
        "type": "Float", 
        "name": "min_interval", 
        "desc": "The smallest allowable interval between two adjacent ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "max_interval", 
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``."
      }, 
      {
        "default": 10.0, 
        "type": "Float", 
        "name": "base", 
        "desc": "The multiplier to use for scaling mantissas."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [
          1, 
          2, 
          5
        ], 
        "type": "Seq(Float)", 
        "name": "mantissas", 
        "desc": "The acceptable list numbers to generate multiples of."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"id\": \"08b1f3d8-0899-4346-a1d4-c6152b7aadd2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ], 
    "name": "AdaptiveTicker", 
    "desc": "Generate \"nice\" round ticks at any magnitude.\n\n    Creates ticks that are \"base\" multiples of a set of given\n    mantissas. For example, with ``base=10`` and\n    ``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n        ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ..."
  }, 
  "Scale": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"48f1eecc-a93d-4b7a-a96c-8f6e495128e0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "Scale", 
    "desc": "Base class for ``Scale`` models that represent an invertible\n    computation to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block: coffeescript\n\n        compute: (x) ->\n            # compute the transform of a single value\n\n        v_compute: (xs) ->\n            # compute the transform of an array of values\n\n        invert: (xprime) ->\n            # compute the inverse transform of a single value\n\n        v_invert: (xprimes) ->\n            # compute the inverse transform of an array of values\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "TextAnnotation": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"b6740ffb-32cc-4e31-8415-60cc599a2d80\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "TextAnnotation", 
    "desc": "Base class for text annotation models such as labels and titles.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "MercatorTicker": {
    "props": [
      {
        "default": 0.0, 
        "type": "Float", 
        "name": "min_interval", 
        "desc": "The smallest allowable interval between two adjacent ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "max_interval", 
        "desc": "The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``."
      }, 
      {
        "default": 10.0, 
        "type": "Float", 
        "name": "base", 
        "desc": "The multiplier to use for scaling mantissas."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": [
          1, 
          2, 
          5
        ], 
        "type": "Seq(Float)", 
        "name": "mantissas", 
        "desc": "The acceptable list numbers to generate multiples of."
      }, 
      {
        "default": null, 
        "type": "Enum('lat', 'lon')", 
        "name": "dimension", 
        "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick locations from Web Mercator requires considering coordinates from\n    both dimensions together. Use this property to specify which result should\n    be returned.\n\n    Typically, if the ticker is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the ticker is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured MercatorTicker will result in a\n    validation error and a JavaScript console error."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"base\": 10.0, \"desired_num_ticks\": 6, \"dimension\": null, \"id\": \"9ed292df-3811-4e17-90e6-f8b093bee750\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mantissas\": [1, 2, 5], \"max_interval\": null, \"min_interval\": 0.0, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ], 
    "name": "MercatorTicker", 
    "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates."
  }, 
  "OpenURL": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "http://", 
        "type": "String", 
        "name": "url", 
        "desc": "The URL to direct the web browser to. This can be a template string,\n    which will be formatted with data from the data source."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"926f4488-0711-4010-8017-1528ed69a551\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"url\": \"http://\"}", 
    "bases": [
      "bokeh.models.callbacks.Callback"
    ], 
    "name": "OpenURL", 
    "desc": "Open a URL in a new tab or window (browser dependent)."
  }, 
  "ResetTool": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"f7f0a13f-8fea-4fc0-ae10-70de85583779\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "ResetTool", 
    "desc": "*toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool\n    resets the data bounds of the plot to their values when the plot was\n    initially created.\n\n    Optionally, the reset tool also resets the plat canvas dimensions to\n    their original size\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 18pt"
  }, 
  "WidgetBox": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Widget))", 
        "name": "children", 
        "desc": "The list of widgets to put in the layout box."
      }
    ], 
    "proto": "{\"children\": [], \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"1102f9ef-88da-4982-8f8f-310cae354c16\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "WidgetBox", 
    "desc": "A container for widgets that are part of a layout."
  }, 
  "PrintfTickFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "%s", 
        "type": "String", 
        "name": "format", 
        "desc": "The number format, as defined as follows: the placeholder in the format\n    string is marked by % and is followed by one or more of these elements,\n    in this order:\n\n    * An optional ``+`` sign\n        Causes the result to be preceded with a plus or minus sign on numeric\n        values. By default, only the ``-`` sign is used on negative numbers.\n\n    * An optional padding specifier\n        Specifies what (if any) character to use for padding. Possible values\n        are 0 or any other character preceded by a ``'`` (single quote). The\n        default is to pad with spaces.\n\n    * An optional ``-`` sign\n        Causes sprintf to left-align the result of this placeholder. The default\n        is to right-align the result.\n\n    * An optional number\n        Specifies how many characters the result should have. If the value to be\n        returned is shorter than this number, the result will be padded.\n\n    * An optional precision modifier\n        Consists of a ``.`` (dot) followed by a number, specifies how many digits\n        should be displayed for floating point numbers. When used on a string, it\n        causes the result to be truncated.\n\n    * A type specifier\n        Can be any of:\n\n        - ``%`` --- yields a literal ``%`` character\n        - ``b`` --- yields an integer as a binary number\n        - ``c`` --- yields an integer as the character with that ASCII value\n        - ``d`` or ``i`` --- yields an integer as a signed decimal number\n        - ``e`` --- yields a float using scientific notation\n        - ``u`` --- yields an integer as an unsigned decimal number\n        - ``f`` --- yields a float as is\n        - ``o`` --- yields an integer as an octal number\n        - ``s`` --- yields a string as is\n        - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n        - ``X`` --- yields an integer as a hexadecimal number (upper-case)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"format\": \"%s\", \"id\": \"83e5b8b1-33dd-4399-88b6-bac4898d250c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "PrintfTickFormatter", 
    "desc": "Tick formatter based on a printf-style format string."
  }, 
  "Diamond": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"f95e6e4f-1d64-4a46-b77d-7f6ab2093376\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Diamond", 
    "desc": "Render diamond markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Diamond.py\n        :source-position: below"
  }, 
  "Dropdown": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "default_value", 
        "desc": "A default value to set when a split Dropdown's top button is clicked.\n\n    Setting this property will cause the Dropdown to be rendered as\n    split."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Tuple(String, String))", 
        "name": "menu", 
        "desc": "Button's dropdown menu consisting of entries containing item's text and\n    value name. Use ``None`` as a menu separator."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "value", 
        "desc": "A private property used to trigger ``on_click`` event handler."
      }, 
      {
        "default": "Dropdown", 
        "type": "String", 
        "name": "label", 
        "desc": "The text label for the button to display."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the button is activated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(AbstractIcon)", 
        "name": "icon", 
        "desc": "An optional image appearing to the left of button's text."
      }
    ], 
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"default_value\": null, \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"655fff60-8f66-41ec-a584-33072227a620\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Dropdown\", \"menu\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ], 
    "name": "Dropdown", 
    "desc": "A dropdown button."
  }, 
  "StringFormatter": {
    "props": [
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "font_style", 
        "desc": "An optional text font style, e.g. bold, italic."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "text_align", 
        "desc": "An optional text align, i.e. left, center or right."
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "text_color", 
        "desc": "An optional text color. See :class:`bokeh.core.properties.Color` for\n    details."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"font_style\": \"normal\", \"id\": \"151a08db-8db6-46bd-95d1-80a97bc5241a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text_align\": \"left\", \"text_color\": null}", 
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ], 
    "name": "StringFormatter", 
    "desc": "Basic string cell formatter."
  }, 
  "CDSView": {
    "props": [
      {
        "default": null, 
        "type": "Instance(ColumnarDataSource)", 
        "name": "source", 
        "desc": "The ColumnDataSource associated with this view. Used to determine\n    the length of the columns."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Filter))", 
        "name": "filters", 
        "desc": "List of filters that the view comprises."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"filters\": [], \"id\": \"27ea45d9-6faa-4c55-8a96-685656bc590d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"source\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "CDSView", 
    "desc": "A view into a ColumnDataSource that represents a row-wise subset."
  }, 
  "Drag": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"4493abc3-e78b-4cc8-adf1-f328a1854cbb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Gesture"
    ], 
    "name": "Drag", 
    "desc": "A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Title": {
    "props": [
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color values for the text bounding box."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_line_color", 
        "desc": "The line color values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "text", 
        "desc": "The text value to render."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "border_line_join", 
        "desc": "The line join values for the text bounding box."
      }, 
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "text_font_size", 
        "desc": ""
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "text_color", 
        "desc": "A color to use to fill text with.\n\n    Acceptable values are:\n\n    - any of the 147 named `CSS colors`_, e.g ``'green'``, ``'indigo'``\n    - an RGB(A) hex value, e.g., ``'#FF0000'``, ``'#44444444'``\n    - a 3-tuple of integers (r,g,b) between 0 and 255\n    - a 4-tuple of (r,g,b,a) where r,g,b are integers between 0..255 and a is between 0..1\n\n    .. _CSS colors: http://www.w3schools.com/cssref/css_colornames.asp"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom')", 
        "name": "vertical_align", 
        "desc": "Aligment of the text in its enclosing space, *across* the direction of the text."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "border_line_dash_offset", 
        "desc": "The line dash offset values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "border_line_dash", 
        "desc": "The line dash values for the text bounding box."
      }, 
      {
        "default": 0, 
        "type": "Float", 
        "name": "offset", 
        "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\n    different directions based on the location of the title:\n\n        * above: shifts title right\n        * right: shifts title down\n        * below: shifts title right\n        * left: shifts title up"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bold", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "text_font_style", 
        "desc": "A style to use for rendering text.\n\n    Acceptable values are:\n\n    - ``'normal'`` normal text\n    - ``'italic'`` *italic text*\n    - ``'bold'`` **bold text**"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_alpha", 
        "desc": "The line alpha values for the text bounding box."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha values for the text bounding box."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "border_line_cap", 
        "desc": "The line cap values for the text bounding box."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "align", 
        "desc": "Aligment of the text in its enclosing space, *along* the direction of the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "text_alpha", 
        "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are floating point numbers between 0 (transparent)\n    and 1 (opaque)."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "text_font", 
        "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n    ``'helvetica'``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_width", 
        "desc": "The line width values for the text bounding box."
      }
    ], 
    "proto": "{\"align\": \"left\", \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"bevel\", \"border_line_width\": {\"value\": 1}, \"id\": \"ae521c1c-cda2-4c94-838f-2d923f048c40\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"offset\": 0, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"text\": null, \"text_alpha\": {\"value\": 1.0}, \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"10pt\"}, \"text_font_style\": \"bold\", \"vertical_align\": \"bottom\", \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ], 
    "name": "Title", 
    "desc": "Render a single title box as an annotation."
  }, 
  "LogColorMapper": {
    "props": [
      {
        "default": null, 
        "type": "Seq(Color)", 
        "name": "palette", 
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "nan_color", 
        "desc": "Color to be used if data is NaN or otherwise not mappable. (Default: 'gray')"
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "low_color", 
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette."
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "high_color", 
        "desc": "Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "high", 
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "low", 
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"175affe3-dccc-4264-84de-876b823f6a2e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ], 
    "name": "LogColorMapper", 
    "desc": "Map numbers in a range [*low*, *high*] into a sequence of colors\n    (a palette) on a natural logarithm scale.\n\n    For example, if the range is [0, 25] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n                x < 0     : 'red'     # values < low are clamped\n       0     >= x < 2.72  : 'red'     # math.e ** 1\n       2.72  >= x < 7.39  : 'green'   # math.e ** 2\n       7.39  >= x < 20.09 : 'blue'    # math.e ** 3\n       20.09 >= x         : 'blue'    # values > high are clamped\n\n    .. warning::\n        The LogColorMapper only works for images with scalar values that are\n        non-negative."
  }, 
  "TMSTileSource": {
    "props": [
      {
        "default": 156543.03392804097, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "snap_to_zoom", 
        "desc": "Forces initial extents to snap to the closest larger zoom level."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "wrap_around", 
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``."
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"9235d329-7948-4c5d-a68e-1771c3d5bad2\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"snap_to_zoom\": false, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}", 
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ], 
    "name": "TMSTileSource", 
    "desc": "The TMSTileSource contains tile config info and provides urls for\n    tiles based on a templated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``.\n    The defining feature of TMS is the tile-origin in located at the bottom-left.\n\n    The TMSTileSource can also be helpful in implementing tile renderers for\n    custom tile sets, including non-spatial datasets."
  }, 
  "BooleanFilter": {
    "props": [
      {
        "default": null, 
        "type": "Either(Seq(Int), Seq(Bool))", 
        "name": "filter", 
        "desc": "A list that can be either integer indices or booleans representing a row-wise subset of data."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Seq(Bool)", 
        "name": "booleans", 
        "desc": "A list of booleans indicating which rows of data to select."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"booleans\": null, \"filter\": null, \"id\": \"387e2f35-5adc-419d-b815-73e59f5d85b7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.filters.Filter"
    ], 
    "name": "BooleanFilter", 
    "desc": "A BooleanFilter filters data by returning the subset of data corresponding to indices\n    where the values of the booleans array is True."
  }, 
  "CustomJSFilter": {
    "props": [
      {
        "default": "", 
        "type": "String", 
        "name": "code", 
        "desc": "A snippet of JavaScript code to filter data contained in a columnar data source.\n    The code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. The variable\n    ``source`` will contain the data source that is associated with the CDSView this\n    filter is added to.\n\n    The code should either return the indices of the subset or an array of booleans\n    to use to subset data source rows.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            var indices = [];\n            for (var i = 0; i <= source.data['some_column'].length; i++){\n                if (source.data['some_column'][i] == 'some_value') {\n                    indices.push(i)\n                }\n            }\n            return indices;\n            '''\n\n    .. note:: Use ``CustomJS.from_coffeescript()`` for CoffeeScript source code."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, AnyRef)", 
        "name": "args", 
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the callback's code snippet as the values of\n    named parameters to the callback."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Seq(Int), Seq(Bool))", 
        "name": "filter", 
        "desc": "A list that can be either integer indices or booleans representing a row-wise subset of data."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "use_strict", 
        "desc": "Enables or disables automatic insertion of ``\"use strict\";`` into ``code``."
      }
    ], 
    "proto": "{\"args\": {}, \"code\": \"\", \"filter\": null, \"id\": \"c9bf7b7f-c177-4dba-b87e-d2209d56b39c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"use_strict\": false}", 
    "bases": [
      "bokeh.models.filters.Filter"
    ], 
    "name": "CustomJSFilter", 
    "desc": "Filter data sources with a custom defined JavaScript function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh."
  }, 
  "LabelSet": {
    "props": [
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color values for the text bounding box."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_line_color", 
        "desc": "The line color values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "text", 
        "type": "StringSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))", 
        "name": "text", 
        "desc": "The text values to render."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "border_line_join", 
        "desc": "The line join values for the text bounding box."
      }, 
      {
        "default": {
          "value": "12pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "text_font_size", 
        "desc": "The text font size values for the text."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "text_color", 
        "desc": "The text color values for the text."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "text_baseline", 
        "desc": "The text baseline values for the text."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "border_line_dash_offset", 
        "desc": "The line dash offset values for the text bounding box."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "border_line_dash", 
        "desc": "The line dash values for the text bounding box."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "text_line_height", 
        "desc": "The text line height values for the text."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "y_units", 
        "desc": "The unit type for the ys attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "text_font_style", 
        "desc": "The text font style values for the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_alpha", 
        "desc": "The line alpha values for the text bounding box."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha values for the text bounding box."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": 0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the text, as measured from the horizontal.\n\n    .. warning::\n        The center of rotation for canvas and css render_modes is different.\n        For `render_mode=\"canvas\"` the label is rotated from the top-left\n        corner of the annotation, while for `render_mode=\"css\"` the annotation\n        is rotated around it's center."
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the text is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        The CSS labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "border_line_cap", 
        "desc": "The line cap values for the text bounding box."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "text_align", 
        "desc": "The text align values for the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "text_alpha", 
        "desc": "The text alpha values for the text."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"data\": {}, \"id\": \"530bdf6b-4e80-4a06-b962-cab0cb066431\"}", 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "Local data source to use when rendering annotations on the plot."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "x_units", 
        "desc": "The unit type for the xs attribute. Interpreted as \"data space\" units\n    by default."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "text_font", 
        "desc": "The text font values for the text."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x_offset", 
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to locate the text anchors."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to locate the text anchors."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_width", 
        "desc": "The line width values for the text bounding box."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y_offset", 
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"background_fill_alpha\": {\"value\": 1.0}, \"background_fill_color\": {\"value\": null}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"bevel\", \"border_line_width\": {\"value\": 1}, \"id\": \"0cd3d613-4431-486d-9619-5c863d725b22\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"source\": {\"id\": \"8df00bb7-46e8-4a6e-8759-2a8d1f4a1439\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"text_line_height\": 1.2, \"visible\": true, \"x\": null, \"x_offset\": {\"value\": 0}, \"x_range_name\": \"default\", \"x_units\": \"data\", \"y\": null, \"y_offset\": {\"value\": 0}, \"y_range_name\": \"default\", \"y_units\": \"data\"}", 
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ], 
    "name": "LabelSet", 
    "desc": "Render multiple text labels as annotations.\n\n    ``LabelSet`` will render multiple text labels at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space. In this case (as opposed to the single ``Label`` model),\n    ``x`` and ``y`` can also be the name of a column from a\n    :class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\n    will be \"vectorized\" using coordinate values from the specified columns.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\n    may be vectorized by giving the name of a data source column.\n\n    Additionally, the label can be rotated with the ``angle`` property (which\n    may also be a column name.)\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    The data source is provided by setting the ``source`` property."
  }, 
  "AjaxDataSource": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "data_url", 
        "desc": "A URL to to fetch data from."
      }, 
      {
        "default": "{\"id\": \"405eee29-f874-4f1e-af27-99c277291ea3\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "if_modified", 
        "desc": "Whether to include an ``If-Modified-Since`` header in Ajax requests\n    to the server. If this header is supported by the server, then only\n    new data since the last request will be returned."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, String)", 
        "name": "http_headers", 
        "desc": "Specify HTTP headers to set for the Ajax request.\n\n    Example:\n\n    .. code-block:: python\n\n        ajax_source.headers = { 'x-my-custom-header': 'some value' }"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "polling_interval", 
        "desc": "A polling interval (in milliseconds) for updating data source."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "replace", 
        "type": "Enum('replace', 'append')", 
        "name": "mode", 
        "desc": "Whether to append new data to existing data (up to ``max_size``), or to\n    replace existing data entirely."
      }, 
      {
        "default": "application/json", 
        "type": "String", 
        "name": "content_type", 
        "desc": "Set the \"contentType\" parameter for the Ajax request."
      }, 
      {
        "default": "{\"id\": \"c99179dc-eb19-42ac-9c21-489d3fdc905d\"}", 
        "type": "Instance(SelectionPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a SelectionPolicy that determines how selections are set."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "ColumnData(String, Seq(Any))", 
        "name": "data", 
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc."
      }, 
      {
        "default": "POST", 
        "type": "Enum('POST', 'GET')", 
        "name": "method", 
        "desc": "Specifiy the the HTTP method to use for the Ajax request (GET or POST)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "max_size", 
        "desc": "Maximum size of the data columns. If a new fetch would result in columns\n    larger than ``max_size``, then earlier data is dropped to make room."
      }
    ], 
    "proto": "{\"callback\": null, \"content_type\": \"application/json\", \"data\": {}, \"data_url\": null, \"http_headers\": {}, \"id\": \"5968303d-8e92-4290-9a86-cbef343a2ff7\", \"if_modified\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_size\": null, \"method\": \"POST\", \"mode\": \"replace\", \"name\": null, \"polling_interval\": null, \"selected\": {\"id\": \"bfec89e1-efea-4b52-b1ff-b64d14542ad2\", \"type\": \"Selection\"}, \"selection_policy\": {\"id\": \"cf134cba-6b9f-481a-9a8c-d6b6212cfbb6\", \"type\": \"UnionRenderers\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.sources.RemoteSource"
    ], 
    "name": "AjaxDataSource", 
    "desc": "A data source that can populate columns by making Ajax calls to REST\n    enpoints.\n\n    The ``AjaxDataSource`` can be especially useful if you want to make a\n    standalone document (i.e. not backed by the Bokeh server) that can still\n    dynamically update using an existing REST API.\n\n    The response from the REST API should match the ``.data`` proeprty of a\n    standard ``ColumnDataSource``, i.e. a JSON dict that maps names to arrays\n    of values:\n\n    .. code-block:: python\n\n        {\n            'x' : [1, 2, 3, ...],\n            'y' : [9, 3, 2, ...]\n        }\n\n    A full example can be seen at :bokeh-tree:`examples/howto/ajax_source.py`"
  }, 
  "PanTool": {
    "props": [
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"id\": \"d3c540aa-fea9-4e43-a2dc-dbd9ece09365\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Drag"
    ], 
    "name": "PanTool", 
    "desc": "*toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging\n    a mouse, or on touch devices by dragging a finger or stylus, across\n    the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single\n    axis\" panning. For instance, dragging in the vertical border or axis\n    will effect a pan in the vertical direction only, with the horizontal\n    dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 18pt"
  }, 
  "Slope": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the line."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the line."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the line."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "gradient", 
        "desc": "The gradient of the line, in data units"
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the line."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the line."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the line."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the line."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "y_intercept", 
        "desc": "The y intercept of the line, in data units"
      }
    ], 
    "proto": "{\"gradient\": null, \"id\": \"4b7c51e8-664a-4fe6-abaf-b626a97a16f7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_intercept\": null, \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Slope", 
    "desc": "Render a sloped line as an annotation."
  }, 
  "EdgesAndLinkedNodes": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"2a54b3c0-3a93-486a-b52f-8ca0245c689a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ], 
    "name": "EdgesAndLinkedNodes", 
    "desc": "With the EdgesAndLinkedNodes policy, inspection or selection of graph\n    edges will result in the inspection or selection of the edge and of the\n    linked graph nodes. There is no direct selection or inspection of graph\n    nodes."
  }, 
  "CustomJSHover": {
    "props": [
      {
        "default": "", 
        "type": "String", 
        "name": "code", 
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n    ``value`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. Additionally, the\n    variable ``special_vars`` will be available, and will provide a dict\n    with the following contents:\n\n    * ``x`` data-space x-coordinate of the mouse\n    * ``y`` data-space y-coordinate of the mouse\n    * ``sx`` screen-space x-coordinate of the mouse\n    * ``sy`` screen-space y-coordinate of the mouse\n    * ``data_x`` data-space x-coordinate of the hovered glyph\n    * ``data_y`` data-space y-coordinate of the hovered glyph\n    * ``indices`` column indices of all currently hovered glyphs\n\n    If the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\n    then a ``segment_index`` key will also be present.\n\n    Finally, the value of the format passed in the tooltip specification is\n    available as the ``format`` variable.\n\n    The snippet will be made into the body of a function and therefore requires\n    a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            return value + \" total\"\n            '''"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Instance(Model))", 
        "name": "args", 
        "desc": "A mapping of names to Bokeh plot objects. These objects are made\n    available to the callback code snippet as the values of named\n    parameters to the callback."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"20f3b5de-77a5-4cb3-94d5-e5e29e79dc43\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "CustomJSHover", 
    "desc": "Define a custom formatter to apply to a hover tool field.\n\n    This model can be configured with JavaScript code to format hover tooltips.\n    The JavaScript code has access to the current value to format, some special\n    variables, and any format configured on the tooltip. The variable ``value``\n    will contain the untransformed value. The variable ``special_vars`` will\n    provide a dict with the following contents:\n\n    * ``x`` data-space x-coordinate of the mouse\n    * ``y`` data-space y-coordinate of the mouse\n    * ``sx`` screen-space x-coordinate of the mouse\n    * ``sy`` screen-space y-coordinate of the mouse\n    * ``data_x`` data-space x-coordinate of the hovered glyph\n    * ``data_y`` data-space y-coordinate of the hovered glyph\n    * ``indices`` column indices of all currently hovered glyphs\n    * ``name`` value of the ``name`` property of the hovered glyph renderer\n\n    If the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\n    then a ``segment_index`` key will also be present.\n\n    Finally, the value of the format passed in the tooltip specification is\n    available as the ``format`` variable.\n\n    Example:\n\n        As an example, the following code adds a custom formatter to format\n        WebMercator northing coordinates (in meters) as a latitude:\n\n        .. code-block:: python\n\n            lat_custom = CustomJSHover(code=\"\"\"\n                var projections = require(\"core/util/projections\");\n                var x = special_vars.x\n                var y = special_vars.y\n                var coords = projections.wgs84_mercator.inverse([x, y])\n                return \"\" + coords[1]\n            \"\"\")\n\n            p.add_tools(HoverTool(\n                tooltips=[( 'lat','@y{custom}' )],\n                formatters=dict(y=lat_custom)\n            ))\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh."
  }, 
  "Oval": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the ovals."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the ovals."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the ovals."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "height", 
        "desc": "The overall height of each oval."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the ovals."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the ovals."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the ovals."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the ovals."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the ovals."
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angle the ovals are rotated from horizontal. [rad]"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the ovals."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "height_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "width", 
        "desc": "The overall widths of each oval."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the centers of the ovals."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the centers of the ovals."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "width_units", 
        "desc": ""
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"fc80b026-2adf-44af-bde9-956ac5e6d71e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Oval", 
    "desc": "Render ovals.\n\n    This glyph renders ovals using B\u00e9zier curves, which are similar,\n    but not identical to ellipses. In particular, widths equal to heights\n    will not render circles. Use the ``Ellipse`` glyph for that.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Oval.py\n        :source-position: below"
  }, 
  "Column": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(LayoutDOM))", 
        "name": "children", 
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets."
      }
    ], 
    "proto": "{\"children\": [], \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"dba181d5-c8da-4d5d-b469-4a106f39d7ae\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.Box"
    ], 
    "name": "Column", 
    "desc": "Lay out child components in a single vertical row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument."
  }, 
  "ImageURL": {
    "props": [
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "h_units", 
        "desc": ""
      }, 
      {
        "default": 0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the images, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "dilate", 
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush."
      }, 
      {
        "default": null, 
        "type": "StringSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))", 
        "name": "url", 
        "desc": "The URLs to retrieve images from.\n\n    .. note::\n        The actual retrieving and loading of the images happens on\n        the client."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "h", 
        "desc": "The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "w_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "global_alpha", 
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself)."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "retry_timeout", 
        "desc": "Timeout (in ms) between retry attempts to load the image from the\n    specified URL. Default is zero ms."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "w", 
        "desc": "The width of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here)."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "retry_attempts", 
        "desc": "Number of attempts to retry loading the images from the specified URL.\n    Default is zero."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to locate the image anchors."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to locate the image anchors."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "top_left", 
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')", 
        "name": "anchor", 
        "desc": "What position of the image should be anchored at the `x`, `y`\n    coordinates."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"anchor\": \"top_left\", \"angle\": {\"units\": \"rad\", \"value\": 0}, \"dilate\": false, \"global_alpha\": 1.0, \"h\": null, \"id\": \"f5e77cc6-6216-44de-8482-f4e143ba96d2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"retry_attempts\": 0, \"retry_timeout\": 0, \"subscribed_events\": [], \"tags\": [], \"url\": null, \"w\": null, \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "ImageURL", 
    "desc": "Render images loaded from given URLs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/ImageURL.py\n        :source-position: below"
  }, 
  "FixedTicker": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "Seq(Float)", 
        "name": "ticks", 
        "desc": "List of major tick locations."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "Seq(Float)", 
        "name": "minor_ticks", 
        "desc": "List of minor tick locations."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"71662ff7-f39b-4598-b1e4-e75d0bf5141b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"minor_ticks\": [], \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": [], \"ticks\": []}", 
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ], 
    "name": "FixedTicker", 
    "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n    .. note::\n        The ``desired_num_ticks`` property is ignored by this Ticker."
  }, 
  "GraphRenderer": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering graphs on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": "{\"id\": \"48ca5926-43b4-414c-82d1-bf1cfddbcec6\"}", 
        "type": "Instance(GraphHitTestPolicy)", 
        "name": "inspection_policy", 
        "desc": "An instance of a GraphHitTestPolicy that provides the logic for inspection\n    of graph components."
      }, 
      {
        "default": "{\"data_source\": {\"id\": \"c544a620-f7c9-4b81-ac6d-0ed499d953d3\", \"type\": \"ColumnDataSource\"}, \"glyph\": {\"id\": \"e011ff2c-2a9c-48b6-b5ae-424e33cf7872\", \"type\": \"Circle\"}, \"id\": \"84d7d3ed-5c60-44d4-aca1-5273c3e7ac9f\", \"view\": {\"id\": \"af9cb84d-526f-4db6-988c-567377a125a9\", \"type\": \"CDSView\"}}", 
        "type": "Instance(GlyphRenderer)", 
        "name": "node_renderer", 
        "desc": "Instance of a GlyphRenderer containing an XYGlyph that will be rendered\n    as the graph nodes."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering graphs on the plot. If unset, use the\n    default -range."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(LayoutProvider)", 
        "name": "layout_provider", 
        "desc": "An instance of a LayoutProvider that supplies the layout of the network\n    graph in cartesian space."
      }, 
      {
        "default": "{\"id\": \"4ffd82dd-1bb3-494b-b1b8-98e93b688ae1\"}", 
        "type": "Instance(GraphHitTestPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a GraphHitTestPolicy that provides the logic for selection\n    of graph components."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "{\"data_source\": {\"id\": \"a5b20f62-f8d9-4d38-87a0-8e3bc5de073f\", \"type\": \"ColumnDataSource\"}, \"glyph\": {\"id\": \"925268bd-8d5f-4446-9c32-7ad2f41145a4\", \"type\": \"MultiLine\"}, \"id\": \"ebeff1d8-92df-452d-9239-7c6704942450\", \"view\": {\"id\": \"be0495aa-ca34-4a91-868c-c9edb05ebf2d\", \"type\": \"CDSView\"}}", 
        "type": "Instance(GlyphRenderer)", 
        "name": "edge_renderer", 
        "desc": "Instance of a GlyphRenderer containing an MultiLine Glyph that will be\n    rendered as the graph edges."
      }, 
      {
        "default": "glyph", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"edge_renderer\": {\"id\": \"4def0379-0b36-4f0c-90e3-9fb5239cffe4\", \"type\": \"GlyphRenderer\"}, \"id\": \"e9ca28a8-4074-4153-b589-245df0325f25\", \"inspection_policy\": {\"id\": \"d7d05f98-4b5d-4af4-b2d4-8ae9b9678959\", \"type\": \"NodesOnly\"}, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"layout_provider\": null, \"level\": \"glyph\", \"name\": null, \"node_renderer\": {\"id\": \"e90d97c8-c169-4eb6-9dd1-f67f57f52576\", \"type\": \"GlyphRenderer\"}, \"selection_policy\": {\"id\": \"99d65191-e68e-4aaf-8046-f4f589b9ec3c\", \"type\": \"NodesOnly\"}, \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ], 
    "name": "GraphRenderer", 
    "desc": ""
  }, 
  "AbstractIcon": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"6fc3e0d8-7984-43ad-9747-512ef871a8e1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "AbstractIcon", 
    "desc": "An abstract base class for icon widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "TimeEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"5203eb23-3a62-4ae0-bdf3-b40f81b2b555\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "TimeEditor", 
    "desc": "Spinner-based time cell editor."
  }, 
  "HoverTool": {
    "props": [
      {
        "default": [
          [
            "index", 
            "$index"
          ], 
          [
            "data (x, y)", 
            "($x, $y)"
          ], 
          [
            "screen (x, y)", 
            "($sx, $sy)"
          ]
        ], 
        "type": "Either(String, List(Tuple(String, String)))", 
        "name": "tooltips", 
        "desc": "The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of hovered point in the data source\n    :$name: value of the ``name`` property of the hovered glyph renderer\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: 'hex' (to display the color as a hex value), and\n        'swatch' to also display a small color swatch.\n\n    Field names that begin with ``@`` are associated with columns in a\n    ``ColumnDataSource``. For instance the field name ``\"@price\"`` will\n    display values from the ``\"price\"`` column whenever a hover is triggered.\n    If the hover is for the 17th glyph, then the hover tooltip will\n    correspondingly display the 17th price value.\n\n    Note that if a column name contains spaces, the it must be supplied by\n    surrounding it in curly braces, e.g. ``@{adjusted close}`` will display\n    values from a column named ``\"adjusted close\"``.\n\n    Sometimes (especially with stacked charts) it is desirable to allow the\n    name of the column be specified indirectly. The field name ``@$name`` is\n    distinguished in that it will look up the ``name`` field on the hovered\n    glyph renderer, and use that value as the column name. For instance, if\n    a user hovers with the name ``\"US East\"``, then ``@$name`` is equivalent to\n    ``@{US East}``.\n\n    By default, values for fields (e.g. ``@foo``) are displayed in a basic\n    numeric format. However it is possible to control the formatting of values\n    more precisely. Fields can be modified by appending a format specified to\n    the end in curly braces. Some examples are below.\n\n    .. code-block:: python\n\n        \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n        \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n        \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\n    Specifying a format ``{safe}`` after a field name will override automatic\n    escaping of the tooltip data source. Any HTML tags in the data tags will\n    be rendered as HTML in the resulting HoverTool output. See\n    :ref:`custom_hover_tooltip` for a more detailed example.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``. However, if a ``dict`` is used,\n        the visual presentation order is unspecified."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')", 
        "name": "attachment", 
        "desc": "Whether the tooltip should be displayed to the left or right of the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, List(Instance(Renderer)))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to hit test against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Either(Enum('numeral', 'datetime', 'printf'), Instance(CustomJSHover)))", 
        "name": "formatters", 
        "desc": "Specify the formatting scheme for data source columns, e.g.\n\n    .. code-block:: python\n\n        tool.formatters = dict(date=\"datetime\")\n\n    will cause format specifications for the \"date\" column to be interpreted\n    according to the \"datetime\" formatting scheme. The following schemed are\n    available:\n\n    :``\"numeral\"``:\n        Provides a wide variety of formats for numbers, currency, bytes, times,\n        and percentages. The full set of formats can be found in the\n        |NumeralTickFormatter| reference documentation.\n\n    :``\"datetime\"``:\n        Provides formats for date and time values. The full set of formats is\n        listed in the |DatetimeTickFormatter| reference documentation.\n\n    :``\"printf\"``:\n        Provides formats similar to C-style \"printf\" type specifiers. See the\n        |PrintfTickFormatter| reference documentation for complete details.\n\n    If no formatter is specified for a column name, the default ``\"numeral\"``\n    formatter is assumed.\n\n    .. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n    .. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n    .. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`"
      }, 
      {
        "default": "nearest", 
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')", 
        "name": "line_policy", 
        "desc": "When showing tooltips for lines, designates whether the tooltip position\n    should be the \"previous\" or \"next\" points on the line, the \"nearest\" point\n    to the current mouse position, or \"interpolate\" along the line to the\n    current mouse position."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the input's value changes. The\n    cb_data parameter that is available to the Callback code will contain two\n    HoverTool specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor"
      }, 
      {
        "default": "snap_to_data", 
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')", 
        "name": "point_policy", 
        "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "toggleable", 
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\n    inpection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_arrow", 
        "desc": "Whether tooltip's arrow should be showed."
      }, 
      {
        "default": "center", 
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right')", 
        "name": "anchor", 
        "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph."
      }, 
      {
        "default": "mouse", 
        "type": "Enum('mouse', 'hline', 'vline')", 
        "name": "mode", 
        "desc": "Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions."
      }
    ], 
    "proto": "{\"anchor\": \"center\", \"attachment\": \"horizontal\", \"callback\": null, \"formatters\": {}, \"id\": \"e9bc4453-1aed-4d7e-91ed-61edaa15fc24\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_policy\": \"nearest\", \"mode\": \"mouse\", \"name\": null, \"names\": [], \"point_policy\": \"snap_to_data\", \"renderers\": \"auto\", \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"toggleable\": true, \"tooltips\": [[\"index\", \"$index\"], [\"data (x, y)\", \"($x, $y)\"], [\"screen (x, y)\", \"($sx, $sy)\"]]}", 
    "bases": [
      "bokeh.models.tools.Inspection"
    ], 
    "name": "HoverTool", 
    "desc": "*toolbar icon*: |crosshair_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at\n    all times, but can be configured in the inspector's menu associated\n    with the *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever\n    the cursor is directly over a glyph. The data to show comes from the\n    glyph's data source, and what is to be displayed is configurable with\n    the ``tooltips`` attribute that maps display names to columns in the\n    data source, or to special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n            (\"baz\", \"@baz{safe}\"),\n            (\"total\", \"@total{$0,0.00}\"\n        ]\n\n    You can also supply a ``Callback`` to the HoverTool, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n        When supplying a callback or custom template, the explicit intent\n        of this Bokeh Model is to embed *raw HTML and  JavaScript code* for\n        a browser to execute. If any part of the code is derived from untrusted\n        user inputs, then you must take appropriate care to sanitize the user\n        input prior to passing to Bokeh.\n\n    Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * image\n            * image_rgba\n            * image_url\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Hover.png\n        :height: 18pt"
  }, 
  "Filter": {
    "props": [
      {
        "default": null, 
        "type": "Either(Seq(Int), Seq(Bool))", 
        "name": "filter", 
        "desc": "A list that can be either integer indices or booleans representing a row-wise subset of data."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"filter\": null, \"id\": \"ef2b6a7e-6385-4a03-b8e9-0295544e3926\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Filter", 
    "desc": "A Filter model represents a filtering operation that returns a row-wise subset of\n    data when applied to a ColumnDataSource."
  }, 
  "CategoricalAxis": {
    "props": [
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "subgroup_text_line_height", 
        "desc": "The text line height of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "group_text_font", 
        "desc": "The text font of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": "bold", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "subgroup_text_font_style", 
        "desc": "The text font style of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "parallel", 
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)", 
        "name": "group_label_orientation", 
        "desc": "What direction the group label text should be oriented.\n\n    If a number is supplied, the angle of the text is measured from horizontal.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "separator_line_cap", 
        "desc": "The line cap of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "separator_line_join", 
        "desc": "The line join of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": "{\"id\": \"b140001f-5a9d-4537-a187-16eb1662b37e\"}", 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "subgroup_text_font", 
        "desc": "The text font of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "group_text_align", 
        "desc": "The text align of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "bold", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "group_text_font_style", 
        "desc": "The text font style of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "separator_line_dash_offset", 
        "desc": "The line dash offset of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "separator_line_dash", 
        "desc": "The line dash of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "subgroup_text_baseline", 
        "desc": "The text baseline of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "group_text_line_height", 
        "desc": "The text line height of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"887bfca9-8102-4988-b6de-940eacfc3ab8\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "subgroup_text_align", 
        "desc": "The text align of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "parallel", 
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)", 
        "name": "subgroup_label_orientation", 
        "desc": "What direction the subgroup label text should be oriented.\n\n    If a number is supplied, the angle of the text is measured from horizontal.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "separator_line_alpha", 
        "desc": "The line alpha of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "subgroup_text_font_size", 
        "desc": "The text font size of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "group_text_alpha", 
        "desc": "The text alpha of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": "grey", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "group_text_color", 
        "desc": "The text color of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "subgroup_text_color", 
        "desc": "The text color of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": 2, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "separator_line_width", 
        "desc": "The line width of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "group_text_baseline", 
        "desc": "The text baseline of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "group_text_font_size", 
        "desc": "The text font size of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect."
      }, 
      {
        "default": "lightgrey", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "separator_line_color", 
        "desc": "The line color of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "subgroup_text_alpha", 
        "desc": "The text alpha of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": {\"id\": \"cc0bbc54-c4bc-4072-99ce-dd2746c64a21\", \"type\": \"CategoricalTickFormatter\"}, \"group_label_orientation\": \"parallel\", \"group_text_align\": \"left\", \"group_text_alpha\": {\"value\": 1.0}, \"group_text_baseline\": \"bottom\", \"group_text_color\": {\"value\": \"grey\"}, \"group_text_font\": \"helvetica\", \"group_text_font_size\": {\"value\": \"8pt\"}, \"group_text_font_style\": \"bold\", \"group_text_line_height\": 1.2, \"id\": \"0b81eff4-5305-48f1-b9c2-918ae5a4b9a2\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"separator_line_alpha\": {\"value\": 1.0}, \"separator_line_cap\": \"butt\", \"separator_line_color\": {\"value\": \"lightgrey\"}, \"separator_line_dash\": [], \"separator_line_dash_offset\": 0, \"separator_line_join\": \"bevel\", \"separator_line_width\": {\"value\": 2}, \"subgroup_label_orientation\": \"parallel\", \"subgroup_text_align\": \"left\", \"subgroup_text_alpha\": {\"value\": 1.0}, \"subgroup_text_baseline\": \"bottom\", \"subgroup_text_color\": {\"value\": \"#444444\"}, \"subgroup_text_font\": \"helvetica\", \"subgroup_text_font_size\": {\"value\": \"8pt\"}, \"subgroup_text_font_style\": \"bold\", \"subgroup_text_line_height\": 1.2, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"cfd2bd40-f22a-4a64-bcbd-80fa07434423\", \"type\": \"CategoricalTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.Axis"
    ], 
    "name": "CategoricalAxis", 
    "desc": "An axis that displays ticks and labels for categorical ranges.\n\n    The ``CategoricalAxis`` can handle factor ranges with up to two levels of\n    nesting, including drawing a seperator line between top-level groups of\n    factors."
  }, 
  "CheckboxEditor": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"851d5717-24b1-44f3-b405-4f96d9ea7d36\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "CheckboxEditor", 
    "desc": "Boolean value cell editor."
  }, 
  "Square": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"1b61a038-af22-4c9b-8211-cc6caa2820a8\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Square", 
    "desc": "Render a square marker, optionally rotated. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Square.py\n        :source-position: below"
  }, 
  "NodesAndLinkedEdges": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"b5746810-10f5-4989-9c0e-908caac957bb\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ], 
    "name": "NodesAndLinkedEdges", 
    "desc": "With the NodesAndLinkedEdges policy, inspection or selection of graph\n    nodes will result in the inspection or selection of the node and of the\n    linked graph edges. There is no direct selection or inspection of graph\n    edges."
  }, 
  "Tooltip": {
    "props": [
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "inner_only", 
        "desc": "Whether to display outside a central plot frame area."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')", 
        "name": "attachment", 
        "desc": "Whether the tooltip should be displayed to the left or right of the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_arrow", 
        "desc": "Whether tooltip's arrow should be showed."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"attachment\": \"horizontal\", \"id\": \"09e6c407-8064-4413-a0fc-855ce2614a81\", \"inner_only\": true, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"name\": null, \"plot\": null, \"show_arrow\": true, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Tooltip", 
    "desc": "Render a tooltip.\n\n    .. note::\n        This model is currently managed by BokehJS and is not useful\n        directly from python."
  }, 
  "ButtonGroup": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"328b82af-954d-4ed8-9a99-d94c2db65e20\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup", 
      "bokeh.models.widgets.buttons.ButtonLike"
    ], 
    "name": "ButtonGroup", 
    "desc": "Abstract base class for groups with items rendered as buttons.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "PolyDrawTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_objects", 
        "desc": "Defines a limit on the number of patches or multi-lines that can\n    be drawn. By default there is no limit on the number of objects,\n    but if enabled the oldest drawn patch or multi-line will be\n    dropped to make space for the new patch or multi-line."
      }, 
      {
        "default": null, 
        "type": "Instance(GlyphRenderer)", 
        "name": "vertex_renderer", 
        "desc": "The renderer used to render the vertices of a selected line or\n    polygon."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "drag", 
        "desc": "Enables dragging of existing patches and multi-lines on pan events."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }
    ], 
    "proto": "{\"custom_icon\": null, \"custom_tooltip\": null, \"drag\": true, \"empty_value\": null, \"id\": \"b904f301-2ba4-46c8-9737-f17df8e4c70b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_objects\": 0, \"renderers\": [], \"subscribed_events\": [], \"tags\": [], \"vertex_renderer\": null}", 
    "bases": [
      "bokeh.models.tools.EditTool", 
      "bokeh.models.tools.Drag", 
      "bokeh.models.tools.Tap"
    ], 
    "name": "PolyDrawTool", 
    "desc": "*toolbar icon*: |poly_draw_icon|\n\n    The PolyDrawTool allows drawing, selecting and deleting\n    ``Patches`` and ``MultiLine`` glyphs on one or more renderers by\n    editing the underlying ColumnDataSource data. Like other drawing\n    tools, the renderers that are to be edited must be supplied\n    explicitly as a list.\n\n    The tool will automatically modify the columns on the data source\n    corresponding to the ``xs`` and ``ys`` values of the glyph. Any\n    additional columns in the data source will be padded with the\n    declared ``empty_value``, when adding a new point.\n\n    If a ``vertex_renderer`` with an point-like glyph is supplied the\n    PolyDrawTool will use it to display the vertices of the\n    multi-lines/patches on all supplied renderers. This also enables\n    the ability to snap to existing vertices while drawing.\n\n    The supported actions include:\n\n    * Add patch/multi-line: Double tap to add the first vertex, then\n      use tap to add each subsequent vertex, to finalize the draw\n      action double tap to insert the final vertex or press the <<esc>\n      key.\n\n    * Move patch/multi-line: Tap and drag an existing\n      patch/multi-line, the point will be dropped once you let go of\n      the mouse button.\n\n    * Delete patch/multi-line: Tap a patch/multi-line to select it\n      then press <<backspace>> key while the mouse is within the plot\n      area.\n\n    .. |poly_draw_icon| image:: /_images/icons/PolyDraw.png\n        :height: 18pt"
  }, 
  "Action": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"597dbfe8-fd90-4f72-bd31-eb8546ac31c0\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Tool"
    ], 
    "name": "Action", 
    "desc": "A base class for tools that are buttons in the toolbar.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "LinearColorMapper": {
    "props": [
      {
        "default": null, 
        "type": "Seq(Color)", 
        "name": "palette", 
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "nan_color", 
        "desc": "Color to be used if data is NaN or otherwise not mappable. (Default: 'gray')"
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "low_color", 
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette."
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "high_color", 
        "desc": "Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "high", 
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "low", 
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"72077adc-96e5-4de2-b93e-7a6840ff6286\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ], 
    "name": "LinearColorMapper", 
    "desc": "Map numbers in a range [*low*, *high*] linearly into a sequence of\n    colors (a palette).\n\n    For example, if the range is [0, 99] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n             x < 0  : 'red'     # values < low are clamped\n        0 >= x < 33 : 'red'\n       33 >= x < 66 : 'green'\n       66 >= x < 99 : 'blue'\n       99 >= x      : 'blue'    # values > high are clamped"
  }, 
  "CumSum": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "field", 
        "desc": "The name of a ColumnDataSource column to cumulatively sum for new values."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "include_zero", 
        "desc": "Whether to include zero at the start of the result. Note that the length\n    of the result is always the same as the input column. Therefore if this\n    property is True, then the last value of the column will not be included\n    in the sum.\n\n    .. code-block:: python\n\n        source = ColumnDataSource(data=dict(foo=[1, 2, 3, 4]))\n\n        CumSum(field='foo')\n        # -> [1, 3, 6, 10]\n\n        CumSum(field='foo', include_zero=True)\n        # -> [0, 1, 3, 6]"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"field\": null, \"id\": \"7251c4c3-cece-4078-b622-5ed9081d7035\", \"include_zero\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.expressions.Expression"
    ], 
    "name": "CumSum", 
    "desc": "An expression for generating arrays by cumulatively summing a single\n    column from a ``ColumnDataSource``."
  }, 
  "DataTable": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "fit_columns", 
        "desc": "Whether columns should be fit to the available width. This results in no\n    horizontal scrollbar showing up, but data can get unreadable if there is\n    no enough space available. If set to ``True``, columns' width is\n    understood as maximum width."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "editable", 
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable."
      }, 
      {
        "default": 400, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "#", 
        "type": "String", 
        "name": "index_header", 
        "desc": "The column header to display for the index column, if it is present."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "index_position", 
        "desc": "Where among the list of columns to insert a column displaying the row\n    index. Negative indices are supported, and specify an index position\n    from the end of the list of columns (i.e. standard Python behaviour).\n\n    To prevent the index column from being added, set to None.\n\n    If the absolute value of index_position  is larger than the length of\n    the columns, then the index will appear at the beginning or end, depending\n    on the sign."
      }, 
      {
        "default": 40, 
        "type": "Int", 
        "name": "index_width", 
        "desc": "The width of the index column, if present."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Either(Bool, Enum('checkbox'))", 
        "name": "selectable", 
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "sortable", 
        "desc": "Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "reorderable", 
        "desc": "Allows the reordering of a tables's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order."
      }, 
      {
        "default": null, 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "The source of data for the widget."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "header_row", 
        "desc": "Whether to show a header row with column names at the top of the table."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "scroll_to_selection", 
        "desc": "Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport."
      }, 
      {
        "default": [], 
        "type": "List(Instance(TableColumn))", 
        "name": "columns", 
        "desc": "The list of child column widgets."
      }, 
      {
        "default": null, 
        "type": "Instance(CDSView)", 
        "name": "view", 
        "desc": "A view into the data source to use when rendering table rows. A default view\n    of the entire data source is created if a view is not passed in during\n    initialization."
      }
    ], 
    "proto": "{\"columns\": [], \"css_classes\": [], \"disabled\": false, \"editable\": false, \"fit_columns\": true, \"header_row\": true, \"height\": 400, \"id\": \"53916c42-fd05-4693-85c9-bd838edc1209\", \"index_header\": \"#\", \"index_position\": 0, \"index_width\": 40, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"reorderable\": true, \"scroll_to_selection\": true, \"selectable\": true, \"sizing_mode\": \"fixed\", \"sortable\": true, \"source\": null, \"subscribed_events\": [], \"tags\": [], \"view\": {\"id\": \"e8522f8d-2eaa-45df-bad7-d1dd2a6369ea\", \"type\": \"CDSView\"}, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ], 
    "name": "DataTable", 
    "desc": "Two dimensional grid for visualisation and editing large amounts\n    of data."
  }, 
  "UndoTool": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"78a41c95-4fac-485f-951f-cfb800e5e25e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Action"
    ], 
    "name": "UndoTool", 
    "desc": "*toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 18pt"
  }, 
  "Wedge": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the wedges."
      }, 
      {
        "default": "anticlock", 
        "type": "Enum('clock', 'anticlock')", 
        "name": "direction", 
        "desc": "Which direction to stroke between the start and end angles."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the wedges."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the wedges."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "start_angle_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "radius", 
        "desc": "Radii of the wedges."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "radius_units", 
        "desc": ""
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the wedges."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the wedges."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the wedges."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the wedges."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "start_angle", 
        "desc": "The angles to start the wedges, as measured from the horizontal."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the wedges."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "end_angle", 
        "desc": "The angles to end the wedges, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the points of the wedges."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the points of the wedges."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "end_angle_units", 
        "desc": ""
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the wedges."
      }
    ], 
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"c4b271de-90c1-441d-873d-90a29e947a0a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Wedge", 
    "desc": "Render wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Wedge.py\n        :source-position: below"
  }, 
  "ContinuousAxis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": null, 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": null, \"id\": \"f22bad54-8413-477e-ae33-d67dc80458cc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.Axis"
    ], 
    "name": "ContinuousAxis", 
    "desc": "A base class for all numeric, non-categorical axes types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "DataRange": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the range is updated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"2aa2d0c5-c467-42f9-904f-aa9fb8719850\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.ranges.Range"
    ], 
    "name": "DataRange", 
    "desc": "A base class for all data range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "BBoxTileSource": {
    "props": [
      {
        "default": false, 
        "type": "Bool", 
        "name": "use_latlon", 
        "desc": "Flag which indicates option to output {XMIN},{YMIN},{XMAX},{YMAX} in meters or latitude and longitude."
      }, 
      {
        "default": 156543.03392804097, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "snap_to_zoom", 
        "desc": "Forces initial extents to snap to the closest larger zoom level."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "wrap_around", 
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``."
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"11a5bc01-51b6-4302-a987-83dfcf16b647\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"snap_to_zoom\": false, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"use_latlon\": false, \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}", 
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ], 
    "name": "BBoxTileSource", 
    "desc": "The BBoxTileSource has the same default tile origin as the\n    WMTSTileSource but requested tiles use a ``{XMIN}``, ``{YMIN}``,\n    ``{XMAX}``, ``{YMAX}`` e.g. ``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``."
  }, 
  "Text": {
    "props": [
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the text, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to locate the text anchors."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "text", 
        "type": "StringSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))", 
        "name": "text", 
        "desc": "The text values to render."
      }, 
      {
        "default": {
          "value": "12pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "text_font_size", 
        "desc": "The text font size values for the text."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "text_align", 
        "desc": "The text align values for the text."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "text_alpha", 
        "desc": "The text alpha values for the text."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "text_color", 
        "desc": "The text color values for the text."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "text_line_height", 
        "desc": "The text line height values for the text."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "text_font_style", 
        "desc": "The text font style values for the text."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x_offset", 
        "desc": "Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "text_baseline", 
        "desc": "The text baseline values for the text."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to locate the text anchors."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "text_font", 
        "desc": "The text font values for the text."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y_offset", 
        "desc": "Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in screen units from a given data position."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0}, \"id\": \"f3ad4f10-34b9-4cba-9351-4ba58dc2f7e9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"text\": {\"field\": \"text\"}, \"text_align\": \"left\", \"text_alpha\": {\"value\": 1.0}, \"text_baseline\": \"bottom\", \"text_color\": {\"value\": \"#444444\"}, \"text_font\": \"helvetica\", \"text_font_size\": {\"value\": \"12pt\"}, \"text_font_style\": \"normal\", \"text_line_height\": 1.2, \"x\": null, \"x_offset\": {\"value\": 0}, \"y\": null, \"y_offset\": {\"value\": 0}}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Text", 
    "desc": "Render text.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Text.py\n        :source-position: below"
  }, 
  "VBar": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the vertical bars."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the vertical bars."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the vertical bars."
      }, 
      {
        "default": 0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "bottom", 
        "desc": "The y-coordinates of the bottom edges."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "top", 
        "desc": "The y-coordinates of the top edges."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the vertical bars."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "width", 
        "desc": "The widths of the vertical bars."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the vertical bars."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the vertical bars."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the vertical bars."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the centers of the vertical bars."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the vertical bars."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the vertical bars."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"bottom\": {\"value\": 0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"b330b032-dcf9-4862-a84e-87f41baddd1f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"top\": null, \"width\": null, \"x\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "VBar", 
    "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/VBar.py\n        :source-position: below"
  }, 
  "BasicTickFormatter": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "use_scientific", 
        "desc": "Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "power_limit_high", 
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Int)", 
        "name": "precision", 
        "desc": "How many digits of precision to display in tick labels."
      }, 
      {
        "default": -3, 
        "type": "Int", 
        "name": "power_limit_low", 
        "desc": "Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"f3f089c3-6793-4180-83e0-7f47c649e620\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"power_limit_high\": 5, \"power_limit_low\": -3, \"precision\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"use_scientific\": true}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "BasicTickFormatter", 
    "desc": "Display tick values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default."
  }, 
  "WMTSTileSource": {
    "props": [
      {
        "default": 156543.03392804097, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "snap_to_zoom", 
        "desc": "Forces initial extents to snap to the closest larger zoom level."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "wrap_around", 
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``."
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"42fc6e27-1349-473c-9997-104cea3d56fc\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"snap_to_zoom\": false, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}", 
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ], 
    "name": "WMTSTileSource", 
    "desc": "The ``WMTSTileSource`` behaves much like ``TMSTileSource`` but has its\n    tile-origin in the top-left.\n\n    This is the most common used tile source for web mapping applications.\n    Such companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\n    service which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``."
  }, 
  "ColumnarDataSource": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"id\": \"58920e23-12da-47ba-85a0-52857ad0c36f\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": "{\"id\": \"664b38fb-4313-40b1-a412-9a1138e4c628\"}", 
        "type": "Instance(SelectionPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a SelectionPolicy that determines how selections are set."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"864af5f4-14ae-4ed7-acd5-3c3a16527f34\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"id\": \"8cb8e045-09ce-4ab5-ae1e-c8eb31cf853d\", \"type\": \"Selection\"}, \"selection_policy\": {\"id\": \"2bf09797-4896-4c29-8266-dcf4c6779376\", \"type\": \"UnionRenderers\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.sources.DataSource"
    ], 
    "name": "ColumnarDataSource", 
    "desc": "A base class for data source types, which can be mapped onto\n    a columnar format.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Legend": {
    "props": [
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color for the legend background style."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "vertical", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Whether the legend entries should be placed vertically or horizontally\n    when they are drawn."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "middle", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "label_text_baseline", 
        "desc": "The text baseline for the legend labels."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "border_line_join", 
        "desc": "The line join for the legend border outline."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "label_text_font_style", 
        "desc": "The text font style for the legend labels."
      }, 
      {
        "default": 20, 
        "type": "Int", 
        "name": "label_width", 
        "desc": "The minimum width (in pixels) of the area that legend labels should occupy."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "label_text_alpha", 
        "desc": "The text alpha for the legend labels."
      }, 
      {
        "default": [], 
        "type": "List(Instance(LegendItem))", 
        "name": "items", 
        "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\n    rendered in the legend.\n\n    This can be specified explicitly, for instance:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n            LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n            LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n        ])\n\n    But as a convenience, can also be given more compactly as a list of tuples:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            (\"sin(x)\"   , [r0, r1]),\n            (\"2*sin(x)\" , [r2]),\n            (\"3*sin(x)\" , [r3, r4])\n        ])\n\n    where each tuple is of the form: *(label, renderers)*."
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "padding", 
        "desc": "Amount of padding around the contents of the legend. Only applicable when\n    when border is visible, otherwise collapses to 0."
      }, 
      {
        "default": 20, 
        "type": "Int", 
        "name": "glyph_height", 
        "desc": "The height (in pixels) that the rendered legend glyph should occupy."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "label_text_line_height", 
        "desc": "The text line height for the legend labels."
      }, 
      {
        "default": "white", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "inactive_fill_color", 
        "desc": "The fill color for the legend item style when inactive. These control an overlay\n    on the item that can be used to obscure it when the corresponding glyph\n    is inactive (e.g. by making it semi-transparent)."
      }, 
      {
        "default": 0.7, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "inactive_fill_alpha", 
        "desc": "The fill alpha for the legend item style when inactive. These control an overlay\n    on the item that can be used to obscure it when the corresponding glyph\n    is inactive (e.g. by making it semi-transparent)."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "label_text_font", 
        "desc": "The text font for the legend labels."
      }, 
      {
        "default": 20, 
        "type": "Int", 
        "name": "glyph_width", 
        "desc": "The width (in pixels) that the rendered legend glyph should occupy."
      }, 
      {
        "default": 0.5, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_alpha", 
        "desc": "The line alpha for the legend border outline."
      }, 
      {
        "default": 0.95, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha for the legend background style."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "label_text_font_size", 
        "desc": "The text font size for the legend labels."
      }, 
      {
        "default": "none", 
        "type": "Enum('none', 'hide', 'mute')", 
        "name": "click_policy", 
        "desc": "Defines what happens when a lengend's item is clicked."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "border_line_dash", 
        "desc": "The line dash for the legend border outline."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "#e5e5e5", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_line_color", 
        "desc": "The line color for the legend border outline."
      }, 
      {
        "default": 20, 
        "type": "Int", 
        "name": "label_height", 
        "desc": "The minimum height (in pixels) of the area that legend labels should occupy."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "border_line_dash_offset", 
        "desc": "The line dash offset for the legend border outline."
      }, 
      {
        "default": 3, 
        "type": "Int", 
        "name": "spacing", 
        "desc": "Amount of spacing (in pixles) between legend entries."
      }, 
      {
        "default": "top_right", 
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))", 
        "name": "location", 
        "desc": "The location where the legend should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner)."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "border_line_cap", 
        "desc": "The line cap for the legend border outline."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "label_standoff", 
        "desc": "The distance (in pixels) to separate the label from its associated glyph."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_width", 
        "desc": "The line width for the legend border outline."
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "margin", 
        "desc": "Amount of margin around the legend."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "label_text_align", 
        "desc": "The text align for the legend labels."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "label_text_color", 
        "desc": "The text color for the legend labels."
      }
    ], 
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"border_line_alpha\": {\"value\": 0.5}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": \"#e5e5e5\"}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"bevel\", \"border_line_width\": {\"value\": 1}, \"click_policy\": \"none\", \"glyph_height\": 20, \"glyph_width\": 20, \"id\": \"e850409d-3821-4eec-bd13-789565b0a74d\", \"inactive_fill_alpha\": {\"value\": 0.7}, \"inactive_fill_color\": {\"value\": \"white\"}, \"items\": [], \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_height\": 20, \"label_standoff\": 5, \"label_text_align\": \"left\", \"label_text_alpha\": {\"value\": 1.0}, \"label_text_baseline\": \"middle\", \"label_text_color\": {\"value\": \"#444444\"}, \"label_text_font\": \"helvetica\", \"label_text_font_size\": {\"value\": \"10pt\"}, \"label_text_font_style\": \"normal\", \"label_text_line_height\": 1.2, \"label_width\": 20, \"level\": \"annotation\", \"location\": \"top_right\", \"margin\": 10, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"spacing\": 3, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Legend", 
    "desc": "Render informational legends for a plot."
  }, 
  "DatetimeAxis": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "axis_label_text_font_size", 
        "desc": "The text font size of the axis label."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_line_color", 
        "desc": "The line color of the axis line."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance in pixels that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "axis_label_text_align", 
        "desc": "The text align of the axis label."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default y-range."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_label_text_alpha", 
        "desc": "The text alpha of the axis label."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "axis_label_text_color", 
        "desc": "The text color of the axis label."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "axis_label", 
        "desc": "A text label for the axis, displayed parallel to the axis rule.\n\n    .. note::\n        LaTeX notation is not currently supported; please see\n        :bokeh-issue:`647` to track progress or contribute."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this guide renderer is attached."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "axis_line_cap", 
        "desc": "The line cap of the axis line."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance in pixels that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "axis_line_join", 
        "desc": "The line join of the axis line."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_label_standoff", 
        "desc": "The distance in pixels that the major tick labels should be\n    offset from the associated ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"5c097c4b-9c7e-4117-80e7-fa53211bfd21\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance\n    of ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, String, Tuple(String, String), Tuple(String, String, String))", 
        "name": "fixed_location", 
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "axis_label_text_font", 
        "desc": "The text font of the axis label."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "axis_line_dash_offset", 
        "desc": "The line dash offset of the axis line."
      }, 
      {
        "default": "horizontal", 
        "type": "Either(Enum('horizontal', 'vertical'), Float)", 
        "name": "major_label_orientation", 
        "desc": "What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "axis_line_dash", 
        "desc": "The line dash of the axis line."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "axis_label_standoff", 
        "desc": "The distance in pixels that the axis labels should be offset\n    from the tick labels."
      }, 
      {
        "default": "{\"id\": \"e9b0d329-0c6c-41bd-ac5c-862ffbe37653\"}", 
        "type": "Instance(Ticker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models.tickers import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_width", 
        "desc": "The line width of the axis line."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering an axis on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance in pixels that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "axis_line_alpha", 
        "desc": "The line alpha of the axis line."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "axis_label_text_line_height", 
        "desc": "The text line height of the axis label."
      }, 
      {
        "default": "overlay", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "axis_label_text_baseline", 
        "desc": "The text baseline of the axis label."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "axis_label_text_font_style", 
        "desc": "The text font style of the axis label."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": "alphabetic", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }
    ], 
    "proto": "{\"axis_label\": \"\", \"axis_label_standoff\": 5, \"axis_label_text_align\": \"left\", \"axis_label_text_alpha\": {\"value\": 1.0}, \"axis_label_text_baseline\": \"bottom\", \"axis_label_text_color\": {\"value\": \"#444444\"}, \"axis_label_text_font\": \"helvetica\", \"axis_label_text_font_size\": {\"value\": \"10pt\"}, \"axis_label_text_font_style\": \"italic\", \"axis_label_text_line_height\": 1.2, \"axis_line_alpha\": {\"value\": 1.0}, \"axis_line_cap\": \"butt\", \"axis_line_color\": {\"value\": \"black\"}, \"axis_line_dash\": [], \"axis_line_dash_offset\": 0, \"axis_line_join\": \"bevel\", \"axis_line_width\": {\"value\": 1}, \"bounds\": \"auto\", \"fixed_location\": null, \"formatter\": {\"id\": \"58344984-56ad-4958-82a6-76e4b05f08fb\", \"type\": \"DatetimeTickFormatter\"}, \"id\": \"99cf5b39-8b11-4407-bb07-7c4741b8ee45\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"overlay\", \"major_label_orientation\": \"horizontal\", \"major_label_overrides\": {}, \"major_label_standoff\": 5, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"alphabetic\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 2, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"black\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 6, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": \"black\"}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 4, \"name\": null, \"plot\": null, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"f8c9479d-6de9-4b5e-a1b4-4715196564d9\", \"type\": \"DatetimeTicker\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ], 
    "name": "DatetimeAxis", 
    "desc": "An LinearAxis that picks nice numbers for tick locations on\n    a datetime scale. Configured with a ``DatetimeTickFormatter`` by\n    default."
  }, 
  "Tabs": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Panel))", 
        "name": "tabs", 
        "desc": "The list of child panel widgets."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the button is activated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "active", 
        "desc": "The index of the active tab."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"active\": 0, \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"c9100175-4768-4218-9d31-221f43d73bcf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tabs\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "Tabs", 
    "desc": "A panel widget with navigation tabs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n        :source-position: below"
  }, 
  "Spacer": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"7cac352f-b06a-46b1-9614-3b21ebfb3e12\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ], 
    "name": "Spacer", 
    "desc": "A container for space used to fill an empty spot in a row or column."
  }, 
  "GroupFilter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "group", 
        "desc": "The value of the column indicating the rows of data to keep."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Seq(Int), Seq(Bool))", 
        "name": "filter", 
        "desc": "A list that can be either integer indices or booleans representing a row-wise subset of data."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "column_name", 
        "desc": "The name of the column to perform the group filtering operation on."
      }
    ], 
    "proto": "{\"column_name\": null, \"filter\": null, \"group\": null, \"id\": \"5d6f8752-d598-4fc5-a70b-dfca42c6940b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.filters.Filter"
    ], 
    "name": "GroupFilter", 
    "desc": "A GroupFilter represents the rows of a ColumnDataSource where the values of the categorical\n    column column_name match the group variable."
  }, 
  "Renderer": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "image", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"69ae65a7-492e-4a46-a745-6d28e49141ac\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"image\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Renderer", 
    "desc": "An abstract base class for renderer types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Marker": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"99312448-4179-491b-81ac-ac3f9019615b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Marker", 
    "desc": "Base class for glyphs that are simple markers with line and\n    fill properties, located at an (x, y) location with a specified\n    size.\n\n    .. note::\n        For simplicity, all markers have both line and fill properties\n        declared, however some markers (`Asterisk`, `Cross`, `X`) only\n        draw lines. For these markers, the fill values are simply\n        ignored.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "RadioGroup": {
    "props": [
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "active", 
        "desc": "The index of the selected radio box, or ``None`` if nothing is\n    selected."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "inline", 
        "desc": "Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"active\": null, \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"1b8956c0-5db2-46d5-af27-fe3871aab30e\", \"inline\": false, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ], 
    "name": "RadioGroup", 
    "desc": "A group of radio boxes."
  }, 
  "Range1d": {
    "props": [
      {
        "default": null, 
        "type": "Either(Float, TimeDelta)", 
        "name": "min_interval", 
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound. Can be a timedelta."
      }, 
      {
        "default": 1, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "end", 
        "desc": "The end of the range."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the range is updated."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(TimeDelta, TimeDelta), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "The bounds that the range is allowed to go to. Typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    If set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\n    increasing or decreasing, the first item should be the minimum value of the range and the\n    second item should be the maximum. Setting min > max will result in a ``ValueError``.\n\n    By default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\n    want to constrain one end of the plot, you can set min or max to None.\n\n    Examples:\n\n        Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n        Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0"
      }, 
      {
        "default": null, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "reset_start", 
        "desc": "The start of the range to apply after reset. If set to ``None`` defaults\n    to the ``start`` value during initialization."
      }, 
      {
        "default": 0, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "start", 
        "desc": "The start of the range."
      }, 
      {
        "default": null, 
        "type": "Either(Float, TimeDelta)", 
        "name": "max_interval", 
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Can be a timedelta. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "reset_end", 
        "desc": "The end of the range to apply when resetting. If set to ``None`` defaults\n    to the ``end`` value during initialization."
      }
    ], 
    "proto": "{\"bounds\": null, \"callback\": null, \"end\": 1, \"id\": \"8ddc96d7-6651-4538-9595-bd4bcda0566b\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"reset_end\": null, \"reset_start\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.ranges.Range"
    ], 
    "name": "Range1d", 
    "desc": "A fixed, closed range [start, end] in a continuous scalar\n    dimension.\n\n    In addition to supplying ``start`` and ``end`` keyword arguments\n    to the ``Range1d`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        Range(0, 10) # equivalent to Range(start=0, end=10)"
  }, 
  "DatePicker": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "value", 
        "desc": "The initial or picked date."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "min_date", 
        "desc": "Optional earliest allowable date."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current date value changes."
      }, 
      {
        "default": null, 
        "type": "Date", 
        "name": "max_date", 
        "desc": "Optional latest allowable date."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"6e039e6e-3971-4a4d-8442-a1734c20c534\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_date\": null, \"min_date\": null, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ], 
    "name": "DatePicker", 
    "desc": "Calendar-based date picker widget."
  }, 
  "Span": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the span."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "canvas", 
        "type": "Enum('canvas', 'css')", 
        "name": "render_mode", 
        "desc": "Specifies whether the span is rendered as a canvas element or as an\n    css element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. warning::\n        The line_dash and line_dash_offset attributes aren't supported if\n        the render_mode is set to \"css\""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the span."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the span."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the span."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the span."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the span."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "location_units", 
        "desc": "The unit type for the location attribute. Interpreted as \"data space\"\n    units by default."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the span."
      }, 
      {
        "default": "width", 
        "type": "Enum('width', 'height')", 
        "name": "dimension", 
        "desc": "The direction of the span can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "location", 
        "desc": "The location of the span, along ``dimension``.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch."
      }
    ], 
    "proto": "{\"dimension\": \"width\", \"id\": \"fcf97b83-3e3f-4453-b060-4d2447307e98\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"location\": null, \"location_units\": \"data\", \"name\": null, \"plot\": null, \"render_mode\": \"canvas\", \"subscribed_events\": [], \"tags\": [], \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Span", 
    "desc": "Render a horizontal or vertical line span."
  }, 
  "Tap": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"36591b9a-e72f-4097-a00d-2b11c3c64879\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Gesture"
    ], 
    "name": "Tap", 
    "desc": "A base class for tools that respond to tap/click events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ImageRGBA": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "dh", 
        "desc": "The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "dilate", 
        "desc": "Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "dh_units", 
        "desc": ""
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "image", 
        "desc": "The arrays of RGBA data for the images."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "global_alpha", 
        "desc": "An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself)."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "dw", 
        "desc": "The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "dw_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates to locate the image anchors."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates to locate the image anchors."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dh\": null, \"dilate\": false, \"dw\": null, \"global_alpha\": 1.0, \"id\": \"6725acb7-6be2-4518-9ee4-3c3e265d3650\", \"image\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "ImageRGBA", 
    "desc": "Render images given as RGBA data."
  }, 
  "GraphHitTestPolicy": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"c5b3a522-9902-486f-ab3e-e0be751f20a3\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "GraphHitTestPolicy", 
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Cross": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"e143582e-114c-4b0c-91d4-ab7c317d8100\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Cross", 
    "desc": "Render '+' cross markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Cross.py\n        :source-position: below"
  }, 
  "PolySelectTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"25fda546-41c4-4f44-aa1b-623c3d384897\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}", 
        "type": "Instance(PolyAnnotation)", 
        "name": "overlay", 
        "desc": "A shaded annotation drawn to indicate the selection region."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, List(Instance(Renderer)))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to hit test against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser on completion of drawing a polygon.\n    The cb_data parameter that is available to the Callback code will contain\n    one PolySelectTool-specific field:\n\n    :geometry: object containing the coordinates of the polygon"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"id\": \"cdefa06f-7dff-41fe-a37c-aac90d4fbaca\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"names\": [], \"overlay\": {\"id\": \"12c17e1b-fdd5-43fd-99e0-edda451125ac\", \"type\": \"PolyAnnotation\"}, \"renderers\": \"auto\", \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Tap"
    ], 
    "name": "PolySelectTool", 
    "desc": "*toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 18pt"
  }, 
  "PolyEditTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }, 
      {
        "default": null, 
        "type": "Instance(GlyphRenderer)", 
        "name": "vertex_renderer", 
        "desc": "The renderer used to render the vertices of a selected line or\n    polygon."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"custom_icon\": null, \"custom_tooltip\": null, \"empty_value\": null, \"id\": \"7e07374e-4e3e-4a79-a0ff-793d39ae9498\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"renderers\": [], \"subscribed_events\": [], \"tags\": [], \"vertex_renderer\": null}", 
    "bases": [
      "bokeh.models.tools.EditTool", 
      "bokeh.models.tools.Drag", 
      "bokeh.models.tools.Tap"
    ], 
    "name": "PolyEditTool", 
    "desc": "*toolbar icon*: |poly_edit_icon|\n\n    The PolyEditTool allows editing the vertices of one or more\n    ``Patches`` or ``MultiLine`` glyphs. The glyphs to be edited can\n    be defined via the ``renderers`` property and the renderer for the\n    vertices can be defined via the ``vertex_renderer``, which must\n    render a point-like Glyph (of ``XYGlyph`` type).\n\n    The tool will automatically modify the columns on the data source\n    corresponding to the ``xs`` and ``ys`` values of the glyph. Any\n    additional columns in the data source will be padded with the\n    declared ``empty_value``, when adding a new point.\n\n    The supported actions include:\n\n    * Show vertices: Double tap an existing patch or multi-line\n\n    * Add vertex: Double tap an existing vertex to select it, the tool\n      will draw the next point, to add it tap in a new location. To\n      finish editing and add a point double tap otherwise press the\n      <<esc> key to cancel.\n\n    * Move vertex: Drag an existing vertex and let go of the mouse\n      button to release it.\n\n    * Delete vertex: After selecting one or more vertices press\n      <<backspace>> while the mouse cursor is within the plot area.\n\n    .. |poly_edit_icon| image:: /_images/icons/PolyEdit.png\n        :height: 18pt"
  }, 
  "StepInterpolator": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "clip", 
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "after", 
        "type": "Enum('before', 'after', 'center')", 
        "name": "mode", 
        "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n    * ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n    * ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n    * ``center``: Assume the y-value associated with the nearest x-value to the point to transform."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "y", 
        "desc": "Dependant coordinate denoting the value of a point at a location."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "x", 
        "desc": "Independant coordiante denoting the location of a point."
      }, 
      {
        "default": null, 
        "type": "Instance(ColumnarDataSource)", 
        "name": "data", 
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters."
      }
    ], 
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"f3ec5b07-fb7b-4ef6-bef7-cd1d8065ac81\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"mode\": \"after\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ], 
    "name": "StepInterpolator", 
    "desc": "Compute a step-wise interpolation between the points provided through\n    the ``x``, ``y``, and ``data`` parameters."
  }, 
  "CategoricalMapper": {
    "props": [
      {
        "default": null, 
        "type": "Int", 
        "name": "end", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String)))", 
        "name": "factors", 
        "desc": "A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "start", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"end\": null, \"factors\": null, \"id\": \"d9223702-0778-47ba-9f56-b4fc775c2b3a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.Mapper"
    ], 
    "name": "CategoricalMapper", 
    "desc": "Base class for mappers that map categorical factors to other values.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "LinearScale": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"9e1e3bc1-94f3-486d-afab-d29184a6e205\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.scales.Scale"
    ], 
    "name": "LinearScale", 
    "desc": ""
  }, 
  "AnnularWedge": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the annular wedges."
      }, 
      {
        "default": "anticlock", 
        "type": "Enum('clock', 'anticlock')", 
        "name": "direction", 
        "desc": "Which direction to stroke between the start and end angles."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "inner_radius", 
        "desc": "The inner radii of the annular wedges."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the annular wedges."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "start_angle_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "end_angle_units", 
        "desc": ""
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the annular wedges."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the annular wedges."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the annular wedges."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the annular wedges."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the annular wedges."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the annular wedges."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "start_angle", 
        "desc": "The angles to start the annular wedges, as measured from the horizontal."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "outer_radius_units", 
        "desc": ""
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the annular wedges."
      }, 
      {
        "default": null, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "end_angle", 
        "desc": "The angles to end the annular wedges, as measured from the horizontal."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "outer_radius", 
        "desc": "The outer radii of the annular wedges."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "inner_radius_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the center of the annular wedges."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the center of the annular wedges."
      }
    ], 
    "proto": "{\"direction\": \"anticlock\", \"end_angle\": null, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"32b82fec-03e5-4925-a189-4f4438e0aad9\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"start_angle\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "AnnularWedge", 
    "desc": "Render annular wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/AnnularWedge.py\n        :source-position: below"
  }, 
  "CategoricalTicker": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"402f23f1-c7aa-4d22-9bda-29dda2c6cc50\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.Ticker"
    ], 
    "name": "CategoricalTicker", 
    "desc": "Generate ticks for categorical ranges."
  }, 
  "HTMLTemplateFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "<%= value %>", 
        "type": "String", 
        "name": "template", 
        "desc": "Template string to be used by Underscore's template method."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"2f87574f-bed9-4b9b-a767-99def15b7ed9\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"template\": \"<%= value %>\"}", 
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ], 
    "name": "HTMLTemplateFormatter", 
    "desc": "HTML formatter using a template.\n    This uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\n    The formatter has access other items in the row via the `dataContext` object passed to the formatter.\n    So, for example, if another column in the datasource was named `url`, the template could access it as:\n\n    .. code-block:: jinja\n\n        <a href=\"<%= url %>\"><%= value %></a>\n\n    To use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\n    or `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\n    Example: Simple HTML template to format the column value as code.\n\n    .. code-block:: python\n\n        HTMLTemplateFormatter(template='<code><%= value %></code>')\n\n    Example: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n    .. code-block:: python\n\n        HTMLTemplateFormatter(template=\n            '<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>'\n        )"
  }, 
  "PreText": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "style", 
        "desc": "Raw CSS style declaration. Note this may be web browser dependent."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "text", 
        "desc": "The contents of the widget."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"1c9b560a-542e-431c-9ed3-e6816e921eea\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"style\": {}, \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ], 
    "name": "PreText", 
    "desc": "A block (paragraph) of pre-formatted text.\n\n    This Bokeh model corresponds to an HTML ``<pre>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n        :source-position: below"
  }, 
  "GlyphRenderer": {
    "props": [
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default x-range."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Glyph))", 
        "name": "nonselection_glyph", 
        "desc": "An optional glyph used for explicitly non-selected points\n    (i.e., non-selected when there are other points that are selected,\n    but not when no points at all are selected.)\n\n    If set to \"auto\" then a glyph with a low alpha value (0.1) will\n    be used for non-selected points."
      }, 
      {
        "default": null, 
        "type": "Instance(DataSource)", 
        "name": "data_source", 
        "desc": "Local data source to use when rendering glyphs on the plot."
      }, 
      {
        "default": null, 
        "type": "Instance(Glyph)", 
        "name": "hover_glyph", 
        "desc": "An optional glyph used for inspected points, e.g., those that are\n    being hovered over by a HoverTool."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "glyph", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "muted", 
        "desc": ""
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Glyph))", 
        "name": "selection_glyph", 
        "desc": "An optional glyph used for selected points.\n\n    If set to \"auto\" then the standard glyph will be used for selected\n    points."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen\n    locations when rendering glyphs on the plot. If unset, use the\n    default -range."
      }, 
      {
        "default": null, 
        "type": "Instance(Glyph)", 
        "name": "muted_glyph", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "Instance(Glyph)", 
        "name": "glyph", 
        "desc": "The glyph to render, in conjunction with the supplied data source\n    and ranges."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(CDSView)", 
        "name": "view", 
        "desc": "A view into the data source to use when rendering glyphs. A default view\n    of the entire data source is created when a view is not passed in during\n    initialization."
      }
    ], 
    "proto": "{\"data_source\": null, \"glyph\": null, \"hover_glyph\": null, \"id\": \"82cc07d3-13bc-4453-b358-623437a8ff60\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"glyph\", \"muted\": false, \"muted_glyph\": null, \"name\": null, \"nonselection_glyph\": \"auto\", \"selection_glyph\": \"auto\", \"subscribed_events\": [], \"tags\": [], \"view\": {\"id\": \"2d03ea35-f23f-4999-853f-38aaca502341\", \"type\": \"CDSView\"}, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ], 
    "name": "GlyphRenderer", 
    "desc": ""
  }, 
  "BooleanFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "check", 
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')", 
        "name": "icon", 
        "desc": "The icon visualizing the check mark."
      }
    ], 
    "proto": "{\"icon\": \"check\", \"id\": \"df7e234a-c5e6-47e8-8c50-5c9d5dce8757\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ], 
    "name": "BooleanFormatter", 
    "desc": "Boolean (check mark) cell formatter."
  }, 
  "Row": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(LayoutDOM))", 
        "name": "children", 
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets."
      }
    ], 
    "proto": "{\"children\": [], \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"c6c607ca-2306-4028-a847-1cb42f916970\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.layouts.Box"
    ], 
    "name": "Row", 
    "desc": "Lay out child components in a single horizontal row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument."
  }, 
  "Dash": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"7d0fd7db-425a-462f-8c4d-dfa465dd9b1f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Dash", 
    "desc": "Render dash markers. Use ``angle`` to rotate and create vertically\n    oriented short lines.\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Dash.py\n        :source-position: below"
  }, 
  "Triangle": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"4d1d37f1-26e0-4b41-815e-5bea0b292c21\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Triangle", 
    "desc": "Render triangle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Triangle.py\n        :source-position: below"
  }, 
  "MercatorTileSource": {
    "props": [
      {
        "default": 156543.03392804097, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "snap_to_zoom", 
        "desc": "Forces initial extents to snap to the closest larger zoom level."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "wrap_around", 
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``."
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"8cffe4fb-b160-4fb4-8d7c-6baf8139ed51\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"snap_to_zoom\": false, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}", 
    "bases": [
      "bokeh.models.tiles.TileSource"
    ], 
    "name": "MercatorTileSource", 
    "desc": "A base class for Mercator tile services (e.g.``WMTSTileSource``)."
  }, 
  "CustomJS": {
    "props": [
      {
        "default": "", 
        "type": "String", 
        "name": "code", 
        "desc": "A snippet of JavaScript code to execute in the browser. The\n    code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. Additionally,\n    a ``cb_obj`` parameter contains the object that triggered the callback\n    and an optional ``cb_data`` parameter that contains any tool-specific data\n    (i.e. mouse coordinates and hovered glyph indices for the HoverTool).\n\n    .. note:: Use ``CustomJS.from_coffeescript()`` for CoffeeScript source code."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, AnyRef)", 
        "name": "args", 
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the callback's code snippet as the values of\n    named parameters to the callback."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "use_strict", 
        "desc": "Enables or disables automatic insertion of ``\"use strict\";`` into ``code``."
      }
    ], 
    "proto": "{\"args\": {}, \"code\": \"\", \"id\": \"354e39f5-8be8-4d19-a925-cfdc24839bd4\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"use_strict\": false}", 
    "bases": [
      "bokeh.models.callbacks.Callback"
    ], 
    "name": "CustomJS", 
    "desc": "Execute a JavaScript function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh."
  }, 
  "ColorBar": {
    "props": [
      {
        "default": {
          "value": "10pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "title_text_font_size", 
        "desc": "The text font size values for the title text."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "major_tick_line_join", 
        "desc": "The line join of the major ticks."
      }, 
      {
        "default": "left", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "title_text_align", 
        "desc": "The text align values for the title text."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "border_line_join", 
        "desc": "The line join for the color bar border outline."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "title_text_line_height", 
        "desc": "The text line height values for the title text."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_line_dash_offset", 
        "desc": "The line dash offset of the minor ticks."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Int)", 
        "name": "height", 
        "desc": "The height (in pixels) that the color scale should occupy."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "minor_tick_line_join", 
        "desc": "The line join of the minor ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_alpha", 
        "desc": "The line alpha of the major ticks."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "bar_line_dash", 
        "desc": "The line dash for the color scale bar outline."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "border_line_dash", 
        "desc": "The line dash for the color bar border outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(Either(Float, String), String)", 
        "name": "major_label_overrides", 
        "desc": "Provide explicit tick label values for specific tick locations that\n    override normal formatting."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "minor_tick_line_cap", 
        "desc": "The line cap of the minor ticks."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "major_tick_line_cap", 
        "desc": "The line cap of the major ticks."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "bar_line_color", 
        "desc": "The line color for the color scale bar outline."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "title", 
        "desc": "The title text to render."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_width", 
        "desc": "The line width of the minor ticks."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Int)", 
        "name": "width", 
        "desc": "The width (in pixels) that the color scale should occupy."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "minor_tick_line_dash", 
        "desc": "The line dash of the minor ticks."
      }, 
      {
        "default": "top_right", 
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right'), Tuple(Float, Float))", 
        "name": "location", 
        "desc": "The location where the color bar should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n\n    .. warning::\n        If the color bar is placed in a side panel, the location will likely\n        have to be set to `(0,0)`."
      }, 
      {
        "default": "italic", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "title_text_font_style", 
        "desc": "The text font style values for the title text."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "bar_line_join", 
        "desc": "The line join for the color scale bar outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 10, 
        "type": "Int", 
        "name": "padding", 
        "desc": "Amount of padding (in pixels) between the color scale and color bar border."
      }, 
      {
        "default": "center", 
        "type": "Enum('left', 'right', 'center')", 
        "name": "major_label_text_align", 
        "desc": "The text align of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "title_text_font", 
        "desc": "The text font values for the title text."
      }, 
      {
        "default": "{\"id\": \"c4651729-1c42-4209-b5f1-f40371b24aad\"}", 
        "type": "Instance(ContinuousTicker)", 
        "name": "ticker", 
        "desc": "A Ticker to use for computing locations of axis components."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_out", 
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_alpha", 
        "desc": "The line alpha for the color bar border outline."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_out", 
        "desc": "The distance (in pixels) that major ticks should extend out of the\n    main plot area."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_tick_line_color", 
        "desc": "The line color of the major ticks."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_label_text_alpha", 
        "desc": "The text alpha of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "major_tick_line_dash", 
        "desc": "The line dash of the major ticks."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "major_tick_line_width", 
        "desc": "The line width of the major ticks."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "border_line_cap", 
        "desc": "The line cap for the color bar border outline."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "border_line_width", 
        "desc": "The line width for the color bar border outline."
      }, 
      {
        "default": {
          "value": "8pt"
        }, 
        "type": "FontSizeSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)", 
        "name": "major_label_text_font_size", 
        "desc": "The text font size of the major tick labels."
      }, 
      {
        "default": "vertical", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Whether the color bar should be oriented vertically or horizontally."
      }, 
      {
        "default": "bottom", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "title_text_baseline", 
        "desc": "The text baseline values for the title text."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "minor_tick_in", 
        "desc": "The distance (in pixels) that minor ticks should extend into the\n    main plot area."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "minor_tick_line_alpha", 
        "desc": "The line alpha of the minor ticks."
      }, 
      {
        "default": "middle", 
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", 
        "name": "major_label_text_baseline", 
        "desc": "The text baseline of the major tick labels."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "bar_line_alpha", 
        "desc": "The line alpha for the color scale bar outline."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "major_label_text_color", 
        "desc": "The text color of the major tick labels."
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "border_line_color", 
        "desc": "The line color for the color bar border outline."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "bar_line_width", 
        "desc": "The line width for the color scale bar outline."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "major_tick_in", 
        "desc": "The distance (in pixels) that major ticks should extend into the\n    main plot area."
      }, 
      {
        "default": 2, 
        "type": "Int", 
        "name": "title_standoff", 
        "desc": "The distance (in pixels) to separate the title from the color bar."
      }, 
      {
        "default": "#444444", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "title_text_color", 
        "desc": "The text color values for the title text."
      }, 
      {
        "default": 1.0, 
        "type": "Float", 
        "name": "scale_alpha", 
        "desc": "The alpha with which to render the color scale."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')", 
        "name": "major_label_text_font_style", 
        "desc": "The text font style of the major tick labels."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "major_tick_line_dash_offset", 
        "desc": "The line dash offset of the major ticks."
      }, 
      {
        "default": "{\"id\": \"ccf9406e-1e74-4285-bfc6-cdf852c0ef70\"}", 
        "type": "Instance(TickFormatter)", 
        "name": "formatter", 
        "desc": "A TickFormatter to use for formatting the visual appearance of ticks."
      }, 
      {
        "default": "#ffffff", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "background_fill_color", 
        "desc": "The fill color for the color bar background style."
      }, 
      {
        "default": null, 
        "type": "Instance(ContinuousColorMapper)", 
        "name": "color_mapper", 
        "desc": "A continuous color mapper containing a color palette to render.\n\n    .. warning::\n        If the `low` and `high` attributes of the ColorMapper aren't set, ticks\n        and tick labels won't be rendered. Additionally, if a LogTicker is\n        passed to the `ticker` argument and either or both of the logarithms\n        of `low` and `high` values of the color_mapper are non-numeric\n        (i.e. `low=0`), the tick and tick labels won't be rendered."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "title_text_alpha", 
        "desc": "The text alpha values for the title text."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.2, 
        "type": "Float", 
        "name": "major_label_text_line_height", 
        "desc": "The text line height of the major tick labels."
      }, 
      {
        "default": "helvetica", 
        "type": "String", 
        "name": "major_label_text_font", 
        "desc": "The text font of the major tick labels."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "border_line_dash_offset", 
        "desc": "The line dash offset for the color bar border outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0.95, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "background_fill_alpha", 
        "desc": "The fill alpha for the color bar background style."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "bar_line_cap", 
        "desc": "The line cap for the color scale bar outline."
      }, 
      {
        "default": null, 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "minor_tick_line_color", 
        "desc": "The line color of the minor ticks."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "bar_line_dash_offset", 
        "desc": "The line dash offset for the color scale bar outline."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "label_standoff", 
        "desc": "The distance (in pixels) to separate the tick labels from the color bar."
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "margin", 
        "desc": "Amount of margin (in pixels) around the outside of the color bar."
      }
    ], 
    "proto": "{\"background_fill_alpha\": {\"value\": 0.95}, \"background_fill_color\": {\"value\": \"#ffffff\"}, \"bar_line_alpha\": {\"value\": 1.0}, \"bar_line_cap\": \"butt\", \"bar_line_color\": {\"value\": null}, \"bar_line_dash\": [], \"bar_line_dash_offset\": 0, \"bar_line_join\": \"bevel\", \"bar_line_width\": {\"value\": 1}, \"border_line_alpha\": {\"value\": 1.0}, \"border_line_cap\": \"butt\", \"border_line_color\": {\"value\": null}, \"border_line_dash\": [], \"border_line_dash_offset\": 0, \"border_line_join\": \"bevel\", \"border_line_width\": {\"value\": 1}, \"color_mapper\": null, \"formatter\": {\"id\": \"fa50c5c0-aed1-4077-9e3c-883cb0672b92\", \"type\": \"BasicTickFormatter\"}, \"height\": \"auto\", \"id\": \"ae607e8d-cac7-46f3-adf8-2cc303bfa8cc\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label_standoff\": 5, \"level\": \"annotation\", \"location\": \"top_right\", \"major_label_overrides\": {}, \"major_label_text_align\": \"center\", \"major_label_text_alpha\": {\"value\": 1.0}, \"major_label_text_baseline\": \"middle\", \"major_label_text_color\": {\"value\": \"#444444\"}, \"major_label_text_font\": \"helvetica\", \"major_label_text_font_size\": {\"value\": \"8pt\"}, \"major_label_text_font_style\": \"normal\", \"major_label_text_line_height\": 1.2, \"major_tick_in\": 5, \"major_tick_line_alpha\": {\"value\": 1.0}, \"major_tick_line_cap\": \"butt\", \"major_tick_line_color\": {\"value\": \"#ffffff\"}, \"major_tick_line_dash\": [], \"major_tick_line_dash_offset\": 0, \"major_tick_line_join\": \"bevel\", \"major_tick_line_width\": {\"value\": 1}, \"major_tick_out\": 0, \"margin\": 30, \"minor_tick_in\": 0, \"minor_tick_line_alpha\": {\"value\": 1.0}, \"minor_tick_line_cap\": \"butt\", \"minor_tick_line_color\": {\"value\": null}, \"minor_tick_line_dash\": [], \"minor_tick_line_dash_offset\": 0, \"minor_tick_line_join\": \"bevel\", \"minor_tick_line_width\": {\"value\": 1}, \"minor_tick_out\": 0, \"name\": null, \"orientation\": \"vertical\", \"padding\": 10, \"plot\": null, \"scale_alpha\": 1.0, \"subscribed_events\": [], \"tags\": [], \"ticker\": {\"id\": \"6de9f917-55f2-4e9f-b18f-49bd446208c0\", \"type\": \"BasicTicker\"}, \"title\": null, \"title_standoff\": 2, \"title_text_align\": \"left\", \"title_text_alpha\": {\"value\": 1.0}, \"title_text_baseline\": \"bottom\", \"title_text_color\": {\"value\": \"#444444\"}, \"title_text_font\": \"helvetica\", \"title_text_font_size\": {\"value\": \"10pt\"}, \"title_text_font_style\": \"italic\", \"title_text_line_height\": 1.2, \"visible\": true, \"width\": \"auto\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "ColorBar", 
    "desc": "Render a color bar based on a color mapper."
  }, 
  "Band": {
    "props": [
      {
        "default": "#cccccc", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the band."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "upper", 
        "desc": "The coordinations of the upper portion of the filled area band."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "#fff9ba", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the band."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "base_units", 
        "desc": ""
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "upper_units", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "lower_units", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "base", 
        "desc": "The orthogonal coordinates of the upper and lower values."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the band."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "y_range_name", 
        "desc": "A particular (named) y-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default y-range."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the band."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the band."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the band."
      }, 
      {
        "default": "default", 
        "type": "String", 
        "name": "x_range_name", 
        "desc": "A particular (named) x-range to use for computing screen locations when\n    rendering annotations on the plot. If unset, use the default x-range."
      }, 
      {
        "default": 0.3, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the band."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "lower", 
        "desc": "The coordinates of the lower portion of the filled area band."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0.4, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the band."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": "{\"data\": {}, \"id\": \"824c1dfe-38dd-410d-beb0-853f699e98cb\"}", 
        "type": "Instance(DataSource)", 
        "name": "source", 
        "desc": "Local data source to use when rendering annotations on the plot."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the band."
      }, 
      {
        "default": "height", 
        "type": "Enum('width', 'height')", 
        "name": "dimension", 
        "desc": "The direction of the band can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction)."
      }
    ], 
    "proto": "{\"base\": null, \"dimension\": \"height\", \"fill_alpha\": {\"value\": 0.4}, \"fill_color\": {\"value\": \"#fff9ba\"}, \"id\": \"db1d4581-25d3-4c88-a94a-78d011a97bef\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 0.3}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"#cccccc\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"lower\": null, \"name\": null, \"plot\": null, \"source\": {\"id\": \"86d075ea-51ab-4a2b-8310-bffa1d391ee2\", \"type\": \"ColumnDataSource\"}, \"subscribed_events\": [], \"tags\": [], \"upper\": null, \"visible\": true, \"x_range_name\": \"default\", \"y_range_name\": \"default\"}", 
    "bases": [
      "bokeh.models.annotations.Annotation"
    ], 
    "name": "Band", 
    "desc": "Render a filled area band along a dimension."
  }, 
  "Interpolator": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "clip", 
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "y", 
        "desc": "Dependant coordinate denoting the value of a point at a location."
      }, 
      {
        "default": null, 
        "type": "Either(String, Seq(Float))", 
        "name": "x", 
        "desc": "Independant coordiante denoting the location of a point."
      }, 
      {
        "default": null, 
        "type": "Instance(ColumnarDataSource)", 
        "name": "data", 
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters."
      }
    ], 
    "proto": "{\"clip\": true, \"data\": null, \"id\": \"d2249906-c2e5-4bd5-8996-98a6f36526b7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.transforms.Transform"
    ], 
    "name": "Interpolator", 
    "desc": "Base class for interpolator transforms.\n\n    Interpolators return the value of a function which has been evaluated\n    between specified (x, y) pairs of data.  As an example, if two control\n    point pairs were provided to the interpolator, a linear interpolaction\n    at a specific value of 'x' would result in the value of 'y' which existed\n    on the line conneting the two control points.\n\n    The control point pairs for the interpolators can be specified through either\n\n    * A literal sequence of values:\n\n    .. code-block: python\n\n        interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n    * or a pair of columns defined in a `ColumnDataSource` object:\n\n    .. code-block: python\n\n        interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\n    This is the base class and is not intended to end use.  Please see the\n    documentation for the final derived classes (Jitter, LineraInterpolator,\n    StepInterpolator) for mor information on their specific methods of\n    interpolation.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "MultiSelect": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "value", 
        "desc": "Initial or selected values."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current selection value\n    changes."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Either(String, Tuple(String, String)))", 
        "name": "options", 
        "desc": "Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "Int", 
        "name": "size", 
        "desc": "The number of visible options in the dropdown list. (This uses the\n    ``select`` HTML element's ``size`` attribute. Some browsers might not\n    show less than 3 options.)"
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"c1fc9b66-cc7d-4a75-820d-4577b24589e7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"options\": [], \"size\": 4, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"value\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ], 
    "name": "MultiSelect", 
    "desc": "Multi-select widget."
  }, 
  "CategoricalColorMapper": {
    "props": [
      {
        "default": null, 
        "type": "Seq(Color)", 
        "name": "palette", 
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "end", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String)))", 
        "name": "factors", 
        "desc": "A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "nan_color", 
        "desc": "Color to be used if data is NaN or otherwise not mappable. (Default: 'gray')"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "start", 
        "desc": "A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"end\": null, \"factors\": null, \"id\": \"8c12720d-2a26-4c56-975f-8d380e623012\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"start\": 0, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.CategoricalMapper", 
      "bokeh.models.mappers.ColorMapper"
    ], 
    "name": "CategoricalColorMapper", 
    "desc": "Map categorical factors to colors.\n\n    Values that are passed to this mapper that are not in the factors list\n    will be mapped to ``nan_color``."
  }, 
  "XYGlyph": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"41ecea70-0145-480e-86ae-7bc1bcb2e8de\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "XYGlyph", 
    "desc": "Base class of glyphs with `x` and `y` coordinate attributes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Segment": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the segments."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the segments."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the segments."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the segments."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the segments."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the segments."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y1", 
        "desc": "The y-coordinates of the ending points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y0", 
        "desc": "The y-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x0", 
        "desc": "The x-coordinates of the starting points."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x1", 
        "desc": "The x-coordinates of the ending points."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the segments."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"id\": \"80995cde-3042-4522-9fac-d0898a86d51f\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"x0\": null, \"x1\": null, \"y0\": null, \"y1\": null}", 
    "bases": [
      "bokeh.models.glyphs.Glyph"
    ], 
    "name": "Segment", 
    "desc": "Render segments.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Segment.py\n        :source-position: below"
  }, 
  "Markup": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "style", 
        "desc": "Raw CSS style declaration. Note this may be web browser dependent."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "text", 
        "desc": "The contents of the widget."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"5b1b8c60-7002-4be2-82ff-f46d80f16cdd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"style\": {}, \"subscribed_events\": [], \"tags\": [], \"text\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "Markup", 
    "desc": "Base class for Bokeh models that represent HTML markup elements.\n\n    Markups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Toolbar": {
    "props": [
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Drag))", 
        "name": "active_drag", 
        "desc": "Specify a drag tool to be active when the plot is displayed."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Tool))", 
        "name": "tools", 
        "desc": "A list of tools to add to the plot."
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Tap))", 
        "name": "active_tap", 
        "desc": "Specify a tap/click tool to be active when the plot is displayed."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Inspection), Seq(Instance(Inspection)))", 
        "name": "active_inspect", 
        "desc": "Specify an inspection tool or sequence of inspection tools to be active when\n    the plot is displayed."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "auto", 
        "type": "Either(Auto, Instance(Scroll))", 
        "name": "active_scroll", 
        "desc": "Specify a scroll/pinch tool to be active when the plot is displayed."
      }, 
      {
        "default": "normal", 
        "type": "Enum('normal', 'grey')", 
        "name": "logo", 
        "desc": "What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed."
      }, 
      {
        "default": null, 
        "type": "Instance(Gesture)", 
        "name": "active_multi", 
        "desc": "Specify an active multi-gesture tool, for instance an edit tool or a range\n    tool.\n\n    Note that activating a multi-gesture tool will deactivate any other gesture\n    tools as appropriate. For example, if a pan tool is set as the active drag,\n    and this property is set to a ``BoxEditTool`` instance, the pan tool will\n    be deactivated (i.e. the multi-gesture tool will take precedence)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"active_drag\": \"auto\", \"active_inspect\": \"auto\", \"active_multi\": null, \"active_scroll\": \"auto\", \"active_tap\": \"auto\", \"id\": \"719baacd-6d1e-482b-8a08-b9ad43efd237\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"logo\": \"normal\", \"name\": null, \"subscribed_events\": [], \"tags\": [], \"tools\": []}", 
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ], 
    "name": "Toolbar", 
    "desc": "Collect tools to display for a single plot."
  }, 
  "ContinuousTicker": {
    "props": [
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"34501c87-8aa0-4612-adc5-0d0c0a65940c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.Ticker"
    ], 
    "name": "ContinuousTicker", 
    "desc": "A base class for non-categorical ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Annulus": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the annuli."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the annuli."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "inner_radius", 
        "desc": "The inner radii of the annuli."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the annuli."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the annuli."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "outer_radius_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the annuli."
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "outer_radius", 
        "desc": "The outer radii of the annuli."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "inner_radius_units", 
        "desc": ""
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the annuli."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the annuli."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the center of the annuli."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the center of the annuli."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the annuli."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the annuli."
      }
    ], 
    "proto": "{\"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"1d2557d6-e27a-47ea-9fe0-f328c49e6043\", \"inner_radius\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"outer_radius\": null, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Annulus", 
    "desc": "Render annuli.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Annulus.py\n        :source-position: below"
  }, 
  "ContinuousColorMapper": {
    "props": [
      {
        "default": null, 
        "type": "Seq(Color)", 
        "name": "palette", 
        "desc": "A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "gray", 
        "type": "Color", 
        "name": "nan_color", 
        "desc": "Color to be used if data is NaN or otherwise not mappable. (Default: 'gray')"
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "low_color", 
        "desc": "Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette."
      }, 
      {
        "default": null, 
        "type": "Color", 
        "name": "high_color", 
        "desc": "Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "high", 
        "desc": "The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "low", 
        "desc": "The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }
    ], 
    "proto": "{\"high\": null, \"high_color\": null, \"id\": \"169e75c0-bd00-42be-93b8-3d3a0829aa54\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"low\": null, \"low_color\": null, \"name\": null, \"nan_color\": \"gray\", \"palette\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ], 
    "name": "ContinuousColorMapper", 
    "desc": "Base class for continuous color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Button": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "Button", 
        "type": "String", 
        "name": "label", 
        "desc": "The text label for the button to display."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the button is activated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "clicks", 
        "desc": "A private property used to trigger ``on_click`` event handler."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(AbstractIcon)", 
        "name": "icon", 
        "desc": "An optional image appearing to the left of button's text."
      }
    ], 
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"clicks\": 0, \"css_classes\": [], \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"505fc915-6546-45f4-a49b-c4ea4345c6b1\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ], 
    "name": "Button", 
    "desc": "A click button."
  }, 
  "SingleIntervalTicker": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "interval", 
        "desc": "The interval between adjacent ticks."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 6, 
        "type": "Int", 
        "name": "desired_num_ticks", 
        "desc": "A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy."
      }, 
      {
        "default": 5, 
        "type": "Int", 
        "name": "num_minor_ticks", 
        "desc": "The number of minor tick positions to generate between\n    adjacent major tick values."
      }
    ], 
    "proto": "{\"desired_num_ticks\": 6, \"id\": \"a637fdf0-decb-4cce-ba1c-b089f6e62c26\", \"interval\": null, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_minor_ticks\": 5, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ], 
    "name": "SingleIntervalTicker", 
    "desc": "Generate evenly spaced ticks at a fixed interval regardless of\n    scale."
  }, 
  "Stack": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "Seq(String)", 
        "name": "fields", 
        "desc": "A sequence of fields from a ``ColumnDataSource`` to sum (elementwise). For\n    example:\n\n    .. code-block:: python\n\n        Stack(fields=['sales', 'marketing'])\n\n    Will compute an array of values (in the browser) by adding the elements\n    of the ``'sales'`` and ``'marketing'`` columns of a data source."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"fields\": [], \"id\": \"614264ee-262d-4dab-969e-2381a428e17d\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.expressions.Expression"
    ], 
    "name": "Stack", 
    "desc": "An expression for generating arrays by summing different columns from\n    a ``ColumnDataSource``.\n\n    This expression is useful for implementing stacked bar charts at a low\n    level."
  }, 
  "InputWidget": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Widget's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"3de9970c-5771-41ca-acb7-cd3324b27563\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "InputWidget", 
    "desc": "Abstract base class for input widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "NumeralTickFormatter": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "en", 
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')", 
        "name": "language", 
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator)."
      }, 
      {
        "default": "0,0", 
        "type": "String", 
        "name": "format", 
        "desc": "The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html"
      }, 
      {
        "default": "round", 
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')", 
        "name": "rounding", 
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"format\": \"0,0\", \"id\": \"68935b80-f2f8-4f45-a216-d79c34c5ef9c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"language\": \"en\", \"name\": null, \"rounding\": \"round\", \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ], 
    "name": "NumeralTickFormatter", 
    "desc": "Tick formatter based on a human-readable format string."
  }, 
  "WheelPanTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "width", 
        "type": "Enum('width', 'height')", 
        "name": "dimension", 
        "desc": "Which dimension the wheel pan tool is constrained to act in. By\n    default the wheel pan tool will pan the plot along the x-axis."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"dimension\": \"width\", \"id\": \"a0d362d6-d11b-49bc-bd98-5cbe15ebc456\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Scroll"
    ], 
    "name": "WheelPanTool", 
    "desc": "*toolbar icon*: |wheel_pan_icon|\n\n    The wheel pan tool allows the user to pan the plot along the configured\n    dimension using the scroll wheel.\n\n    .. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n        :height: 18pt"
  }, 
  "Model": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"a06b1af6-8748-4a85-a1e9-b55ffa92d85e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.core.has_props.HasProps", 
      "bokeh.util.callback_manager.PropertyCallbackManager", 
      "bokeh.util.callback_manager.EventCallbackManager"
    ], 
    "name": "Model", 
    "desc": "Base class for all objects stored in Bokeh  |Document| instances."
  }, 
  "DataRange1d": {
    "props": [
      {
        "default": null, 
        "type": "Either(Float, TimeDelta)", 
        "name": "min_interval", 
        "desc": "The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound."
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot."
      }, 
      {
        "default": null, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "end", 
        "desc": "An explicitly supplied range end. If provided, will override\n    automatically computed end value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the range is updated."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "MinMaxBounds(Auto, Tuple(Float, Float), Tuple(TimeDelta, TimeDelta), Tuple(Datetime, Datetime))", 
        "name": "bounds", 
        "desc": "The bounds that the range is allowed to go to. Typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the DataRange1d.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether\n    your range is increasing or decreasing, the first item should be the\n    minimum value of the range and the second item should be the maximum.\n    Setting ``min > max`` will result in a ``ValueError``.\n\n    If you only want to constrain one end of the plot, you can set ``min`` or\n    ``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``"
      }, 
      {
        "default": "percent", 
        "type": "Enum('percent', 'absolute')", 
        "name": "range_padding_units", 
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)"
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "flipped", 
        "desc": "Whether the range should be \"flipped\" from its normal direction when\n    auto-ranging."
      }, 
      {
        "default": null, 
        "type": "Either(Float, Datetime, TimeDelta)", 
        "name": "start", 
        "desc": "An explicitly supplied range start. If provided, will override\n    automatically computed start value."
      }, 
      {
        "default": null, 
        "type": "Either(Float, TimeDelta)", 
        "name": "max_interval", 
        "desc": "The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Note that ``bounds`` can impose an\n    implicit constraint on the maximum interval as well."
      }, 
      {
        "default": null, 
        "type": "Either(Float, TimeDelta)", 
        "name": "follow_interval", 
        "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\n    always be constrained to that::\n\n         abs(r.start - r.end) <= follow_interval\n\n    is maintained."
      }, 
      {
        "default": 2.0, 
        "type": "Either(Float, TimeDelta)", 
        "name": "default_span", 
        "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n    (if used with a log axis, default_span is in powers of 10)."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": 0.1, 
        "type": "Either(Float, TimeDelta)", 
        "name": "range_padding", 
        "desc": "How much padding to add around the computed data bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``."
      }, 
      {
        "default": null, 
        "type": "Enum('start', 'end')", 
        "name": "follow", 
        "desc": "Configure the data to follow one or the other data extreme, with a\n    maximum range size of ``follow_interval``.\n\n    If set to ``\"start\"`` then the range will adjust so that ``start`` always\n    corresponds to the minimum data value (or maximum, if ``flipped`` is\n    ``True``).\n\n    If set to ``\"end\"`` then the range will adjust so that ``end`` always\n    corresponds to the maximum data value (or minimum, if ``flipped`` is\n    ``True``).\n\n    If set to ``None`` (default), then auto-ranging does not follow, and\n    the range will encompass both the minimum and maximum data values.\n\n    ``follow`` cannot be used with bounds, and if set, bounds will be set to\n    ``None``."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "names", 
        "desc": "A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging."
      }
    ], 
    "proto": "{\"bounds\": null, \"callback\": null, \"default_span\": 2.0, \"end\": null, \"flipped\": false, \"follow\": null, \"follow_interval\": null, \"id\": \"66dd3b73-1979-46ae-95fe-68adec0955e5\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_interval\": null, \"min_interval\": null, \"name\": null, \"names\": [], \"range_padding\": 0.1, \"range_padding_units\": \"percent\", \"renderers\": [], \"start\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.ranges.DataRange"
    ], 
    "name": "DataRange1d", 
    "desc": "An auto-fitting range in a continuous scalar dimension.\n\n    By default the ``start`` and ``end`` of the range automatically\n    assume min and max values of the data for associated renderers."
  }, 
  "QUADKEYTileSource": {
    "props": [
      {
        "default": 156543.03392804097, 
        "type": "Float", 
        "name": "initial_resolution", 
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "attribution", 
        "desc": "Data provider attribution content. This can include HTML content."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "url", 
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 30, 
        "type": "Int", 
        "name": "max_zoom", 
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "min_zoom", 
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, Any)", 
        "name": "extra_url_vars", 
        "desc": "A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "snap_to_zoom", 
        "desc": "Forces initial extents to snap to the closest larger zoom level."
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "wrap_around", 
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``."
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "y_origin_offset", 
        "desc": "A y-offset in plot coordinates"
      }, 
      {
        "default": 256, 
        "type": "Int", 
        "name": "tile_size", 
        "desc": "Tile size in pixels (e.g. 256)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": 20037508.34, 
        "type": "Float", 
        "name": "x_origin_offset", 
        "desc": "An x-offset in plot coordinates"
      }
    ], 
    "proto": "{\"attribution\": \"\", \"extra_url_vars\": {}, \"id\": \"c47469b6-c465-47cf-ac18-c36e4c990031\", \"initial_resolution\": 156543.03392804097, \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"max_zoom\": 30, \"min_zoom\": 0, \"name\": null, \"snap_to_zoom\": false, \"subscribed_events\": [], \"tags\": [], \"tile_size\": 256, \"url\": \"\", \"wrap_around\": true, \"x_origin_offset\": 20037508.34, \"y_origin_offset\": 20037508.34}", 
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ], 
    "name": "QUADKEYTileSource", 
    "desc": "The QUADKEYTileSource has the same tile origin as the WMTSTileSource\n    but requests tiles using a `quadkey` argument instead of X, Y, Z e.g. ``http://your.quadkey.tile.host/{Q}.png``"
  }, 
  "AbstractGroup": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "labels", 
        "desc": "List of text labels contained in this group."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever a button group is manipulated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"id\": \"ff96687b-3bf6-4241-9c31-d8f93664fbf7\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"labels\": [], \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ], 
    "name": "AbstractGroup", 
    "desc": "Abstract base class for all kinds of groups.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "TeeHead": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the arrow head outline."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the arrow head outline."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the arrow head outline."
      }, 
      {
        "default": "annotation", 
        "type": "Enum('image', 'underlay', 'glyph', 'annotation', 'overlay')", 
        "name": "level", 
        "desc": "Specifies the level in which to paint this renderer."
      }, 
      {
        "default": null, 
        "type": "Instance(Plot)", 
        "name": "plot", 
        "desc": "The plot to which this annotation is attached."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "visible", 
        "desc": "Is the renderer visible."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the arrow head outline."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the arrow head outline."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 25, 
        "type": "Float", 
        "name": "size", 
        "desc": "The size, in pixels, of the arrow head."
      }
    ], 
    "proto": "{\"id\": \"6297d668-fe45-4404-aa62-7b5e019b8a3a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"level\": \"annotation\", \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"plot\": null, \"size\": 25, \"subscribed_events\": [], \"tags\": [], \"visible\": true}", 
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ], 
    "name": "TeeHead", 
    "desc": "Render a tee-style arrow head."
  }, 
  "Scatter": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": "circle", 
        "type": "MarkerSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_x', 'cross', 'dash', 'diamond', 'diamond_cross', 'hex', 'inverted_triangle', 'square', 'square_cross', 'square_x', 'triangle', 'x'))), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_x', 'cross', 'dash', 'diamond', 'diamond_cross', 'hex', 'inverted_triangle', 'square', 'square_cross', 'square_x', 'triangle', 'x'))", 
        "name": "marker", 
        "desc": "Which marker to render. This can be the name of any built in marker,\n    e.g. \"circle\", or a reference to a data column containinh such names."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"5c4a67fa-ebb5-4a1e-9859-a0a406a0ca48\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"marker\": {\"value\": \"circle\"}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "Scatter", 
    "desc": "Render arbitrary markers according a specification.\n\n    The Scatter can draw any built-in marker type. It can be configured\n    to draw the same marker for all values by specifying the name of a\n    marker, e.g.\n\n    .. code-block:: python\n\n        glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"square\")\n        plot.add_glyph(source, glyph)\n\n    will render only Square markers for all points. Alternatively, the\n    Scatter marker can be configured to use marker types specified in a\n    data source column:\n\n    .. code-block:: python\n\n        # source.data['markers'] = [\"circle\", \"square\", \"circle\", ... ]\n\n        glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"markers\")\n        plot.add_glyph(source, glyph)\n\n    Note that circles drawn with `Scatter` conform to the standard Marker\n    interface, and can only vary by size (in screen units) and *not* by radius\n    (in data units). If you need to control circles by radius in data units,\n    you should use the Circle glyph directly.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Scatter.py\n        :source-position: below"
  }, 
  "Callback": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"f965c471-9e91-41c7-876d-710b8a88c3db\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "Callback", 
    "desc": "Base class for interactive callback.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "SelectionPolicy": {
    "props": [
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"13894e1f-1532-42ed-9dd9-99720f80e05a\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.model.Model"
    ], 
    "name": "SelectionPolicy", 
    "desc": ".. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "ColumnDataSource": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "{\"id\": \"450aa2e9-c5bf-470c-a62f-fdbba8e0a99c\"}", 
        "type": "Instance(Selection)", 
        "name": "selected", 
        "desc": "A Selection that indicates selected indices on this DataSource."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the selection is changed."
      }, 
      {
        "default": "{\"id\": \"fe79efa9-d370-4e94-ae9d-85236992c274\"}", 
        "type": "Instance(SelectionPolicy)", 
        "name": "selection_policy", 
        "desc": "An instance of a SelectionPolicy that determines how selections are set."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "ColumnData(String, Seq(Any))", 
        "name": "data", 
        "desc": "Mapping of column names to sequences of data. The data can be, e.g,\n    Python lists or tuples, NumPy arrays, etc."
      }
    ], 
    "proto": "{\"callback\": null, \"data\": {}, \"id\": \"4a816861-abb4-448d-b522-61d4786d73cf\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"selected\": {\"id\": \"b86e9372-03db-4135-a8c5-205d9a2d1e01\", \"type\": \"Selection\"}, \"selection_policy\": {\"id\": \"f4af465e-9621-4f81-ac0a-1a59b55d2643\", \"type\": \"UnionRenderers\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ], 
    "name": "ColumnDataSource", 
    "desc": "Maps names of columns to sequences or arrays.\n\n    The ``ColumnDataSource`` is a fundamental data structure of Bokeh. Most\n    plots, data tables, etc. will be driven by a ``ColumnDataSource``.\n\n    If the ColumnDataSource initializer is called with a single argument that\n    can be any of the following:\n\n    * A Python ``dict`` that maps string names to sequences of values, e.g.\n      lists, arrays, etc.\n\n      .. code-block:: python\n\n          data = {'x': [1,2,3,4], 'y': np.ndarray([10.0, 20.0, 30.0, 40.0])}\n\n          source = ColumnDataSource(data)\n\n    .. note::\n        ``ColumnDataSource`` only creates a shallow copy of ``data``. Use e.g.\n        ``ColumnDataSource(copy.deepcopy(data))`` if initializing from another\n        ``ColumnDataSource.data`` object that you want to keep independent.\n\n    * A Pandas ``DataFrame`` object\n\n      .. code-block:: python\n\n          source = ColumnDataSource(df)\n\n      In this case the CDS will have columns corresponding to the columns of\n      the ``DataFrame``. If the ``DataFrame`` columns have multiple levels,\n      they will be flattend using an underscore (e.g. level_0_col_level_1_col).\n      The index of the DataFrame will be flattened to an ``Index`` of tuples\n      if it's a ``MultiIndex``, and then reset using ``reset_index``. The result\n      will be a column with the same name if the index was named, or\n      level_0_name_level_1_name if it was a named ``MultiIndex``. If the\n      ``Index`` did not have a name or the ``MultiIndex`` name could not be\n      flattened/determined, the ``reset_index`` function will name the index column\n      ``index``, or ``level_0`` if the name ``index`` is not available.\n\n    * A Pandas ``GroupBy`` object\n\n      .. code-block:: python\n\n          group = df.groupby(('colA', 'ColB'))\n\n      In this case the CDS will have columns corresponding to the result of\n      calling ``group.describe()``. The ``describe`` method generates columns\n      for statistical measures such as ``mean`` and ``count`` for all the\n      non-grouped orginal columns. The CDS columns are formed by joining\n      original column names with the computed measure. For example, if a\n      ``DataFrame`` has columns ``'year'`` and ``'mpg'``. Then passing\n      ``df.groupby('year')`` to a CDS will result in columns such as\n      ``'mpg_mean'``\n\n      If the ``GroupBy.describe`` result has a named index column, then\n      CDS will also have a column with this name. However, if the index name\n      (or any subname of a ``MultiIndex``) is ``None``, then the CDS will have\n      a column generically named ``index`` for the index.\n\n      Note this capability to adapt ``GroupBy`` objects may only work with\n      Pandas ``>=0.20.0``.\n\n    .. note::\n        There is an implicit assumption that all the columns in a given\n        ``ColumnDataSource`` all have the same length at all times. For this\n        reason, it is usually preferable to update the ``.data`` property\n        of a data source \"all at once\"."
  }, 
  "DiamondCross": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the markers."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the markers."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angles to rotate the markers."
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the markers."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the markers."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the markers."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the markers."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-axis coordinates for the center of the markers."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-axis coordinates for the center of the markers."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the markers."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 4, 
        "type": "ScreenDistanceSpec(units_default=u'screen')", 
        "name": "size", 
        "desc": "The size (diameter) values for the markers in screen space units."
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"id\": \"995b63e5-6cd1-4288-a846-092c7190c464\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"size\": {\"units\": \"screen\", \"value\": 4}, \"subscribed_events\": [], \"tags\": [], \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.markers.Marker"
    ], 
    "name": "DiamondCross", 
    "desc": "Render diamond markers with a '+' cross through the center. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/DiamondCross.py\n        :source-position: below"
  }, 
  "FreehandDrawTool": {
    "props": [
      {
        "default": null, 
        "type": "String", 
        "name": "custom_tooltip", 
        "desc": "A custom tooltip label to override the default name."
      }, 
      {
        "default": null, 
        "type": "Image", 
        "name": "custom_icon", 
        "desc": "An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "num_objects", 
        "desc": "Defines a limit on the number of patches or multi-lines that can\n    be drawn. By default there is no limit on the number of objects,\n    but if enabled the oldest drawn patch or multi-line will be\n    overwritten when the limit is reached."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Instance(Renderer))", 
        "name": "renderers", 
        "desc": "An explicit list of renderers corresponding to scatter glyphs\n    that may be edited."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Either(Bool, Int, Float, Date, Datetime, Color)", 
        "name": "empty_value", 
        "desc": "Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ColumnDataSource columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value."
      }
    ], 
    "proto": "{\"custom_icon\": null, \"custom_tooltip\": null, \"empty_value\": null, \"id\": \"08974b50-da8b-4c1f-ad67-c15ef10b4474\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"num_objects\": 0, \"renderers\": [], \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.EditTool", 
      "bokeh.models.tools.Drag", 
      "bokeh.models.tools.Tap"
    ], 
    "name": "FreehandDrawTool", 
    "desc": "*toolbar icon*: |freehand_draw_icon|\n\n    The FreehandDrawTool allows freehand drawing of ``Patches`` and\n    ``MultiLine`` glyphs. The glyph to draw may be defined via the\n    ``renderers`` property.\n\n    The tool will automatically modify the columns on the data source\n    corresponding to the ``xs`` and ``ys`` values of the glyph. Any\n    additional columns in the data source will be padded with the\n    declared ``empty_value``, when adding a new point.\n\n    The supported actions include:\n\n    * Draw vertices: Click and drag to draw a line\n\n    * Delete patch/multi-line: Tap a patch/multi-line to select it\n      then press <<backspace>> key while the mouse is within the plot\n      area.\n\n    .. |freehand_draw_icon| image:: /_images/icons/FreehandDraw.png\n        :height: 18pt"
  }, 
  "BoxZoomTool": {
    "props": [
      {
        "default": "corner", 
        "type": "Enum('corner', 'center')", 
        "name": "origin", 
        "desc": "Indicates whether the rectangular zoom area should originate from a corner\n    (top-left or bottom-right depending on direction) or the center of the box."
      }, 
      {
        "default": "both", 
        "type": "Enum('width', 'height', 'both')", 
        "name": "dimensions", 
        "desc": "Which dimensions the zoom box is to be free in. By default,\n    users may freely draw zoom boxes with any dimensions. If only\n    \"width\" is supplied, the box will be constrained to span the entire\n    vertical space of the plot, only the horizontal dimension can be\n    controlled. If only \"height\" is supplied, the box will be constrained\n    to span the entire horizontal space of the plot, and the vertical\n    dimension can be controlled."
      }, 
      {
        "default": "{\"bottom_units\": \"screen\", \"fill_alpha\": {\"value\": 0.5}, \"fill_color\": {\"value\": \"lightgrey\"}, \"id\": \"232678a6-9cd7-46b3-b26a-6d8e82c995b5\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": {\"value\": 1.0}, \"line_color\": {\"value\": \"black\"}, \"line_dash\": [4, 4], \"line_width\": {\"value\": 2}, \"render_mode\": \"css\", \"right_units\": \"screen\", \"top_units\": \"screen\"}", 
        "type": "Instance(BoxAnnotation)", 
        "name": "overlay", 
        "desc": "A shaded annotation drawn to indicate the selection region."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "match_aspect", 
        "desc": "Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }
    ], 
    "proto": "{\"dimensions\": \"both\", \"id\": \"e40e870f-23dd-4a94-a635-64e29cb46c0e\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"match_aspect\": false, \"name\": null, \"origin\": \"corner\", \"overlay\": {\"id\": \"15e8841d-a45e-4057-ae4e-9a12e802bacc\", \"type\": \"BoxAnnotation\"}, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.tools.Drag"
    ], 
    "name": "BoxZoomTool", 
    "desc": "*toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular\n    region of a Plot to zoom to by dragging he mouse or a\n    finger over the plot region. The end of the drag\n    event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 18pt"
  }, 
  "RangeSlider": {
    "props": [
      {
        "default": true, 
        "type": "Bool", 
        "name": "tooltips", 
        "desc": ""
      }, 
      {
        "default": 200, 
        "type": "Float", 
        "name": "callback_throttle", 
        "desc": "Number of millseconds to pause between callback calls as the slider is moved."
      }, 
      {
        "default": "ltr", 
        "type": "Enum('ltr', 'rtl')", 
        "name": "direction", 
        "desc": ""
      }, 
      {
        "default": true, 
        "type": "Bool", 
        "name": "show_value", 
        "desc": "Whether or not show slider's value."
      }, 
      {
        "default": "horizontal", 
        "type": "Enum('horizontal', 'vertical')", 
        "name": "orientation", 
        "desc": "Orient the slider either horizontally (default) or vertically."
      }, 
      {
        "default": "0[.]00", 
        "type": "String", 
        "name": "format", 
        "desc": ""
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": "throttle", 
        "type": "Enum('continuous', 'throttle', 'mouseup')", 
        "name": "callback_policy", 
        "desc": "When the callback is initiated. This parameter can take on only one of three options:\n\n    * \"continuous\": the callback will be executed immediately for each movement of the slider\n    * \"throttle\": the callback will be executed at most every ``callback_throttle`` milliseconds.\n    * \"mouseup\": the callback will be executed only once when the slider is released.\n\n    The \"mouseup\" policy is intended for scenarios in which the callback is expensive in time."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": 1, 
        "type": "Float", 
        "name": "step", 
        "desc": "The step between consecutive values."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the current Slider value changes."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "end", 
        "desc": "The maximum allowable value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": "", 
        "type": "String", 
        "name": "title", 
        "desc": "Slider's label."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "#e6e6e6", 
        "type": "Color", 
        "name": "bar_color", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "Tuple(Float, Float)", 
        "name": "value", 
        "desc": "Initial or selected range."
      }, 
      {
        "default": null, 
        "type": "Float", 
        "name": "start", 
        "desc": "The minimum allowable value."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }
    ], 
    "proto": "{\"bar_color\": \"#e6e6e6\", \"callback\": null, \"callback_policy\": \"throttle\", \"callback_throttle\": 200, \"css_classes\": [], \"direction\": \"ltr\", \"disabled\": false, \"end\": null, \"format\": \"0[.]00\", \"height\": null, \"id\": \"b29b1ea3-1a7d-4f6a-a8df-e94739fd5e27\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"orientation\": \"horizontal\", \"show_value\": true, \"sizing_mode\": \"fixed\", \"start\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": [], \"title\": \"\", \"tooltips\": true, \"value\": null, \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ], 
    "name": "RangeSlider", 
    "desc": "Range-slider based number range selection widget."
  }, 
  "AbstractButton": {
    "props": [
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "width", 
        "desc": "An optional width for the component (in pixels)."
      }, 
      {
        "default": "fixed", 
        "type": "Enum('stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed')", 
        "name": "sizing_mode", 
        "desc": "How the item being displayed should size itself. Possible values are\n    ``\"fixed\"``, ``\"scale_width\"``, ``\"scale_height\"``, ``\"scale_both\"``, and\n    ``\"stretch_both\"``.\n\n    ``\"stretch_both\"`` elements are completely responsive (independently in width and height) and\n    will resize to occupy all available space, even if this changes the aspect ratio of the element.\n    This is sometimes called outside-in, and is a typical behavior for desktop applications.\n\n    ``\"fixed\"`` elements are not responsive. They will retain their original width and height\n    regardless of any subsequent browser window resize events.\n\n    ``\"scale_width\"`` elements will responsively resize to fit to the width available, *while\n    maintaining the original aspect ratio*. This is a typical behavior for modern websites. For a\n    ``Plot``, the aspect ratio ``plot_width/plot_height`` is maintained.\n\n    ``\"scale_height\"`` elements will responsively resize to fit to the height available, *while\n    maintaining the original aspect ratio*. For a ``Plot``, the aspect ratio\n    ``plot_width/plot_height`` is maintained. A plot with ``\"scale_height\"`` mode needs\n    to be wrapped in a ``Row`` or ``Column`` to be responsive.\n\n    ``\"scale_both\"`` elements will responsively resize to for both the width and height available,\n    *while maintaining the original aspect ratio*."
      }, 
      {
        "default": "Button", 
        "type": "String", 
        "name": "label", 
        "desc": "The text label for the button to display."
      }, 
      {
        "default": false, 
        "type": "Bool", 
        "name": "disabled", 
        "desc": "Whether the widget will be disabled when rendered. If ``True``,\n    the widget will be greyed-out, and not respond to UI events."
      }, 
      {
        "default": null, 
        "type": "Instance(Callback)", 
        "name": "callback", 
        "desc": "A callback to run in the browser whenever the button is activated."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "css_classes", 
        "desc": "A list of css class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list."
      }, 
      {
        "default": "default", 
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'link')", 
        "name": "button_type", 
        "desc": "A style for the button, signifying it's role."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": null, 
        "type": "Int", 
        "name": "height", 
        "desc": "An optional height for the component (in pixels)."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": null, 
        "type": "Instance(AbstractIcon)", 
        "name": "icon", 
        "desc": "An optional image appearing to the left of button's text."
      }
    ], 
    "proto": "{\"button_type\": \"default\", \"callback\": null, \"css_classes\": [], \"disabled\": false, \"height\": null, \"icon\": null, \"id\": \"e459b12d-775c-4eee-9aa5-294a3bafeadd\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"label\": \"Button\", \"name\": null, \"sizing_mode\": \"fixed\", \"subscribed_events\": [], \"tags\": [], \"width\": null}", 
    "bases": [
      "bokeh.models.widgets.widget.Widget", 
      "bokeh.models.widgets.buttons.ButtonLike"
    ], 
    "name": "AbstractButton", 
    "desc": "A base class that defines common properties for all button types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**"
  }, 
  "Ellipse": {
    "props": [
      {
        "default": "black", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "line_color", 
        "desc": "The line color values for the ovals."
      }, 
      {
        "default": "rad", 
        "type": "Enum('deg', 'rad')", 
        "name": "angle_units", 
        "desc": ""
      }, 
      {
        "default": "gray", 
        "type": "ColorSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Color)), Color)", 
        "name": "fill_color", 
        "desc": "The fill color values for the ovals."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_alpha", 
        "desc": "The line alpha values for the ovals."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "height", 
        "desc": "The heights of each ellipse."
      }, 
      {
        "default": 0, 
        "type": "Int", 
        "name": "line_dash_offset", 
        "desc": "The line dash offset values for the ovals."
      }, 
      {
        "default": "butt", 
        "type": "Enum('butt', 'round', 'square')", 
        "name": "line_cap", 
        "desc": "The line cap values for the ovals."
      }, 
      {
        "default": [], 
        "type": "DashPattern", 
        "name": "line_dash", 
        "desc": "The line dash values for the ovals."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }, 
      {
        "default": "bevel", 
        "type": "Enum('miter', 'round', 'bevel')", 
        "name": "line_join", 
        "desc": "The line join values for the ovals."
      }, 
      {
        "default": 1, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "line_width", 
        "desc": "The line width values for the ovals."
      }, 
      {
        "default": 0.0, 
        "type": "AngleSpec(units_default=u'rad')", 
        "name": "angle", 
        "desc": "The angle the ellipses are rotated from horizontal. [rad]"
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": 1.0, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "fill_alpha", 
        "desc": "The fill alpha values for the ovals."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "height_units", 
        "desc": ""
      }, 
      {
        "default": null, 
        "type": "DistanceSpec(units_default=u'data')", 
        "name": "width", 
        "desc": "The widths of each ellipse."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "y", 
        "desc": "The y-coordinates of the centers of the ellipses."
      }, 
      {
        "default": null, 
        "type": "NumberSpec(String, Dict(Enum(u'expr', u'field', u'value', u'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)", 
        "name": "x", 
        "desc": "The x-coordinates of the centers of the ellipses."
      }, 
      {
        "default": "data", 
        "type": "Enum('screen', 'data')", 
        "name": "width_units", 
        "desc": ""
      }
    ], 
    "proto": "{\"angle\": {\"units\": \"rad\", \"value\": 0.0}, \"fill_alpha\": {\"value\": 1.0}, \"fill_color\": {\"value\": \"gray\"}, \"height\": null, \"id\": \"84569726-65c4-4713-aa34-47d12a061085\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"line_alpha\": {\"value\": 1.0}, \"line_cap\": \"butt\", \"line_color\": {\"value\": \"black\"}, \"line_dash\": [], \"line_dash_offset\": 0, \"line_join\": \"bevel\", \"line_width\": {\"value\": 1}, \"name\": null, \"subscribed_events\": [], \"tags\": [], \"width\": null, \"x\": null, \"y\": null}", 
    "bases": [
      "bokeh.models.glyphs.XYGlyph"
    ], 
    "name": "Ellipse", 
    "desc": "Render ellipses.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../examples/reference/models/Ellipse.py\n        :source-position: below"
  }, 
  "IntEditor": {
    "props": [
      {
        "default": 1, 
        "type": "Int", 
        "name": "step", 
        "desc": "The major step value."
      }, 
      {
        "default": null, 
        "type": "String", 
        "name": "name", 
        "desc": "An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(Any)", 
        "name": "tags", 
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by CustomJS callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason."
      }, 
      {
        "default": [], 
        "type": "List(String)", 
        "name": "subscribed_events", 
        "desc": "List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model."
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_property_callbacks", 
        "desc": "A mapping of attribute names to lists of CustomJS callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)"
      }, 
      {
        "default": {}, 
        "type": "Dict(String, List(Instance(CustomJS)))", 
        "name": "js_event_callbacks", 
        "desc": "A mapping of event names to lists of CustomJS callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occured')\")\n        plot.js_on_event('tap', callback)"
      }
    ], 
    "proto": "{\"id\": \"63571ef0-c7c2-4bd2-b792-b8709362528c\", \"js_event_callbacks\": {}, \"js_property_callbacks\": {}, \"name\": null, \"step\": 1, \"subscribed_events\": [], \"tags\": []}", 
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ], 
    "name": "IntEditor", 
    "desc": "Spinner-based integer cell editor."
  }
}
